
01_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  08002fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002fb8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a46a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195e  00000000  00000000  0002a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289c5  00000000  00000000  0002c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097df  00000000  00000000  00055375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe155  00000000  00000000  0005eb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  0015ccfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  0015ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  0015ec74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002e48 	.word	0x08002e48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002e48 	.word	0x08002e48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <display_board_information>:

#ifndef INC_UTILS_H_
#define INC_UTILS_H_

void display_board_information()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	printf("Board Id:\t\t\t%u\r\n", HAL_GetDEVID());
 80005dc:	f000 f9ee 	bl	80009bc <HAL_GetDEVID>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <display_board_information+0x24>)
 80005e6:	f001 fca3 	bl	8001f30 <iprintf>
	printf("Board Freq:\t\t\t%u\r\n", HAL_RCC_GetHCLKFreq());
 80005ea:	f001 f91d 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <display_board_information+0x28>)
 80005f4:	f001 fc9c 	bl	8001f30 <iprintf>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08002e60 	.word	0x08002e60
 8000600:	08002e74 	.word	0x08002e74

08000604 <main>:

#include "utils.h"


int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_Init(); // Initializing HAL.
 8000608:	f000 f940 	bl	800088c <HAL_Init>

	rcc_clock_config_HSE();
 800060c:	f000 f886 	bl	800071c <rcc_clock_config_HSE>

	gpio_LED_Blue_init();
 8000610:	f000 f856 	bl	80006c0 <gpio_LED_Blue_init>


	uart_UART3_GPIO_config();
 8000614:	f000 f8ce 	bl	80007b4 <uart_UART3_GPIO_config>
	uart_UART3_config();
 8000618:	f000 f902 	bl	8000820 <uart_UART3_config>

	display_board_information();
 800061c:	f7ff ffdc 	bl	80005d8 <display_board_information>


    while (1){
		gpio_LED_Blue_toggle();
 8000620:	f000 f872 	bl	8000708 <gpio_LED_Blue_toggle>
    	HAL_Delay(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 f9a5 	bl	8000974 <HAL_Delay>
		gpio_LED_Blue_toggle();
 800062a:	e7f9      	b.n	8000620 <main+0x1c>

0800062c <__io_putchar>:
#include "nucleo_stm32f767xx_uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	 uint8_t c[1];
	 c[0] = ch & 0x00FF;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	733b      	strb	r3, [r7, #12]
	 HAL_USART_Transmit(&husart3, &c[0], 1, 100);
 800063a:	f107 010c 	add.w	r1, r7, #12
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <__io_putchar+0x28>)
 8000644:	f001 f978 	bl	8001938 <HAL_USART_Transmit>
	 return ch;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098

08000658 <_write>:

int _write(int file,char *ptr, int len) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e009      	b.n	800067e <_write+0x26>
  __io_putchar(*ptr++);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffda 	bl	800062c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf1      	blt.n	800066a <_write+0x12>
 }
 return len;
 8000686:	687b      	ldr	r3, [r7, #4]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SysTick_Handler>:
#include "stm32f7xx_it.h"



void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000694:	f000 f94e 	bl	8000934 <HAL_IncTick>

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <gpio_LED_Blue_init>:

/*************************************************************************************************************************************************************************/


void gpio_LED_Blue_init()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <gpio_LED_Blue_init+0x40>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <gpio_LED_Blue_init+0x40>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <gpio_LED_Blue_init+0x40>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_blue_t;
    led_blue_t.Pin = BLUE_LED;
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	607b      	str	r3, [r7, #4]
    led_blue_t.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
    led_blue_t.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
    led_blue_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_blue_t);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <gpio_LED_Blue_init+0x44>)
 80006f4:	f000 fa56 	bl	8000ba4 <HAL_GPIO_Init>
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400

08000708 <gpio_LED_Blue_toggle>:
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, state);
}
/*---------------------------------------------*/

void gpio_LED_Blue_toggle(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <gpio_LED_Blue_toggle+0x10>)
 8000710:	f000 fbf4 	bl	8000efc <HAL_GPIO_TogglePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400

0800071c <rcc_clock_config_HSE>:
	    }
	    return true;
}

bool rcc_clock_config_HSE(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	; 0x48
 8000720:	af00      	add	r7, sp, #0


	  /*
	   * Oscillator initialization   *
	   */
	    RCC_OscInitTypeDef oscInit_t = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fbf8 	bl	8001f20 <memset>



	    oscInit_t.OscillatorType 					= RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
	    oscInit_t.HSEState  						= RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000738:	61bb      	str	r3, [r7, #24]
	    oscInit_t.HSICalibrationValue 				= RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	627b      	str	r3, [r7, #36]	; 0x24

	    oscInit_t.PLL.PLLState 						= RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
	    oscInit_t.PLL.PLLSource 					= RCC_PLLSOURCE_HSI;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	; 0x30

	    oscInit_t.PLL.PLLM 							= 8;
 8000746:	2308      	movs	r3, #8
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
	    oscInit_t.PLL.PLLN 							= 216;
 800074a:	23d8      	movs	r3, #216	; 0xd8
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
	    oscInit_t.PLL.PLLP 							= RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
	    oscInit_t.PLL.PLLQ 							= 2;
 8000752:	2302      	movs	r3, #2
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
	    oscInit_t.PLL.PLLR 							= 2;
 8000756:	2302      	movs	r3, #2
 8000758:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_RCC_OscConfig(&oscInit_t)!= HAL_OK)
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fbe6 	bl	8000f30 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <rcc_clock_config_HSE+0x52>
	      {
	    		return false;
 800076a:	2300      	movs	r3, #0
 800076c:	e01d      	b.n	80007aa <rcc_clock_config_HSE+0x8e>

	    /**
	     * clock initialization
	     */

	    RCC_ClkInitTypeDef oscClk_t = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
	    oscClk_t.ClockType 							= RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800077c:	230f      	movs	r3, #15
 800077e:	603b      	str	r3, [r7, #0]
	    oscClk_t.SYSCLKSource 						= RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	607b      	str	r3, [r7, #4]
	    oscClk_t.AHBCLKDivider 						= RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
	    oscClk_t.APB1CLKDivider						= RCC_HCLK_DIV4;
 8000788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078c:	60fb      	str	r3, [r7, #12]
	    oscClk_t.APB2CLKDivider 					= RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	613b      	str	r3, [r7, #16]

	    if (HAL_RCC_ClockConfig(&oscClk_t, FLASH_LATENCY_7) != HAL_OK){
 8000794:	463b      	mov	r3, r7
 8000796:	2107      	movs	r1, #7
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe77 	bl	800148c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <rcc_clock_config_HSE+0x8c>
	    	return false;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e000      	b.n	80007aa <rcc_clock_config_HSE+0x8e>
	    }
	    return true;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3748      	adds	r7, #72	; 0x48
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <uart_UART3_GPIO_config>:
#include "nucleo_stm32f767xx_uart.h"

USART_HandleTypeDef husart3;

void uart_UART3_GPIO_config()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
     * RX = PD9
     * 1 Enable cllock for Port D
     * 2: set GPIO_TypeDef to corresponding values
     */

     __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <uart_UART3_GPIO_config+0x64>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <uart_UART3_GPIO_config+0x64>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <uart_UART3_GPIO_config+0x64>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
     GPIO_InitTypeDef gpio_tx_t;

     gpio_tx_t.Pin = GPIO_PIN_8;
 80007d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d6:	61fb      	str	r3, [r7, #28]
     gpio_tx_t.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
     gpio_tx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
     gpio_tx_t.Alternate = GPIO_AF7_USART3;
 80007e0:	2307      	movs	r3, #7
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
     HAL_GPIO_Init(GPIOD, &gpio_tx_t);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <uart_UART3_GPIO_config+0x68>)
 80007ec:	f000 f9da 	bl	8000ba4 <HAL_GPIO_Init>

     GPIO_InitTypeDef gpio_rx_t;

     gpio_rx_t.Pin = GPIO_PIN_9;
 80007f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f4:	60bb      	str	r3, [r7, #8]
     gpio_rx_t.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
     gpio_rx_t.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
     gpio_rx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOD, &gpio_rx_t);
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4619      	mov	r1, r3
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <uart_UART3_GPIO_config+0x68>)
 800080a:	f000 f9cb 	bl	8000ba4 <HAL_GPIO_Init>




}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40020c00 	.word	0x40020c00

08000820 <uart_UART3_config>:


bool uart_UART3_config()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <uart_UART3_config+0x60>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <uart_UART3_config+0x60>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <uart_UART3_config+0x60>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

    husart3.Instance = USART3;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <uart_UART3_config+0x64>)
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <uart_UART3_config+0x68>)
 8000842:	601a      	str	r2, [r3, #0]
    husart3.Init.BaudRate = 115200;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <uart_UART3_config+0x64>)
 8000846:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084a:	605a      	str	r2, [r3, #4]
    husart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <uart_UART3_config+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    husart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <uart_UART3_config+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
    husart3.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <uart_UART3_config+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    husart3.Init.Mode= UART_MODE_TX_RX;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <uart_UART3_config+0x64>)
 8000860:	220c      	movs	r2, #12
 8000862:	615a      	str	r2, [r3, #20]

    if(HAL_USART_Init(&husart3) != HAL_OK)
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <uart_UART3_config+0x64>)
 8000866:	f001 f813 	bl	8001890 <HAL_USART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <uart_UART3_config+0x54>
      {
    		return false;
 8000870:	2300      	movs	r3, #0
 8000872:	e000      	b.n	8000876 <uart_UART3_config+0x56>
      }
    return true;
 8000874:	2301      	movs	r3, #1

}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	20000098 	.word	0x20000098
 8000888:	40004800 	.word	0x40004800

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x34>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_Init+0x34>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x34>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x34>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f947 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f810 	bl	80008d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f000 f806 	bl	80008c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023c00 	.word	0x40023c00

080008c4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f949 	bl	8000b8a <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f91f 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	200000e8 	.word	0x200000e8

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000e8 	.word	0x200000e8

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_GetDEVID+0x18>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e0042000 	.word	0xe0042000

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	05fa0000 	.word	0x05fa0000

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff47 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff5c 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffb0 	bl	8000af8 <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e175      	b.n	8000eb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 8164 	bne.w	8000eaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00b      	beq.n	8000c02 <HAL_GPIO_Init+0x5e>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d007      	beq.n	8000c02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf6:	2b11      	cmp	r3, #17
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x100>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b12      	cmp	r3, #18
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	69b9      	ldr	r1, [r7, #24]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80be 	beq.w	8000eaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a65      	ldr	r2, [pc, #404]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d46:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <HAL_GPIO_Init+0x328>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <HAL_GPIO_Init+0x32c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d037      	beq.n	8000de2 <HAL_GPIO_Init+0x23e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d031      	beq.n	8000dde <HAL_GPIO_Init+0x23a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <HAL_GPIO_Init+0x334>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d02b      	beq.n	8000dda <HAL_GPIO_Init+0x236>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a55      	ldr	r2, [pc, #340]	; (8000edc <HAL_GPIO_Init+0x338>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d025      	beq.n	8000dd6 <HAL_GPIO_Init+0x232>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a54      	ldr	r2, [pc, #336]	; (8000ee0 <HAL_GPIO_Init+0x33c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01f      	beq.n	8000dd2 <HAL_GPIO_Init+0x22e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a53      	ldr	r2, [pc, #332]	; (8000ee4 <HAL_GPIO_Init+0x340>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x22a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <HAL_GPIO_Init+0x344>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x226>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <HAL_GPIO_Init+0x348>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x222>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a50      	ldr	r2, [pc, #320]	; (8000ef0 <HAL_GPIO_Init+0x34c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x21e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4f      	ldr	r2, [pc, #316]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x21a>
 8000dba:	2309      	movs	r3, #9
 8000dbc:	e012      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	e010      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	e00e      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00c      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e00a      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dce:	2305      	movs	r3, #5
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x240>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x328>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e26:	4a34      	ldr	r2, [pc, #208]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e50:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_GPIO_Init+0x354>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f ae86 	bls.w	8000bc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40021c00 	.word	0x40021c00
 8000ef0:	40022000 	.word	0x40022000
 8000ef4:	40022400 	.word	0x40022400
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43d9      	mvns	r1, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e29b      	b.n	800147e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8087 	beq.w	8001062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f54:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d00c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f60:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d112      	bne.n	8000f92 <HAL_RCC_OscConfig+0x62>
 8000f6c:	4b90      	ldr	r3, [pc, #576]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f78:	d10b      	bne.n	8000f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b8d      	ldr	r3, [pc, #564]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d06c      	beq.n	8001060 <HAL_RCC_OscConfig+0x130>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d168      	bne.n	8001060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e275      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x7a>
 8000f9c:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e02e      	b.n	8001008 <HAL_RCC_OscConfig+0xd8>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x9c>
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b7c      	ldr	r3, [pc, #496]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7b      	ldr	r2, [pc, #492]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0xd8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xc0>
 8000fd6:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a75      	ldr	r2, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a72      	ldr	r2, [pc, #456]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0xd8>
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a6e      	ldr	r2, [pc, #440]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a6b      	ldr	r2, [pc, #428]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fca4 	bl	800095c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fca0 	bl	800095c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e229      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0xe8>
 8001036:	e014      	b.n	8001062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff fc90 	bl	800095c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fc8c 	bl	800095c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e215      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x110>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d069      	beq.n	8001142 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x190>
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x17a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1e9      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	493d      	ldr	r1, [pc, #244]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	e040      	b.n	8001142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc42 	bl	800095c <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc3e 	bl	800095c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e1c7      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4929      	ldr	r1, [pc, #164]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
 800110e:	e018      	b.n	8001142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fc1e 	bl	800095c <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fc1a 	bl	800095c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1a3      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d038      	beq.n	80011c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d019      	beq.n	800118a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fbfb 	bl	800095c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fbf7 	bl	800095c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e180      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x23a>
 8001188:	e01a      	b.n	80011c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800118c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff fbe1 	bl	800095c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fbdd 	bl	800095c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d903      	bls.n	80011b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e166      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
 80011b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80011b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ee      	bne.n	800119e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a4 	beq.w	8001316 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10d      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a88      	ldr	r2, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b86      	ldr	r3, [pc, #536]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f6:	4b83      	ldr	r3, [pc, #524]	; (8001404 <HAL_RCC_OscConfig+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001202:	4b80      	ldr	r3, [pc, #512]	; (8001404 <HAL_RCC_OscConfig+0x4d4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a7f      	ldr	r2, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x4d4>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120e:	f7ff fba5 	bl	800095c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fba1 	bl	800095c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e12a      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001228:	4b76      	ldr	r3, [pc, #472]	; (8001404 <HAL_RCC_OscConfig+0x4d4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x31a>
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	4a6f      	ldr	r2, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	; 0x70
 8001248:	e02d      	b.n	80012a6 <HAL_RCC_OscConfig+0x376>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x33c>
 8001252:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
 800126a:	e01c      	b.n	80012a6 <HAL_RCC_OscConfig+0x376>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b05      	cmp	r3, #5
 8001272:	d10c      	bne.n	800128e <HAL_RCC_OscConfig+0x35e>
 8001274:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4a61      	ldr	r2, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6713      	str	r3, [r2, #112]	; 0x70
 8001280:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
 800128c:	e00b      	b.n	80012a6 <HAL_RCC_OscConfig+0x376>
 800128e:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6713      	str	r3, [r2, #112]	; 0x70
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800129c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129e:	4a58      	ldr	r2, [pc, #352]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d015      	beq.n	80012da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fb55 	bl	800095c <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fb51 	bl	800095c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e0d8      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ee      	beq.n	80012b6 <HAL_RCC_OscConfig+0x386>
 80012d8:	e014      	b.n	8001304 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fb3f 	bl	800095c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb3b 	bl	800095c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0c2      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	4b41      	ldr	r3, [pc, #260]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ee      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80ae 	beq.w	800147c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d06d      	beq.n	8001408 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d14b      	bne.n	80013cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800133a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fb0c 	bl	800095c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb08 	bl	800095c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e091      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	3b01      	subs	r3, #1
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	071b      	lsls	r3, r3, #28
 8001392:	491b      	ldr	r1, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fada 	bl	800095c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fad6 	bl	800095c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e05f      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x47c>
 80013ca:	e057      	b.n	800147c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80013d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fac0 	bl	800095c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fabc 	bl	800095c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e045      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4b0>
 80013fe:	e03d      	b.n	800147c <HAL_RCC_OscConfig+0x54c>
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_RCC_OscConfig+0x558>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d030      	beq.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d129      	bne.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d122      	bne.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001438:	4013      	ands	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800143e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001440:	4293      	cmp	r3, r2
 8001442:	d119      	bne.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	3b01      	subs	r3, #1
 8001452:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d10f      	bne.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001464:	429a      	cmp	r2, r3
 8001466:	d107      	bne.n	8001478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0d0      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d910      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 020f 	bic.w	r2, r3, #15
 80014ba:	4965      	ldr	r1, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 80014f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800150a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e073      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06b      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001580:	f7ff f9ec 	bl	800095c <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff f9e8 	bl	800095c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e053      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d210      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 020f 	bic.w	r2, r3, #15
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f821 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	490a      	ldr	r1, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1cc>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1d0>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1d4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f948 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00
 8001654:	40023800 	.word	0x40023800
 8001658:	08002e88 	.word	0x08002e88
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	2300      	movs	r3, #0
 8001676:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d00d      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001688:	2b08      	cmp	r3, #8
 800168a:	f200 80bd 	bhi.w	8001808 <HAL_RCC_GetSysClockFreq+0x1a4>
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x34>
 8001692:	2b04      	cmp	r3, #4
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x3a>
 8001696:	e0b7      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b61      	ldr	r3, [pc, #388]	; (8001820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800169a:	60bb      	str	r3, [r7, #8]
      break;
 800169c:	e0b7      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800169e:	4b61      	ldr	r3, [pc, #388]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80016a0:	60bb      	str	r3, [r7, #8]
      break;
 80016a2:	e0b4      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a4:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016ae:	4b5b      	ldr	r3, [pc, #364]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d04d      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	461a      	mov	r2, r3
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	ea02 0800 	and.w	r8, r2, r0
 80016d2:	ea03 0901 	and.w	r9, r3, r1
 80016d6:	4640      	mov	r0, r8
 80016d8:	4649      	mov	r1, r9
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	014b      	lsls	r3, r1, #5
 80016e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016e8:	0142      	lsls	r2, r0, #5
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	ebb0 0008 	subs.w	r0, r0, r8
 80016f2:	eb61 0109 	sbc.w	r1, r1, r9
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	018b      	lsls	r3, r1, #6
 8001700:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001704:	0182      	lsls	r2, r0, #6
 8001706:	1a12      	subs	r2, r2, r0
 8001708:	eb63 0301 	sbc.w	r3, r3, r1
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	00d9      	lsls	r1, r3, #3
 8001716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800171a:	00d0      	lsls	r0, r2, #3
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	eb12 0208 	adds.w	r2, r2, r8
 8001724:	eb43 0309 	adc.w	r3, r3, r9
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	0259      	lsls	r1, r3, #9
 8001732:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001736:	0250      	lsls	r0, r2, #9
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	f7fe fdca 	bl	80002e0 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4613      	mov	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e04a      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	461a      	mov	r2, r3
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	ea02 0400 	and.w	r4, r2, r0
 800176e:	ea03 0501 	and.w	r5, r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	014b      	lsls	r3, r1, #5
 8001780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001784:	0142      	lsls	r2, r0, #5
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	1b00      	subs	r0, r0, r4
 800178c:	eb61 0105 	sbc.w	r1, r1, r5
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	018b      	lsls	r3, r1, #6
 800179a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800179e:	0182      	lsls	r2, r0, #6
 80017a0:	1a12      	subs	r2, r2, r0
 80017a2:	eb63 0301 	sbc.w	r3, r3, r1
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	00d9      	lsls	r1, r3, #3
 80017b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b4:	00d0      	lsls	r0, r2, #3
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	1912      	adds	r2, r2, r4
 80017bc:	eb45 0303 	adc.w	r3, r5, r3
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0299      	lsls	r1, r3, #10
 80017ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ce:	0290      	lsls	r0, r2, #10
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	f7fe fd7e 	bl	80002e0 <__aeabi_uldivmod>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4613      	mov	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	60bb      	str	r3, [r7, #8]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800180a:	60bb      	str	r3, [r7, #8]
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	68bb      	ldr	r3, [r7, #8]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400
 8001824:	007a1200 	.word	0x007a1200

08001828 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_GetHCLKFreq+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001844:	f7ff fff0 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001848:	4602      	mov	r2, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	0a9b      	lsrs	r3, r3, #10
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4903      	ldr	r1, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001856:	5ccb      	ldrb	r3, [r1, r3]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	08002e98 	.word	0x08002e98

08001868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800186c:	f7ff ffdc 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0b5b      	lsrs	r3, r3, #13
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <HAL_RCC_GetPCLK2Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	08002e98 	.word	0x08002e98

08001890 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e03c      	b.n	800191c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f834 	bl	8001924 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f90f 	bl	8001af8 <USART_SetConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01b      	b.n	800191c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018f2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001902:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fa71 	bl	8001dfc <USART_CheckIdleState>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 8095 	bne.w	8001a80 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_USART_Transmit+0x2a>
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08d      	b.n	8001a82 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_USART_Transmit+0x3c>
 8001970:	2302      	movs	r3, #2
 8001972:	e086      	b.n	8001a82 <HAL_USART_Transmit+0x14a>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2212      	movs	r2, #18
 8001986:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800198a:	f7fe ffe7 	bl	800095c <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88fa      	ldrh	r2, [r7, #6]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a4:	d108      	bne.n	80019b8 <HAL_USART_Transmit+0x80>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e003      	b.n	80019c0 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80019c0:	e02a      	b.n	8001a18 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f85c 	bl	8001a8a <USART_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e052      	b.n	8001a82 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10b      	bne.n	80019fa <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	3302      	adds	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	e007      	b.n	8001a0a <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1cf      	bne.n	80019c2 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f82c 	bl	8001a8a <USART_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e022      	b.n	8001a82 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0208 	orr.w	r2, r2, #8
 8001a5a:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001a9a:	e018      	b.n	8001ace <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d014      	beq.n	8001ace <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa4:	f7fe ff5a 	bl	800095c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <USART_WaitOnFlagUntilTimeout+0x30>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e00f      	b.n	8001aee <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d0d7      	beq.n	8001a9c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4bae      	ldr	r3, [pc, #696]	; (8001de0 <USART_SetConfig+0x2e8>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8001b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b36:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a9b      	ldr	r2, [pc, #620]	; (8001de4 <USART_SetConfig+0x2ec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d121      	bne.n	8001bbe <USART_SetConfig+0xc6>
 8001b7a:	4b9b      	ldr	r3, [pc, #620]	; (8001de8 <USART_SetConfig+0x2f0>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d817      	bhi.n	8001bb8 <USART_SetConfig+0xc0>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <USART_SetConfig+0x98>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001ba7 	.word	0x08001ba7
 8001b9c:	08001bb3 	.word	0x08001bb3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	77fb      	strb	r3, [r7, #31]
 8001ba4:	e096      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	77fb      	strb	r3, [r7, #31]
 8001baa:	e093      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001bac:	2304      	movs	r3, #4
 8001bae:	77fb      	strb	r3, [r7, #31]
 8001bb0:	e090      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	77fb      	strb	r3, [r7, #31]
 8001bb6:	e08d      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001bb8:	2310      	movs	r3, #16
 8001bba:	77fb      	strb	r3, [r7, #31]
 8001bbc:	e08a      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a8a      	ldr	r2, [pc, #552]	; (8001dec <USART_SetConfig+0x2f4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d132      	bne.n	8001c2e <USART_SetConfig+0x136>
 8001bc8:	4b87      	ldr	r3, [pc, #540]	; (8001de8 <USART_SetConfig+0x2f0>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d828      	bhi.n	8001c28 <USART_SetConfig+0x130>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <USART_SetConfig+0xe4>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c11 	.word	0x08001c11
 8001be0:	08001c29 	.word	0x08001c29
 8001be4:	08001c29 	.word	0x08001c29
 8001be8:	08001c29 	.word	0x08001c29
 8001bec:	08001c1d 	.word	0x08001c1d
 8001bf0:	08001c29 	.word	0x08001c29
 8001bf4:	08001c29 	.word	0x08001c29
 8001bf8:	08001c29 	.word	0x08001c29
 8001bfc:	08001c17 	.word	0x08001c17
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	08001c29 	.word	0x08001c29
 8001c08:	08001c29 	.word	0x08001c29
 8001c0c:	08001c23 	.word	0x08001c23
 8001c10:	2300      	movs	r3, #0
 8001c12:	77fb      	strb	r3, [r7, #31]
 8001c14:	e05e      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c16:	2302      	movs	r3, #2
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	e05b      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	77fb      	strb	r3, [r7, #31]
 8001c20:	e058      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c22:	2308      	movs	r3, #8
 8001c24:	77fb      	strb	r3, [r7, #31]
 8001c26:	e055      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c28:	2310      	movs	r3, #16
 8001c2a:	77fb      	strb	r3, [r7, #31]
 8001c2c:	e052      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6f      	ldr	r2, [pc, #444]	; (8001df0 <USART_SetConfig+0x2f8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d120      	bne.n	8001c7a <USART_SetConfig+0x182>
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <USART_SetConfig+0x2f0>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c42:	2b30      	cmp	r3, #48	; 0x30
 8001c44:	d013      	beq.n	8001c6e <USART_SetConfig+0x176>
 8001c46:	2b30      	cmp	r3, #48	; 0x30
 8001c48:	d814      	bhi.n	8001c74 <USART_SetConfig+0x17c>
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d009      	beq.n	8001c62 <USART_SetConfig+0x16a>
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d810      	bhi.n	8001c74 <USART_SetConfig+0x17c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <USART_SetConfig+0x164>
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d006      	beq.n	8001c68 <USART_SetConfig+0x170>
 8001c5a:	e00b      	b.n	8001c74 <USART_SetConfig+0x17c>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
 8001c60:	e038      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c62:	2302      	movs	r3, #2
 8001c64:	77fb      	strb	r3, [r7, #31]
 8001c66:	e035      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	77fb      	strb	r3, [r7, #31]
 8001c6c:	e032      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	77fb      	strb	r3, [r7, #31]
 8001c72:	e02f      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c74:	2310      	movs	r3, #16
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	e02c      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <USART_SetConfig+0x2fc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d125      	bne.n	8001cd0 <USART_SetConfig+0x1d8>
 8001c84:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <USART_SetConfig+0x2f0>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001c92:	d017      	beq.n	8001cc4 <USART_SetConfig+0x1cc>
 8001c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001c98:	d817      	bhi.n	8001cca <USART_SetConfig+0x1d2>
 8001c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9e:	d00b      	beq.n	8001cb8 <USART_SetConfig+0x1c0>
 8001ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca4:	d811      	bhi.n	8001cca <USART_SetConfig+0x1d2>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <USART_SetConfig+0x1ba>
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d006      	beq.n	8001cbe <USART_SetConfig+0x1c6>
 8001cb0:	e00b      	b.n	8001cca <USART_SetConfig+0x1d2>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]
 8001cb6:	e00d      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	77fb      	strb	r3, [r7, #31]
 8001cbc:	e00a      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	77fb      	strb	r3, [r7, #31]
 8001cc2:	e007      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	77fb      	strb	r3, [r7, #31]
 8001cc8:	e004      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001cca:	2310      	movs	r3, #16
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	e001      	b.n	8001cd4 <USART_SetConfig+0x1dc>
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d857      	bhi.n	8001d8a <USART_SetConfig+0x292>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <USART_SetConfig+0x1e8>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d05 	.word	0x08001d05
 8001ce4:	08001d23 	.word	0x08001d23
 8001ce8:	08001d41 	.word	0x08001d41
 8001cec:	08001d8b 	.word	0x08001d8b
 8001cf0:	08001d57 	.word	0x08001d57
 8001cf4:	08001d8b 	.word	0x08001d8b
 8001cf8:	08001d8b 	.word	0x08001d8b
 8001cfc:	08001d8b 	.word	0x08001d8b
 8001d00:	08001d75 	.word	0x08001d75
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d04:	f7ff fd9c 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 8001d08:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	005a      	lsls	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	61bb      	str	r3, [r7, #24]
      break;
 8001d20:	e036      	b.n	8001d90 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d22:	f7ff fda1 	bl	8001868 <HAL_RCC_GetPCLK2Freq>
 8001d26:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	005a      	lsls	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	441a      	add	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	61bb      	str	r3, [r7, #24]
      break;
 8001d3e:	e027      	b.n	8001d90 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	085a      	lsrs	r2, r3, #1
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <USART_SetConfig+0x300>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6852      	ldr	r2, [r2, #4]
 8001d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      break;
 8001d54:	e01c      	b.n	8001d90 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8001d56:	f7ff fc85 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001d5a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	005a      	lsls	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	441a      	add	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	61bb      	str	r3, [r7, #24]
      break;
 8001d72:	e00d      	b.n	8001d90 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	61bb      	str	r3, [r7, #24]
      break;
 8001d88:	e002      	b.n	8001d90 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	77bb      	strb	r3, [r7, #30]
      break;
 8001d8e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	d916      	bls.n	8001dc4 <USART_SetConfig+0x2cc>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d212      	bcs.n	8001dc4 <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f023 030f 	bic.w	r3, r3, #15
 8001da6:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	89fa      	ldrh	r2, [r7, #14]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	e001      	b.n	8001dc8 <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8001dd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	efff69f3 	.word	0xefff69f3
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40004400 	.word	0x40004400
 8001df0:	40004800 	.word	0x40004800
 8001df4:	40011400 	.word	0x40011400
 8001df8:	01e84800 	.word	0x01e84800

08001dfc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e0a:	f7fe fda7 	bl	800095c <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d10e      	bne.n	8001e3c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe2c 	bl	8001a8a <USART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e01e      	b.n	8001e7a <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d10e      	bne.n	8001e68 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fe16 	bl	8001a8a <USART_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e008      	b.n	8001e7a <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eae:	f7fe fbf5 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f000 f811 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7fe fba5 	bl	8000604 <main>
  bx  lr    
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ebc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ec8:	08002f48 	.word	0x08002f48
  ldr r2, =_sbss
 8001ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ed0:	200000fc 	.word	0x200000fc

08001ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC_IRQHandler>
	...

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	4d0d      	ldr	r5, [pc, #52]	; (8001f10 <__libc_init_array+0x38>)
 8001edc:	4c0d      	ldr	r4, [pc, #52]	; (8001f14 <__libc_init_array+0x3c>)
 8001ede:	1b64      	subs	r4, r4, r5
 8001ee0:	10a4      	asrs	r4, r4, #2
 8001ee2:	2600      	movs	r6, #0
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	4d0b      	ldr	r5, [pc, #44]	; (8001f18 <__libc_init_array+0x40>)
 8001eea:	4c0c      	ldr	r4, [pc, #48]	; (8001f1c <__libc_init_array+0x44>)
 8001eec:	f000 ffac 	bl	8002e48 <_init>
 8001ef0:	1b64      	subs	r4, r4, r5
 8001ef2:	10a4      	asrs	r4, r4, #2
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08002f40 	.word	0x08002f40
 8001f14:	08002f40 	.word	0x08002f40
 8001f18:	08002f40 	.word	0x08002f40
 8001f1c:	08002f44 	.word	0x08002f44

08001f20 <memset>:
 8001f20:	4402      	add	r2, r0
 8001f22:	4603      	mov	r3, r0
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <memset+0xa>
 8001f28:	4770      	bx	lr
 8001f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2e:	e7f9      	b.n	8001f24 <memset+0x4>

08001f30 <iprintf>:
 8001f30:	b40f      	push	{r0, r1, r2, r3}
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <iprintf+0x2c>)
 8001f34:	b513      	push	{r0, r1, r4, lr}
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	b124      	cbz	r4, 8001f44 <iprintf+0x14>
 8001f3a:	69a3      	ldr	r3, [r4, #24]
 8001f3c:	b913      	cbnz	r3, 8001f44 <iprintf+0x14>
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f000 f866 	bl	8002010 <__sinit>
 8001f44:	ab05      	add	r3, sp, #20
 8001f46:	9a04      	ldr	r2, [sp, #16]
 8001f48:	68a1      	ldr	r1, [r4, #8]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f000 f983 	bl	8002258 <_vfiprintf_r>
 8001f52:	b002      	add	sp, #8
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f58:	b004      	add	sp, #16
 8001f5a:	4770      	bx	lr
 8001f5c:	2000000c 	.word	0x2000000c

08001f60 <std>:
 8001f60:	2300      	movs	r3, #0
 8001f62:	b510      	push	{r4, lr}
 8001f64:	4604      	mov	r4, r0
 8001f66:	e9c0 3300 	strd	r3, r3, [r0]
 8001f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f6e:	6083      	str	r3, [r0, #8]
 8001f70:	8181      	strh	r1, [r0, #12]
 8001f72:	6643      	str	r3, [r0, #100]	; 0x64
 8001f74:	81c2      	strh	r2, [r0, #14]
 8001f76:	6183      	str	r3, [r0, #24]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	305c      	adds	r0, #92	; 0x5c
 8001f7e:	f7ff ffcf 	bl	8001f20 <memset>
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <std+0x38>)
 8001f84:	6263      	str	r3, [r4, #36]	; 0x24
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <std+0x3c>)
 8001f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <std+0x40>)
 8001f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <std+0x44>)
 8001f90:	6224      	str	r4, [r4, #32]
 8001f92:	6323      	str	r3, [r4, #48]	; 0x30
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	08002801 	.word	0x08002801
 8001f9c:	08002823 	.word	0x08002823
 8001fa0:	0800285b 	.word	0x0800285b
 8001fa4:	0800287f 	.word	0x0800287f

08001fa8 <_cleanup_r>:
 8001fa8:	4901      	ldr	r1, [pc, #4]	; (8001fb0 <_cleanup_r+0x8>)
 8001faa:	f000 b8af 	b.w	800210c <_fwalk_reent>
 8001fae:	bf00      	nop
 8001fb0:	08002b59 	.word	0x08002b59

08001fb4 <__sfmoreglue>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	1e4a      	subs	r2, r1, #1
 8001fb8:	2568      	movs	r5, #104	; 0x68
 8001fba:	4355      	muls	r5, r2
 8001fbc:	460e      	mov	r6, r1
 8001fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fc2:	f000 f8c5 	bl	8002150 <_malloc_r>
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	b140      	cbz	r0, 8001fdc <__sfmoreglue+0x28>
 8001fca:	2100      	movs	r1, #0
 8001fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8001fd0:	300c      	adds	r0, #12
 8001fd2:	60a0      	str	r0, [r4, #8]
 8001fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fd8:	f7ff ffa2 	bl	8001f20 <memset>
 8001fdc:	4620      	mov	r0, r4
 8001fde:	bd70      	pop	{r4, r5, r6, pc}

08001fe0 <__sfp_lock_acquire>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <__sfp_lock_acquire+0x8>)
 8001fe2:	f000 b8b3 	b.w	800214c <__retarget_lock_acquire_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	200000f4 	.word	0x200000f4

08001fec <__sfp_lock_release>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__sfp_lock_release+0x8>)
 8001fee:	f000 b8ae 	b.w	800214e <__retarget_lock_release_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	200000f4 	.word	0x200000f4

08001ff8 <__sinit_lock_acquire>:
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <__sinit_lock_acquire+0x8>)
 8001ffa:	f000 b8a7 	b.w	800214c <__retarget_lock_acquire_recursive>
 8001ffe:	bf00      	nop
 8002000:	200000ef 	.word	0x200000ef

08002004 <__sinit_lock_release>:
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <__sinit_lock_release+0x8>)
 8002006:	f000 b8a2 	b.w	800214e <__retarget_lock_release_recursive>
 800200a:	bf00      	nop
 800200c:	200000ef 	.word	0x200000ef

08002010 <__sinit>:
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
 8002014:	f7ff fff0 	bl	8001ff8 <__sinit_lock_acquire>
 8002018:	69a3      	ldr	r3, [r4, #24]
 800201a:	b11b      	cbz	r3, 8002024 <__sinit+0x14>
 800201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002020:	f7ff bff0 	b.w	8002004 <__sinit_lock_release>
 8002024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002028:	6523      	str	r3, [r4, #80]	; 0x50
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <__sinit+0x68>)
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <__sinit+0x6c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	62a2      	str	r2, [r4, #40]	; 0x28
 8002032:	42a3      	cmp	r3, r4
 8002034:	bf04      	itt	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	61a3      	streq	r3, [r4, #24]
 800203a:	4620      	mov	r0, r4
 800203c:	f000 f820 	bl	8002080 <__sfp>
 8002040:	6060      	str	r0, [r4, #4]
 8002042:	4620      	mov	r0, r4
 8002044:	f000 f81c 	bl	8002080 <__sfp>
 8002048:	60a0      	str	r0, [r4, #8]
 800204a:	4620      	mov	r0, r4
 800204c:	f000 f818 	bl	8002080 <__sfp>
 8002050:	2200      	movs	r2, #0
 8002052:	60e0      	str	r0, [r4, #12]
 8002054:	2104      	movs	r1, #4
 8002056:	6860      	ldr	r0, [r4, #4]
 8002058:	f7ff ff82 	bl	8001f60 <std>
 800205c:	68a0      	ldr	r0, [r4, #8]
 800205e:	2201      	movs	r2, #1
 8002060:	2109      	movs	r1, #9
 8002062:	f7ff ff7d 	bl	8001f60 <std>
 8002066:	68e0      	ldr	r0, [r4, #12]
 8002068:	2202      	movs	r2, #2
 800206a:	2112      	movs	r1, #18
 800206c:	f7ff ff78 	bl	8001f60 <std>
 8002070:	2301      	movs	r3, #1
 8002072:	61a3      	str	r3, [r4, #24]
 8002074:	e7d2      	b.n	800201c <__sinit+0xc>
 8002076:	bf00      	nop
 8002078:	08002ea0 	.word	0x08002ea0
 800207c:	08001fa9 	.word	0x08001fa9

08002080 <__sfp>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	4607      	mov	r7, r0
 8002084:	f7ff ffac 	bl	8001fe0 <__sfp_lock_acquire>
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <__sfp+0x84>)
 800208a:	681e      	ldr	r6, [r3, #0]
 800208c:	69b3      	ldr	r3, [r6, #24]
 800208e:	b913      	cbnz	r3, 8002096 <__sfp+0x16>
 8002090:	4630      	mov	r0, r6
 8002092:	f7ff ffbd 	bl	8002010 <__sinit>
 8002096:	3648      	adds	r6, #72	; 0x48
 8002098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800209c:	3b01      	subs	r3, #1
 800209e:	d503      	bpl.n	80020a8 <__sfp+0x28>
 80020a0:	6833      	ldr	r3, [r6, #0]
 80020a2:	b30b      	cbz	r3, 80020e8 <__sfp+0x68>
 80020a4:	6836      	ldr	r6, [r6, #0]
 80020a6:	e7f7      	b.n	8002098 <__sfp+0x18>
 80020a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020ac:	b9d5      	cbnz	r5, 80020e4 <__sfp+0x64>
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <__sfp+0x88>)
 80020b0:	60e3      	str	r3, [r4, #12]
 80020b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020b6:	6665      	str	r5, [r4, #100]	; 0x64
 80020b8:	f000 f847 	bl	800214a <__retarget_lock_init_recursive>
 80020bc:	f7ff ff96 	bl	8001fec <__sfp_lock_release>
 80020c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020c8:	6025      	str	r5, [r4, #0]
 80020ca:	61a5      	str	r5, [r4, #24]
 80020cc:	2208      	movs	r2, #8
 80020ce:	4629      	mov	r1, r5
 80020d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020d4:	f7ff ff24 	bl	8001f20 <memset>
 80020d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020e0:	4620      	mov	r0, r4
 80020e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e4:	3468      	adds	r4, #104	; 0x68
 80020e6:	e7d9      	b.n	800209c <__sfp+0x1c>
 80020e8:	2104      	movs	r1, #4
 80020ea:	4638      	mov	r0, r7
 80020ec:	f7ff ff62 	bl	8001fb4 <__sfmoreglue>
 80020f0:	4604      	mov	r4, r0
 80020f2:	6030      	str	r0, [r6, #0]
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d1d5      	bne.n	80020a4 <__sfp+0x24>
 80020f8:	f7ff ff78 	bl	8001fec <__sfp_lock_release>
 80020fc:	230c      	movs	r3, #12
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e7ee      	b.n	80020e0 <__sfp+0x60>
 8002102:	bf00      	nop
 8002104:	08002ea0 	.word	0x08002ea0
 8002108:	ffff0001 	.word	0xffff0001

0800210c <_fwalk_reent>:
 800210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002110:	4606      	mov	r6, r0
 8002112:	4688      	mov	r8, r1
 8002114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002118:	2700      	movs	r7, #0
 800211a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800211e:	f1b9 0901 	subs.w	r9, r9, #1
 8002122:	d505      	bpl.n	8002130 <_fwalk_reent+0x24>
 8002124:	6824      	ldr	r4, [r4, #0]
 8002126:	2c00      	cmp	r4, #0
 8002128:	d1f7      	bne.n	800211a <_fwalk_reent+0xe>
 800212a:	4638      	mov	r0, r7
 800212c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002130:	89ab      	ldrh	r3, [r5, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d907      	bls.n	8002146 <_fwalk_reent+0x3a>
 8002136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800213a:	3301      	adds	r3, #1
 800213c:	d003      	beq.n	8002146 <_fwalk_reent+0x3a>
 800213e:	4629      	mov	r1, r5
 8002140:	4630      	mov	r0, r6
 8002142:	47c0      	blx	r8
 8002144:	4307      	orrs	r7, r0
 8002146:	3568      	adds	r5, #104	; 0x68
 8002148:	e7e9      	b.n	800211e <_fwalk_reent+0x12>

0800214a <__retarget_lock_init_recursive>:
 800214a:	4770      	bx	lr

0800214c <__retarget_lock_acquire_recursive>:
 800214c:	4770      	bx	lr

0800214e <__retarget_lock_release_recursive>:
 800214e:	4770      	bx	lr

08002150 <_malloc_r>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	1ccd      	adds	r5, r1, #3
 8002154:	f025 0503 	bic.w	r5, r5, #3
 8002158:	3508      	adds	r5, #8
 800215a:	2d0c      	cmp	r5, #12
 800215c:	bf38      	it	cc
 800215e:	250c      	movcc	r5, #12
 8002160:	2d00      	cmp	r5, #0
 8002162:	4606      	mov	r6, r0
 8002164:	db01      	blt.n	800216a <_malloc_r+0x1a>
 8002166:	42a9      	cmp	r1, r5
 8002168:	d903      	bls.n	8002172 <_malloc_r+0x22>
 800216a:	230c      	movs	r3, #12
 800216c:	6033      	str	r3, [r6, #0]
 800216e:	2000      	movs	r0, #0
 8002170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002172:	f000 fda3 	bl	8002cbc <__malloc_lock>
 8002176:	4921      	ldr	r1, [pc, #132]	; (80021fc <_malloc_r+0xac>)
 8002178:	680a      	ldr	r2, [r1, #0]
 800217a:	4614      	mov	r4, r2
 800217c:	b99c      	cbnz	r4, 80021a6 <_malloc_r+0x56>
 800217e:	4f20      	ldr	r7, [pc, #128]	; (8002200 <_malloc_r+0xb0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b923      	cbnz	r3, 800218e <_malloc_r+0x3e>
 8002184:	4621      	mov	r1, r4
 8002186:	4630      	mov	r0, r6
 8002188:	f000 fb2a 	bl	80027e0 <_sbrk_r>
 800218c:	6038      	str	r0, [r7, #0]
 800218e:	4629      	mov	r1, r5
 8002190:	4630      	mov	r0, r6
 8002192:	f000 fb25 	bl	80027e0 <_sbrk_r>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	d123      	bne.n	80021e2 <_malloc_r+0x92>
 800219a:	230c      	movs	r3, #12
 800219c:	6033      	str	r3, [r6, #0]
 800219e:	4630      	mov	r0, r6
 80021a0:	f000 fd92 	bl	8002cc8 <__malloc_unlock>
 80021a4:	e7e3      	b.n	800216e <_malloc_r+0x1e>
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	1b5b      	subs	r3, r3, r5
 80021aa:	d417      	bmi.n	80021dc <_malloc_r+0x8c>
 80021ac:	2b0b      	cmp	r3, #11
 80021ae:	d903      	bls.n	80021b8 <_malloc_r+0x68>
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	441c      	add	r4, r3
 80021b4:	6025      	str	r5, [r4, #0]
 80021b6:	e004      	b.n	80021c2 <_malloc_r+0x72>
 80021b8:	6863      	ldr	r3, [r4, #4]
 80021ba:	42a2      	cmp	r2, r4
 80021bc:	bf0c      	ite	eq
 80021be:	600b      	streq	r3, [r1, #0]
 80021c0:	6053      	strne	r3, [r2, #4]
 80021c2:	4630      	mov	r0, r6
 80021c4:	f000 fd80 	bl	8002cc8 <__malloc_unlock>
 80021c8:	f104 000b 	add.w	r0, r4, #11
 80021cc:	1d23      	adds	r3, r4, #4
 80021ce:	f020 0007 	bic.w	r0, r0, #7
 80021d2:	1ac2      	subs	r2, r0, r3
 80021d4:	d0cc      	beq.n	8002170 <_malloc_r+0x20>
 80021d6:	1a1b      	subs	r3, r3, r0
 80021d8:	50a3      	str	r3, [r4, r2]
 80021da:	e7c9      	b.n	8002170 <_malloc_r+0x20>
 80021dc:	4622      	mov	r2, r4
 80021de:	6864      	ldr	r4, [r4, #4]
 80021e0:	e7cc      	b.n	800217c <_malloc_r+0x2c>
 80021e2:	1cc4      	adds	r4, r0, #3
 80021e4:	f024 0403 	bic.w	r4, r4, #3
 80021e8:	42a0      	cmp	r0, r4
 80021ea:	d0e3      	beq.n	80021b4 <_malloc_r+0x64>
 80021ec:	1a21      	subs	r1, r4, r0
 80021ee:	4630      	mov	r0, r6
 80021f0:	f000 faf6 	bl	80027e0 <_sbrk_r>
 80021f4:	3001      	adds	r0, #1
 80021f6:	d1dd      	bne.n	80021b4 <_malloc_r+0x64>
 80021f8:	e7cf      	b.n	800219a <_malloc_r+0x4a>
 80021fa:	bf00      	nop
 80021fc:	2000008c 	.word	0x2000008c
 8002200:	20000090 	.word	0x20000090

08002204 <__sfputc_r>:
 8002204:	6893      	ldr	r3, [r2, #8]
 8002206:	3b01      	subs	r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	b410      	push	{r4}
 800220c:	6093      	str	r3, [r2, #8]
 800220e:	da08      	bge.n	8002222 <__sfputc_r+0x1e>
 8002210:	6994      	ldr	r4, [r2, #24]
 8002212:	42a3      	cmp	r3, r4
 8002214:	db01      	blt.n	800221a <__sfputc_r+0x16>
 8002216:	290a      	cmp	r1, #10
 8002218:	d103      	bne.n	8002222 <__sfputc_r+0x1e>
 800221a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800221e:	f000 bb33 	b.w	8002888 <__swbuf_r>
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	1c58      	adds	r0, r3, #1
 8002226:	6010      	str	r0, [r2, #0]
 8002228:	7019      	strb	r1, [r3, #0]
 800222a:	4608      	mov	r0, r1
 800222c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002230:	4770      	bx	lr

08002232 <__sfputs_r>:
 8002232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002234:	4606      	mov	r6, r0
 8002236:	460f      	mov	r7, r1
 8002238:	4614      	mov	r4, r2
 800223a:	18d5      	adds	r5, r2, r3
 800223c:	42ac      	cmp	r4, r5
 800223e:	d101      	bne.n	8002244 <__sfputs_r+0x12>
 8002240:	2000      	movs	r0, #0
 8002242:	e007      	b.n	8002254 <__sfputs_r+0x22>
 8002244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002248:	463a      	mov	r2, r7
 800224a:	4630      	mov	r0, r6
 800224c:	f7ff ffda 	bl	8002204 <__sfputc_r>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d1f3      	bne.n	800223c <__sfputs_r+0xa>
 8002254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002258 <_vfiprintf_r>:
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	460d      	mov	r5, r1
 800225e:	b09d      	sub	sp, #116	; 0x74
 8002260:	4614      	mov	r4, r2
 8002262:	4698      	mov	r8, r3
 8002264:	4606      	mov	r6, r0
 8002266:	b118      	cbz	r0, 8002270 <_vfiprintf_r+0x18>
 8002268:	6983      	ldr	r3, [r0, #24]
 800226a:	b90b      	cbnz	r3, 8002270 <_vfiprintf_r+0x18>
 800226c:	f7ff fed0 	bl	8002010 <__sinit>
 8002270:	4b89      	ldr	r3, [pc, #548]	; (8002498 <_vfiprintf_r+0x240>)
 8002272:	429d      	cmp	r5, r3
 8002274:	d11b      	bne.n	80022ae <_vfiprintf_r+0x56>
 8002276:	6875      	ldr	r5, [r6, #4]
 8002278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800227a:	07d9      	lsls	r1, r3, #31
 800227c:	d405      	bmi.n	800228a <_vfiprintf_r+0x32>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	059a      	lsls	r2, r3, #22
 8002282:	d402      	bmi.n	800228a <_vfiprintf_r+0x32>
 8002284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002286:	f7ff ff61 	bl	800214c <__retarget_lock_acquire_recursive>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	071b      	lsls	r3, r3, #28
 800228e:	d501      	bpl.n	8002294 <_vfiprintf_r+0x3c>
 8002290:	692b      	ldr	r3, [r5, #16]
 8002292:	b9eb      	cbnz	r3, 80022d0 <_vfiprintf_r+0x78>
 8002294:	4629      	mov	r1, r5
 8002296:	4630      	mov	r0, r6
 8002298:	f000 fb5a 	bl	8002950 <__swsetup_r>
 800229c:	b1c0      	cbz	r0, 80022d0 <_vfiprintf_r+0x78>
 800229e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022a0:	07dc      	lsls	r4, r3, #31
 80022a2:	d50e      	bpl.n	80022c2 <_vfiprintf_r+0x6a>
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	b01d      	add	sp, #116	; 0x74
 80022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ae:	4b7b      	ldr	r3, [pc, #492]	; (800249c <_vfiprintf_r+0x244>)
 80022b0:	429d      	cmp	r5, r3
 80022b2:	d101      	bne.n	80022b8 <_vfiprintf_r+0x60>
 80022b4:	68b5      	ldr	r5, [r6, #8]
 80022b6:	e7df      	b.n	8002278 <_vfiprintf_r+0x20>
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <_vfiprintf_r+0x248>)
 80022ba:	429d      	cmp	r5, r3
 80022bc:	bf08      	it	eq
 80022be:	68f5      	ldreq	r5, [r6, #12]
 80022c0:	e7da      	b.n	8002278 <_vfiprintf_r+0x20>
 80022c2:	89ab      	ldrh	r3, [r5, #12]
 80022c4:	0598      	lsls	r0, r3, #22
 80022c6:	d4ed      	bmi.n	80022a4 <_vfiprintf_r+0x4c>
 80022c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022ca:	f7ff ff40 	bl	800214e <__retarget_lock_release_recursive>
 80022ce:	e7e9      	b.n	80022a4 <_vfiprintf_r+0x4c>
 80022d0:	2300      	movs	r3, #0
 80022d2:	9309      	str	r3, [sp, #36]	; 0x24
 80022d4:	2320      	movs	r3, #32
 80022d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022da:	f8cd 800c 	str.w	r8, [sp, #12]
 80022de:	2330      	movs	r3, #48	; 0x30
 80022e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80024a4 <_vfiprintf_r+0x24c>
 80022e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022e8:	f04f 0901 	mov.w	r9, #1
 80022ec:	4623      	mov	r3, r4
 80022ee:	469a      	mov	sl, r3
 80022f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022f4:	b10a      	cbz	r2, 80022fa <_vfiprintf_r+0xa2>
 80022f6:	2a25      	cmp	r2, #37	; 0x25
 80022f8:	d1f9      	bne.n	80022ee <_vfiprintf_r+0x96>
 80022fa:	ebba 0b04 	subs.w	fp, sl, r4
 80022fe:	d00b      	beq.n	8002318 <_vfiprintf_r+0xc0>
 8002300:	465b      	mov	r3, fp
 8002302:	4622      	mov	r2, r4
 8002304:	4629      	mov	r1, r5
 8002306:	4630      	mov	r0, r6
 8002308:	f7ff ff93 	bl	8002232 <__sfputs_r>
 800230c:	3001      	adds	r0, #1
 800230e:	f000 80aa 	beq.w	8002466 <_vfiprintf_r+0x20e>
 8002312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002314:	445a      	add	r2, fp
 8002316:	9209      	str	r2, [sp, #36]	; 0x24
 8002318:	f89a 3000 	ldrb.w	r3, [sl]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <_vfiprintf_r+0x20e>
 8002322:	2300      	movs	r3, #0
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800232c:	f10a 0a01 	add.w	sl, sl, #1
 8002330:	9304      	str	r3, [sp, #16]
 8002332:	9307      	str	r3, [sp, #28]
 8002334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002338:	931a      	str	r3, [sp, #104]	; 0x68
 800233a:	4654      	mov	r4, sl
 800233c:	2205      	movs	r2, #5
 800233e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002342:	4858      	ldr	r0, [pc, #352]	; (80024a4 <_vfiprintf_r+0x24c>)
 8002344:	f7fd ff7c 	bl	8000240 <memchr>
 8002348:	9a04      	ldr	r2, [sp, #16]
 800234a:	b9d8      	cbnz	r0, 8002384 <_vfiprintf_r+0x12c>
 800234c:	06d1      	lsls	r1, r2, #27
 800234e:	bf44      	itt	mi
 8002350:	2320      	movmi	r3, #32
 8002352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002356:	0713      	lsls	r3, r2, #28
 8002358:	bf44      	itt	mi
 800235a:	232b      	movmi	r3, #43	; 0x2b
 800235c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002360:	f89a 3000 	ldrb.w	r3, [sl]
 8002364:	2b2a      	cmp	r3, #42	; 0x2a
 8002366:	d015      	beq.n	8002394 <_vfiprintf_r+0x13c>
 8002368:	9a07      	ldr	r2, [sp, #28]
 800236a:	4654      	mov	r4, sl
 800236c:	2000      	movs	r0, #0
 800236e:	f04f 0c0a 	mov.w	ip, #10
 8002372:	4621      	mov	r1, r4
 8002374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	2b09      	cmp	r3, #9
 800237c:	d94e      	bls.n	800241c <_vfiprintf_r+0x1c4>
 800237e:	b1b0      	cbz	r0, 80023ae <_vfiprintf_r+0x156>
 8002380:	9207      	str	r2, [sp, #28]
 8002382:	e014      	b.n	80023ae <_vfiprintf_r+0x156>
 8002384:	eba0 0308 	sub.w	r3, r0, r8
 8002388:	fa09 f303 	lsl.w	r3, r9, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	9304      	str	r3, [sp, #16]
 8002390:	46a2      	mov	sl, r4
 8002392:	e7d2      	b.n	800233a <_vfiprintf_r+0xe2>
 8002394:	9b03      	ldr	r3, [sp, #12]
 8002396:	1d19      	adds	r1, r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	9103      	str	r1, [sp, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	bfbb      	ittet	lt
 80023a0:	425b      	neglt	r3, r3
 80023a2:	f042 0202 	orrlt.w	r2, r2, #2
 80023a6:	9307      	strge	r3, [sp, #28]
 80023a8:	9307      	strlt	r3, [sp, #28]
 80023aa:	bfb8      	it	lt
 80023ac:	9204      	strlt	r2, [sp, #16]
 80023ae:	7823      	ldrb	r3, [r4, #0]
 80023b0:	2b2e      	cmp	r3, #46	; 0x2e
 80023b2:	d10c      	bne.n	80023ce <_vfiprintf_r+0x176>
 80023b4:	7863      	ldrb	r3, [r4, #1]
 80023b6:	2b2a      	cmp	r3, #42	; 0x2a
 80023b8:	d135      	bne.n	8002426 <_vfiprintf_r+0x1ce>
 80023ba:	9b03      	ldr	r3, [sp, #12]
 80023bc:	1d1a      	adds	r2, r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	9203      	str	r2, [sp, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bfb8      	it	lt
 80023c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ca:	3402      	adds	r4, #2
 80023cc:	9305      	str	r3, [sp, #20]
 80023ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024b4 <_vfiprintf_r+0x25c>
 80023d2:	7821      	ldrb	r1, [r4, #0]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4650      	mov	r0, sl
 80023d8:	f7fd ff32 	bl	8000240 <memchr>
 80023dc:	b140      	cbz	r0, 80023f0 <_vfiprintf_r+0x198>
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	eba0 000a 	sub.w	r0, r0, sl
 80023e4:	fa03 f000 	lsl.w	r0, r3, r0
 80023e8:	9b04      	ldr	r3, [sp, #16]
 80023ea:	4303      	orrs	r3, r0
 80023ec:	3401      	adds	r4, #1
 80023ee:	9304      	str	r3, [sp, #16]
 80023f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f4:	482c      	ldr	r0, [pc, #176]	; (80024a8 <_vfiprintf_r+0x250>)
 80023f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023fa:	2206      	movs	r2, #6
 80023fc:	f7fd ff20 	bl	8000240 <memchr>
 8002400:	2800      	cmp	r0, #0
 8002402:	d03f      	beq.n	8002484 <_vfiprintf_r+0x22c>
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <_vfiprintf_r+0x254>)
 8002406:	bb1b      	cbnz	r3, 8002450 <_vfiprintf_r+0x1f8>
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	3307      	adds	r3, #7
 800240c:	f023 0307 	bic.w	r3, r3, #7
 8002410:	3308      	adds	r3, #8
 8002412:	9303      	str	r3, [sp, #12]
 8002414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002416:	443b      	add	r3, r7
 8002418:	9309      	str	r3, [sp, #36]	; 0x24
 800241a:	e767      	b.n	80022ec <_vfiprintf_r+0x94>
 800241c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002420:	460c      	mov	r4, r1
 8002422:	2001      	movs	r0, #1
 8002424:	e7a5      	b.n	8002372 <_vfiprintf_r+0x11a>
 8002426:	2300      	movs	r3, #0
 8002428:	3401      	adds	r4, #1
 800242a:	9305      	str	r3, [sp, #20]
 800242c:	4619      	mov	r1, r3
 800242e:	f04f 0c0a 	mov.w	ip, #10
 8002432:	4620      	mov	r0, r4
 8002434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002438:	3a30      	subs	r2, #48	; 0x30
 800243a:	2a09      	cmp	r2, #9
 800243c:	d903      	bls.n	8002446 <_vfiprintf_r+0x1ee>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0c5      	beq.n	80023ce <_vfiprintf_r+0x176>
 8002442:	9105      	str	r1, [sp, #20]
 8002444:	e7c3      	b.n	80023ce <_vfiprintf_r+0x176>
 8002446:	fb0c 2101 	mla	r1, ip, r1, r2
 800244a:	4604      	mov	r4, r0
 800244c:	2301      	movs	r3, #1
 800244e:	e7f0      	b.n	8002432 <_vfiprintf_r+0x1da>
 8002450:	ab03      	add	r3, sp, #12
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	462a      	mov	r2, r5
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <_vfiprintf_r+0x258>)
 8002458:	a904      	add	r1, sp, #16
 800245a:	4630      	mov	r0, r6
 800245c:	f3af 8000 	nop.w
 8002460:	4607      	mov	r7, r0
 8002462:	1c78      	adds	r0, r7, #1
 8002464:	d1d6      	bne.n	8002414 <_vfiprintf_r+0x1bc>
 8002466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002468:	07d9      	lsls	r1, r3, #31
 800246a:	d405      	bmi.n	8002478 <_vfiprintf_r+0x220>
 800246c:	89ab      	ldrh	r3, [r5, #12]
 800246e:	059a      	lsls	r2, r3, #22
 8002470:	d402      	bmi.n	8002478 <_vfiprintf_r+0x220>
 8002472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002474:	f7ff fe6b 	bl	800214e <__retarget_lock_release_recursive>
 8002478:	89ab      	ldrh	r3, [r5, #12]
 800247a:	065b      	lsls	r3, r3, #25
 800247c:	f53f af12 	bmi.w	80022a4 <_vfiprintf_r+0x4c>
 8002480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002482:	e711      	b.n	80022a8 <_vfiprintf_r+0x50>
 8002484:	ab03      	add	r3, sp, #12
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	462a      	mov	r2, r5
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <_vfiprintf_r+0x258>)
 800248c:	a904      	add	r1, sp, #16
 800248e:	4630      	mov	r0, r6
 8002490:	f000 f880 	bl	8002594 <_printf_i>
 8002494:	e7e4      	b.n	8002460 <_vfiprintf_r+0x208>
 8002496:	bf00      	nop
 8002498:	08002ec4 	.word	0x08002ec4
 800249c:	08002ee4 	.word	0x08002ee4
 80024a0:	08002ea4 	.word	0x08002ea4
 80024a4:	08002f04 	.word	0x08002f04
 80024a8:	08002f0e 	.word	0x08002f0e
 80024ac:	00000000 	.word	0x00000000
 80024b0:	08002233 	.word	0x08002233
 80024b4:	08002f0a 	.word	0x08002f0a

080024b8 <_printf_common>:
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	4616      	mov	r6, r2
 80024be:	4699      	mov	r9, r3
 80024c0:	688a      	ldr	r2, [r1, #8]
 80024c2:	690b      	ldr	r3, [r1, #16]
 80024c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bfb8      	it	lt
 80024cc:	4613      	movlt	r3, r2
 80024ce:	6033      	str	r3, [r6, #0]
 80024d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024d4:	4607      	mov	r7, r0
 80024d6:	460c      	mov	r4, r1
 80024d8:	b10a      	cbz	r2, 80024de <_printf_common+0x26>
 80024da:	3301      	adds	r3, #1
 80024dc:	6033      	str	r3, [r6, #0]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	0699      	lsls	r1, r3, #26
 80024e2:	bf42      	ittt	mi
 80024e4:	6833      	ldrmi	r3, [r6, #0]
 80024e6:	3302      	addmi	r3, #2
 80024e8:	6033      	strmi	r3, [r6, #0]
 80024ea:	6825      	ldr	r5, [r4, #0]
 80024ec:	f015 0506 	ands.w	r5, r5, #6
 80024f0:	d106      	bne.n	8002500 <_printf_common+0x48>
 80024f2:	f104 0a19 	add.w	sl, r4, #25
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	6832      	ldr	r2, [r6, #0]
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	42ab      	cmp	r3, r5
 80024fe:	dc26      	bgt.n	800254e <_printf_common+0x96>
 8002500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002504:	1e13      	subs	r3, r2, #0
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	bf18      	it	ne
 800250a:	2301      	movne	r3, #1
 800250c:	0692      	lsls	r2, r2, #26
 800250e:	d42b      	bmi.n	8002568 <_printf_common+0xb0>
 8002510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002514:	4649      	mov	r1, r9
 8002516:	4638      	mov	r0, r7
 8002518:	47c0      	blx	r8
 800251a:	3001      	adds	r0, #1
 800251c:	d01e      	beq.n	800255c <_printf_common+0xa4>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	68e5      	ldr	r5, [r4, #12]
 8002522:	6832      	ldr	r2, [r6, #0]
 8002524:	f003 0306 	and.w	r3, r3, #6
 8002528:	2b04      	cmp	r3, #4
 800252a:	bf08      	it	eq
 800252c:	1aad      	subeq	r5, r5, r2
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	6922      	ldr	r2, [r4, #16]
 8002532:	bf0c      	ite	eq
 8002534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002538:	2500      	movne	r5, #0
 800253a:	4293      	cmp	r3, r2
 800253c:	bfc4      	itt	gt
 800253e:	1a9b      	subgt	r3, r3, r2
 8002540:	18ed      	addgt	r5, r5, r3
 8002542:	2600      	movs	r6, #0
 8002544:	341a      	adds	r4, #26
 8002546:	42b5      	cmp	r5, r6
 8002548:	d11a      	bne.n	8002580 <_printf_common+0xc8>
 800254a:	2000      	movs	r0, #0
 800254c:	e008      	b.n	8002560 <_printf_common+0xa8>
 800254e:	2301      	movs	r3, #1
 8002550:	4652      	mov	r2, sl
 8002552:	4649      	mov	r1, r9
 8002554:	4638      	mov	r0, r7
 8002556:	47c0      	blx	r8
 8002558:	3001      	adds	r0, #1
 800255a:	d103      	bne.n	8002564 <_printf_common+0xac>
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002564:	3501      	adds	r5, #1
 8002566:	e7c6      	b.n	80024f6 <_printf_common+0x3e>
 8002568:	18e1      	adds	r1, r4, r3
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	2030      	movs	r0, #48	; 0x30
 800256e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002572:	4422      	add	r2, r4
 8002574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800257c:	3302      	adds	r3, #2
 800257e:	e7c7      	b.n	8002510 <_printf_common+0x58>
 8002580:	2301      	movs	r3, #1
 8002582:	4622      	mov	r2, r4
 8002584:	4649      	mov	r1, r9
 8002586:	4638      	mov	r0, r7
 8002588:	47c0      	blx	r8
 800258a:	3001      	adds	r0, #1
 800258c:	d0e6      	beq.n	800255c <_printf_common+0xa4>
 800258e:	3601      	adds	r6, #1
 8002590:	e7d9      	b.n	8002546 <_printf_common+0x8e>
	...

08002594 <_printf_i>:
 8002594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	460c      	mov	r4, r1
 800259a:	4691      	mov	r9, r2
 800259c:	7e27      	ldrb	r7, [r4, #24]
 800259e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025a0:	2f78      	cmp	r7, #120	; 0x78
 80025a2:	4680      	mov	r8, r0
 80025a4:	469a      	mov	sl, r3
 80025a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025aa:	d807      	bhi.n	80025bc <_printf_i+0x28>
 80025ac:	2f62      	cmp	r7, #98	; 0x62
 80025ae:	d80a      	bhi.n	80025c6 <_printf_i+0x32>
 80025b0:	2f00      	cmp	r7, #0
 80025b2:	f000 80d8 	beq.w	8002766 <_printf_i+0x1d2>
 80025b6:	2f58      	cmp	r7, #88	; 0x58
 80025b8:	f000 80a3 	beq.w	8002702 <_printf_i+0x16e>
 80025bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025c4:	e03a      	b.n	800263c <_printf_i+0xa8>
 80025c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ca:	2b15      	cmp	r3, #21
 80025cc:	d8f6      	bhi.n	80025bc <_printf_i+0x28>
 80025ce:	a001      	add	r0, pc, #4	; (adr r0, 80025d4 <_printf_i+0x40>)
 80025d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025d4:	0800262d 	.word	0x0800262d
 80025d8:	08002641 	.word	0x08002641
 80025dc:	080025bd 	.word	0x080025bd
 80025e0:	080025bd 	.word	0x080025bd
 80025e4:	080025bd 	.word	0x080025bd
 80025e8:	080025bd 	.word	0x080025bd
 80025ec:	08002641 	.word	0x08002641
 80025f0:	080025bd 	.word	0x080025bd
 80025f4:	080025bd 	.word	0x080025bd
 80025f8:	080025bd 	.word	0x080025bd
 80025fc:	080025bd 	.word	0x080025bd
 8002600:	0800274d 	.word	0x0800274d
 8002604:	08002671 	.word	0x08002671
 8002608:	0800272f 	.word	0x0800272f
 800260c:	080025bd 	.word	0x080025bd
 8002610:	080025bd 	.word	0x080025bd
 8002614:	0800276f 	.word	0x0800276f
 8002618:	080025bd 	.word	0x080025bd
 800261c:	08002671 	.word	0x08002671
 8002620:	080025bd 	.word	0x080025bd
 8002624:	080025bd 	.word	0x080025bd
 8002628:	08002737 	.word	0x08002737
 800262c:	680b      	ldr	r3, [r1, #0]
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	600a      	str	r2, [r1, #0]
 8002634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800263c:	2301      	movs	r3, #1
 800263e:	e0a3      	b.n	8002788 <_printf_i+0x1f4>
 8002640:	6825      	ldr	r5, [r4, #0]
 8002642:	6808      	ldr	r0, [r1, #0]
 8002644:	062e      	lsls	r6, r5, #24
 8002646:	f100 0304 	add.w	r3, r0, #4
 800264a:	d50a      	bpl.n	8002662 <_printf_i+0xce>
 800264c:	6805      	ldr	r5, [r0, #0]
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	2d00      	cmp	r5, #0
 8002652:	da03      	bge.n	800265c <_printf_i+0xc8>
 8002654:	232d      	movs	r3, #45	; 0x2d
 8002656:	426d      	negs	r5, r5
 8002658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800265c:	485e      	ldr	r0, [pc, #376]	; (80027d8 <_printf_i+0x244>)
 800265e:	230a      	movs	r3, #10
 8002660:	e019      	b.n	8002696 <_printf_i+0x102>
 8002662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002666:	6805      	ldr	r5, [r0, #0]
 8002668:	600b      	str	r3, [r1, #0]
 800266a:	bf18      	it	ne
 800266c:	b22d      	sxthne	r5, r5
 800266e:	e7ef      	b.n	8002650 <_printf_i+0xbc>
 8002670:	680b      	ldr	r3, [r1, #0]
 8002672:	6825      	ldr	r5, [r4, #0]
 8002674:	1d18      	adds	r0, r3, #4
 8002676:	6008      	str	r0, [r1, #0]
 8002678:	0628      	lsls	r0, r5, #24
 800267a:	d501      	bpl.n	8002680 <_printf_i+0xec>
 800267c:	681d      	ldr	r5, [r3, #0]
 800267e:	e002      	b.n	8002686 <_printf_i+0xf2>
 8002680:	0669      	lsls	r1, r5, #25
 8002682:	d5fb      	bpl.n	800267c <_printf_i+0xe8>
 8002684:	881d      	ldrh	r5, [r3, #0]
 8002686:	4854      	ldr	r0, [pc, #336]	; (80027d8 <_printf_i+0x244>)
 8002688:	2f6f      	cmp	r7, #111	; 0x6f
 800268a:	bf0c      	ite	eq
 800268c:	2308      	moveq	r3, #8
 800268e:	230a      	movne	r3, #10
 8002690:	2100      	movs	r1, #0
 8002692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002696:	6866      	ldr	r6, [r4, #4]
 8002698:	60a6      	str	r6, [r4, #8]
 800269a:	2e00      	cmp	r6, #0
 800269c:	bfa2      	ittt	ge
 800269e:	6821      	ldrge	r1, [r4, #0]
 80026a0:	f021 0104 	bicge.w	r1, r1, #4
 80026a4:	6021      	strge	r1, [r4, #0]
 80026a6:	b90d      	cbnz	r5, 80026ac <_printf_i+0x118>
 80026a8:	2e00      	cmp	r6, #0
 80026aa:	d04d      	beq.n	8002748 <_printf_i+0x1b4>
 80026ac:	4616      	mov	r6, r2
 80026ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80026b2:	fb03 5711 	mls	r7, r3, r1, r5
 80026b6:	5dc7      	ldrb	r7, [r0, r7]
 80026b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026bc:	462f      	mov	r7, r5
 80026be:	42bb      	cmp	r3, r7
 80026c0:	460d      	mov	r5, r1
 80026c2:	d9f4      	bls.n	80026ae <_printf_i+0x11a>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d10b      	bne.n	80026e0 <_printf_i+0x14c>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	07df      	lsls	r7, r3, #31
 80026cc:	d508      	bpl.n	80026e0 <_printf_i+0x14c>
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	6861      	ldr	r1, [r4, #4]
 80026d2:	4299      	cmp	r1, r3
 80026d4:	bfde      	ittt	le
 80026d6:	2330      	movle	r3, #48	; 0x30
 80026d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026e0:	1b92      	subs	r2, r2, r6
 80026e2:	6122      	str	r2, [r4, #16]
 80026e4:	f8cd a000 	str.w	sl, [sp]
 80026e8:	464b      	mov	r3, r9
 80026ea:	aa03      	add	r2, sp, #12
 80026ec:	4621      	mov	r1, r4
 80026ee:	4640      	mov	r0, r8
 80026f0:	f7ff fee2 	bl	80024b8 <_printf_common>
 80026f4:	3001      	adds	r0, #1
 80026f6:	d14c      	bne.n	8002792 <_printf_i+0x1fe>
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	b004      	add	sp, #16
 80026fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002702:	4835      	ldr	r0, [pc, #212]	; (80027d8 <_printf_i+0x244>)
 8002704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	680e      	ldr	r6, [r1, #0]
 800270c:	061f      	lsls	r7, r3, #24
 800270e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002712:	600e      	str	r6, [r1, #0]
 8002714:	d514      	bpl.n	8002740 <_printf_i+0x1ac>
 8002716:	07d9      	lsls	r1, r3, #31
 8002718:	bf44      	itt	mi
 800271a:	f043 0320 	orrmi.w	r3, r3, #32
 800271e:	6023      	strmi	r3, [r4, #0]
 8002720:	b91d      	cbnz	r5, 800272a <_printf_i+0x196>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	f023 0320 	bic.w	r3, r3, #32
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	2310      	movs	r3, #16
 800272c:	e7b0      	b.n	8002690 <_printf_i+0xfc>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	2378      	movs	r3, #120	; 0x78
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <_printf_i+0x248>)
 800273a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800273e:	e7e3      	b.n	8002708 <_printf_i+0x174>
 8002740:	065e      	lsls	r6, r3, #25
 8002742:	bf48      	it	mi
 8002744:	b2ad      	uxthmi	r5, r5
 8002746:	e7e6      	b.n	8002716 <_printf_i+0x182>
 8002748:	4616      	mov	r6, r2
 800274a:	e7bb      	b.n	80026c4 <_printf_i+0x130>
 800274c:	680b      	ldr	r3, [r1, #0]
 800274e:	6826      	ldr	r6, [r4, #0]
 8002750:	6960      	ldr	r0, [r4, #20]
 8002752:	1d1d      	adds	r5, r3, #4
 8002754:	600d      	str	r5, [r1, #0]
 8002756:	0635      	lsls	r5, r6, #24
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	d501      	bpl.n	8002760 <_printf_i+0x1cc>
 800275c:	6018      	str	r0, [r3, #0]
 800275e:	e002      	b.n	8002766 <_printf_i+0x1d2>
 8002760:	0671      	lsls	r1, r6, #25
 8002762:	d5fb      	bpl.n	800275c <_printf_i+0x1c8>
 8002764:	8018      	strh	r0, [r3, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	6123      	str	r3, [r4, #16]
 800276a:	4616      	mov	r6, r2
 800276c:	e7ba      	b.n	80026e4 <_printf_i+0x150>
 800276e:	680b      	ldr	r3, [r1, #0]
 8002770:	1d1a      	adds	r2, r3, #4
 8002772:	600a      	str	r2, [r1, #0]
 8002774:	681e      	ldr	r6, [r3, #0]
 8002776:	6862      	ldr	r2, [r4, #4]
 8002778:	2100      	movs	r1, #0
 800277a:	4630      	mov	r0, r6
 800277c:	f7fd fd60 	bl	8000240 <memchr>
 8002780:	b108      	cbz	r0, 8002786 <_printf_i+0x1f2>
 8002782:	1b80      	subs	r0, r0, r6
 8002784:	6060      	str	r0, [r4, #4]
 8002786:	6863      	ldr	r3, [r4, #4]
 8002788:	6123      	str	r3, [r4, #16]
 800278a:	2300      	movs	r3, #0
 800278c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002790:	e7a8      	b.n	80026e4 <_printf_i+0x150>
 8002792:	6923      	ldr	r3, [r4, #16]
 8002794:	4632      	mov	r2, r6
 8002796:	4649      	mov	r1, r9
 8002798:	4640      	mov	r0, r8
 800279a:	47d0      	blx	sl
 800279c:	3001      	adds	r0, #1
 800279e:	d0ab      	beq.n	80026f8 <_printf_i+0x164>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	079b      	lsls	r3, r3, #30
 80027a4:	d413      	bmi.n	80027ce <_printf_i+0x23a>
 80027a6:	68e0      	ldr	r0, [r4, #12]
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	4298      	cmp	r0, r3
 80027ac:	bfb8      	it	lt
 80027ae:	4618      	movlt	r0, r3
 80027b0:	e7a4      	b.n	80026fc <_printf_i+0x168>
 80027b2:	2301      	movs	r3, #1
 80027b4:	4632      	mov	r2, r6
 80027b6:	4649      	mov	r1, r9
 80027b8:	4640      	mov	r0, r8
 80027ba:	47d0      	blx	sl
 80027bc:	3001      	adds	r0, #1
 80027be:	d09b      	beq.n	80026f8 <_printf_i+0x164>
 80027c0:	3501      	adds	r5, #1
 80027c2:	68e3      	ldr	r3, [r4, #12]
 80027c4:	9903      	ldr	r1, [sp, #12]
 80027c6:	1a5b      	subs	r3, r3, r1
 80027c8:	42ab      	cmp	r3, r5
 80027ca:	dcf2      	bgt.n	80027b2 <_printf_i+0x21e>
 80027cc:	e7eb      	b.n	80027a6 <_printf_i+0x212>
 80027ce:	2500      	movs	r5, #0
 80027d0:	f104 0619 	add.w	r6, r4, #25
 80027d4:	e7f5      	b.n	80027c2 <_printf_i+0x22e>
 80027d6:	bf00      	nop
 80027d8:	08002f15 	.word	0x08002f15
 80027dc:	08002f26 	.word	0x08002f26

080027e0 <_sbrk_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4d06      	ldr	r5, [pc, #24]	; (80027fc <_sbrk_r+0x1c>)
 80027e4:	2300      	movs	r3, #0
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	602b      	str	r3, [r5, #0]
 80027ec:	f000 fb1e 	bl	8002e2c <_sbrk>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d102      	bne.n	80027fa <_sbrk_r+0x1a>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	b103      	cbz	r3, 80027fa <_sbrk_r+0x1a>
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	200000f8 	.word	0x200000f8

08002800 <__sread>:
 8002800:	b510      	push	{r4, lr}
 8002802:	460c      	mov	r4, r1
 8002804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002808:	f000 fab4 	bl	8002d74 <_read_r>
 800280c:	2800      	cmp	r0, #0
 800280e:	bfab      	itete	ge
 8002810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002812:	89a3      	ldrhlt	r3, [r4, #12]
 8002814:	181b      	addge	r3, r3, r0
 8002816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800281a:	bfac      	ite	ge
 800281c:	6563      	strge	r3, [r4, #84]	; 0x54
 800281e:	81a3      	strhlt	r3, [r4, #12]
 8002820:	bd10      	pop	{r4, pc}

08002822 <__swrite>:
 8002822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	461f      	mov	r7, r3
 8002828:	898b      	ldrh	r3, [r1, #12]
 800282a:	05db      	lsls	r3, r3, #23
 800282c:	4605      	mov	r5, r0
 800282e:	460c      	mov	r4, r1
 8002830:	4616      	mov	r6, r2
 8002832:	d505      	bpl.n	8002840 <__swrite+0x1e>
 8002834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002838:	2302      	movs	r3, #2
 800283a:	2200      	movs	r2, #0
 800283c:	f000 f9c8 	bl	8002bd0 <_lseek_r>
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284a:	81a3      	strh	r3, [r4, #12]
 800284c:	4632      	mov	r2, r6
 800284e:	463b      	mov	r3, r7
 8002850:	4628      	mov	r0, r5
 8002852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002856:	f000 b869 	b.w	800292c <_write_r>

0800285a <__sseek>:
 800285a:	b510      	push	{r4, lr}
 800285c:	460c      	mov	r4, r1
 800285e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002862:	f000 f9b5 	bl	8002bd0 <_lseek_r>
 8002866:	1c43      	adds	r3, r0, #1
 8002868:	89a3      	ldrh	r3, [r4, #12]
 800286a:	bf15      	itete	ne
 800286c:	6560      	strne	r0, [r4, #84]	; 0x54
 800286e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002876:	81a3      	strheq	r3, [r4, #12]
 8002878:	bf18      	it	ne
 800287a:	81a3      	strhne	r3, [r4, #12]
 800287c:	bd10      	pop	{r4, pc}

0800287e <__sclose>:
 800287e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002882:	f000 b8d3 	b.w	8002a2c <_close_r>
	...

08002888 <__swbuf_r>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	460e      	mov	r6, r1
 800288c:	4614      	mov	r4, r2
 800288e:	4605      	mov	r5, r0
 8002890:	b118      	cbz	r0, 800289a <__swbuf_r+0x12>
 8002892:	6983      	ldr	r3, [r0, #24]
 8002894:	b90b      	cbnz	r3, 800289a <__swbuf_r+0x12>
 8002896:	f7ff fbbb 	bl	8002010 <__sinit>
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <__swbuf_r+0x98>)
 800289c:	429c      	cmp	r4, r3
 800289e:	d12b      	bne.n	80028f8 <__swbuf_r+0x70>
 80028a0:	686c      	ldr	r4, [r5, #4]
 80028a2:	69a3      	ldr	r3, [r4, #24]
 80028a4:	60a3      	str	r3, [r4, #8]
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	071a      	lsls	r2, r3, #28
 80028aa:	d52f      	bpl.n	800290c <__swbuf_r+0x84>
 80028ac:	6923      	ldr	r3, [r4, #16]
 80028ae:	b36b      	cbz	r3, 800290c <__swbuf_r+0x84>
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	1ac0      	subs	r0, r0, r3
 80028b6:	6963      	ldr	r3, [r4, #20]
 80028b8:	b2f6      	uxtb	r6, r6
 80028ba:	4283      	cmp	r3, r0
 80028bc:	4637      	mov	r7, r6
 80028be:	dc04      	bgt.n	80028ca <__swbuf_r+0x42>
 80028c0:	4621      	mov	r1, r4
 80028c2:	4628      	mov	r0, r5
 80028c4:	f000 f948 	bl	8002b58 <_fflush_r>
 80028c8:	bb30      	cbnz	r0, 8002918 <__swbuf_r+0x90>
 80028ca:	68a3      	ldr	r3, [r4, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60a3      	str	r3, [r4, #8]
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	6022      	str	r2, [r4, #0]
 80028d6:	701e      	strb	r6, [r3, #0]
 80028d8:	6963      	ldr	r3, [r4, #20]
 80028da:	3001      	adds	r0, #1
 80028dc:	4283      	cmp	r3, r0
 80028de:	d004      	beq.n	80028ea <__swbuf_r+0x62>
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	07db      	lsls	r3, r3, #31
 80028e4:	d506      	bpl.n	80028f4 <__swbuf_r+0x6c>
 80028e6:	2e0a      	cmp	r6, #10
 80028e8:	d104      	bne.n	80028f4 <__swbuf_r+0x6c>
 80028ea:	4621      	mov	r1, r4
 80028ec:	4628      	mov	r0, r5
 80028ee:	f000 f933 	bl	8002b58 <_fflush_r>
 80028f2:	b988      	cbnz	r0, 8002918 <__swbuf_r+0x90>
 80028f4:	4638      	mov	r0, r7
 80028f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <__swbuf_r+0x9c>)
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d101      	bne.n	8002902 <__swbuf_r+0x7a>
 80028fe:	68ac      	ldr	r4, [r5, #8]
 8002900:	e7cf      	b.n	80028a2 <__swbuf_r+0x1a>
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <__swbuf_r+0xa0>)
 8002904:	429c      	cmp	r4, r3
 8002906:	bf08      	it	eq
 8002908:	68ec      	ldreq	r4, [r5, #12]
 800290a:	e7ca      	b.n	80028a2 <__swbuf_r+0x1a>
 800290c:	4621      	mov	r1, r4
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f81e 	bl	8002950 <__swsetup_r>
 8002914:	2800      	cmp	r0, #0
 8002916:	d0cb      	beq.n	80028b0 <__swbuf_r+0x28>
 8002918:	f04f 37ff 	mov.w	r7, #4294967295
 800291c:	e7ea      	b.n	80028f4 <__swbuf_r+0x6c>
 800291e:	bf00      	nop
 8002920:	08002ec4 	.word	0x08002ec4
 8002924:	08002ee4 	.word	0x08002ee4
 8002928:	08002ea4 	.word	0x08002ea4

0800292c <_write_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4d07      	ldr	r5, [pc, #28]	; (800294c <_write_r+0x20>)
 8002930:	4604      	mov	r4, r0
 8002932:	4608      	mov	r0, r1
 8002934:	4611      	mov	r1, r2
 8002936:	2200      	movs	r2, #0
 8002938:	602a      	str	r2, [r5, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	f7fd fe8c 	bl	8000658 <_write>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_write_r+0x1e>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_write_r+0x1e>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	200000f8 	.word	0x200000f8

08002950 <__swsetup_r>:
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <__swsetup_r+0xcc>)
 8002952:	b570      	push	{r4, r5, r6, lr}
 8002954:	681d      	ldr	r5, [r3, #0]
 8002956:	4606      	mov	r6, r0
 8002958:	460c      	mov	r4, r1
 800295a:	b125      	cbz	r5, 8002966 <__swsetup_r+0x16>
 800295c:	69ab      	ldr	r3, [r5, #24]
 800295e:	b913      	cbnz	r3, 8002966 <__swsetup_r+0x16>
 8002960:	4628      	mov	r0, r5
 8002962:	f7ff fb55 	bl	8002010 <__sinit>
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <__swsetup_r+0xd0>)
 8002968:	429c      	cmp	r4, r3
 800296a:	d10f      	bne.n	800298c <__swsetup_r+0x3c>
 800296c:	686c      	ldr	r4, [r5, #4]
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002974:	0719      	lsls	r1, r3, #28
 8002976:	d42c      	bmi.n	80029d2 <__swsetup_r+0x82>
 8002978:	06dd      	lsls	r5, r3, #27
 800297a:	d411      	bmi.n	80029a0 <__swsetup_r+0x50>
 800297c:	2309      	movs	r3, #9
 800297e:	6033      	str	r3, [r6, #0]
 8002980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002984:	81a3      	strh	r3, [r4, #12]
 8002986:	f04f 30ff 	mov.w	r0, #4294967295
 800298a:	e03e      	b.n	8002a0a <__swsetup_r+0xba>
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <__swsetup_r+0xd4>)
 800298e:	429c      	cmp	r4, r3
 8002990:	d101      	bne.n	8002996 <__swsetup_r+0x46>
 8002992:	68ac      	ldr	r4, [r5, #8]
 8002994:	e7eb      	b.n	800296e <__swsetup_r+0x1e>
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <__swsetup_r+0xd8>)
 8002998:	429c      	cmp	r4, r3
 800299a:	bf08      	it	eq
 800299c:	68ec      	ldreq	r4, [r5, #12]
 800299e:	e7e6      	b.n	800296e <__swsetup_r+0x1e>
 80029a0:	0758      	lsls	r0, r3, #29
 80029a2:	d512      	bpl.n	80029ca <__swsetup_r+0x7a>
 80029a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a6:	b141      	cbz	r1, 80029ba <__swsetup_r+0x6a>
 80029a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ac:	4299      	cmp	r1, r3
 80029ae:	d002      	beq.n	80029b6 <__swsetup_r+0x66>
 80029b0:	4630      	mov	r0, r6
 80029b2:	f000 f98f 	bl	8002cd4 <_free_r>
 80029b6:	2300      	movs	r3, #0
 80029b8:	6363      	str	r3, [r4, #52]	; 0x34
 80029ba:	89a3      	ldrh	r3, [r4, #12]
 80029bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029c0:	81a3      	strh	r3, [r4, #12]
 80029c2:	2300      	movs	r3, #0
 80029c4:	6063      	str	r3, [r4, #4]
 80029c6:	6923      	ldr	r3, [r4, #16]
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	81a3      	strh	r3, [r4, #12]
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	b94b      	cbnz	r3, 80029ea <__swsetup_r+0x9a>
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e0:	d003      	beq.n	80029ea <__swsetup_r+0x9a>
 80029e2:	4621      	mov	r1, r4
 80029e4:	4630      	mov	r0, r6
 80029e6:	f000 f929 	bl	8002c3c <__smakebuf_r>
 80029ea:	89a0      	ldrh	r0, [r4, #12]
 80029ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029f0:	f010 0301 	ands.w	r3, r0, #1
 80029f4:	d00a      	beq.n	8002a0c <__swsetup_r+0xbc>
 80029f6:	2300      	movs	r3, #0
 80029f8:	60a3      	str	r3, [r4, #8]
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	425b      	negs	r3, r3
 80029fe:	61a3      	str	r3, [r4, #24]
 8002a00:	6923      	ldr	r3, [r4, #16]
 8002a02:	b943      	cbnz	r3, 8002a16 <__swsetup_r+0xc6>
 8002a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a08:	d1ba      	bne.n	8002980 <__swsetup_r+0x30>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	0781      	lsls	r1, r0, #30
 8002a0e:	bf58      	it	pl
 8002a10:	6963      	ldrpl	r3, [r4, #20]
 8002a12:	60a3      	str	r3, [r4, #8]
 8002a14:	e7f4      	b.n	8002a00 <__swsetup_r+0xb0>
 8002a16:	2000      	movs	r0, #0
 8002a18:	e7f7      	b.n	8002a0a <__swsetup_r+0xba>
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	08002ec4 	.word	0x08002ec4
 8002a24:	08002ee4 	.word	0x08002ee4
 8002a28:	08002ea4 	.word	0x08002ea4

08002a2c <_close_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d06      	ldr	r5, [pc, #24]	; (8002a48 <_close_r+0x1c>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	f000 f9d0 	bl	8002ddc <_close>
 8002a3c:	1c43      	adds	r3, r0, #1
 8002a3e:	d102      	bne.n	8002a46 <_close_r+0x1a>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	b103      	cbz	r3, 8002a46 <_close_r+0x1a>
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	200000f8 	.word	0x200000f8

08002a4c <__sflush_r>:
 8002a4c:	898a      	ldrh	r2, [r1, #12]
 8002a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a52:	4605      	mov	r5, r0
 8002a54:	0710      	lsls	r0, r2, #28
 8002a56:	460c      	mov	r4, r1
 8002a58:	d458      	bmi.n	8002b0c <__sflush_r+0xc0>
 8002a5a:	684b      	ldr	r3, [r1, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dc05      	bgt.n	8002a6c <__sflush_r+0x20>
 8002a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	dc02      	bgt.n	8002a6c <__sflush_r+0x20>
 8002a66:	2000      	movs	r0, #0
 8002a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a6e:	2e00      	cmp	r6, #0
 8002a70:	d0f9      	beq.n	8002a66 <__sflush_r+0x1a>
 8002a72:	2300      	movs	r3, #0
 8002a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a78:	682f      	ldr	r7, [r5, #0]
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	d032      	beq.n	8002ae4 <__sflush_r+0x98>
 8002a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a80:	89a3      	ldrh	r3, [r4, #12]
 8002a82:	075a      	lsls	r2, r3, #29
 8002a84:	d505      	bpl.n	8002a92 <__sflush_r+0x46>
 8002a86:	6863      	ldr	r3, [r4, #4]
 8002a88:	1ac0      	subs	r0, r0, r3
 8002a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a8c:	b10b      	cbz	r3, 8002a92 <__sflush_r+0x46>
 8002a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a90:	1ac0      	subs	r0, r0, r3
 8002a92:	2300      	movs	r3, #0
 8002a94:	4602      	mov	r2, r0
 8002a96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a98:	6a21      	ldr	r1, [r4, #32]
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	47b0      	blx	r6
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	d106      	bne.n	8002ab2 <__sflush_r+0x66>
 8002aa4:	6829      	ldr	r1, [r5, #0]
 8002aa6:	291d      	cmp	r1, #29
 8002aa8:	d82c      	bhi.n	8002b04 <__sflush_r+0xb8>
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <__sflush_r+0x108>)
 8002aac:	40ca      	lsrs	r2, r1
 8002aae:	07d6      	lsls	r6, r2, #31
 8002ab0:	d528      	bpl.n	8002b04 <__sflush_r+0xb8>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	6062      	str	r2, [r4, #4]
 8002ab6:	04d9      	lsls	r1, r3, #19
 8002ab8:	6922      	ldr	r2, [r4, #16]
 8002aba:	6022      	str	r2, [r4, #0]
 8002abc:	d504      	bpl.n	8002ac8 <__sflush_r+0x7c>
 8002abe:	1c42      	adds	r2, r0, #1
 8002ac0:	d101      	bne.n	8002ac6 <__sflush_r+0x7a>
 8002ac2:	682b      	ldr	r3, [r5, #0]
 8002ac4:	b903      	cbnz	r3, 8002ac8 <__sflush_r+0x7c>
 8002ac6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aca:	602f      	str	r7, [r5, #0]
 8002acc:	2900      	cmp	r1, #0
 8002ace:	d0ca      	beq.n	8002a66 <__sflush_r+0x1a>
 8002ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d002      	beq.n	8002ade <__sflush_r+0x92>
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f000 f8fb 	bl	8002cd4 <_free_r>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	6360      	str	r0, [r4, #52]	; 0x34
 8002ae2:	e7c1      	b.n	8002a68 <__sflush_r+0x1c>
 8002ae4:	6a21      	ldr	r1, [r4, #32]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4628      	mov	r0, r5
 8002aea:	47b0      	blx	r6
 8002aec:	1c41      	adds	r1, r0, #1
 8002aee:	d1c7      	bne.n	8002a80 <__sflush_r+0x34>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0c4      	beq.n	8002a80 <__sflush_r+0x34>
 8002af6:	2b1d      	cmp	r3, #29
 8002af8:	d001      	beq.n	8002afe <__sflush_r+0xb2>
 8002afa:	2b16      	cmp	r3, #22
 8002afc:	d101      	bne.n	8002b02 <__sflush_r+0xb6>
 8002afe:	602f      	str	r7, [r5, #0]
 8002b00:	e7b1      	b.n	8002a66 <__sflush_r+0x1a>
 8002b02:	89a3      	ldrh	r3, [r4, #12]
 8002b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b08:	81a3      	strh	r3, [r4, #12]
 8002b0a:	e7ad      	b.n	8002a68 <__sflush_r+0x1c>
 8002b0c:	690f      	ldr	r7, [r1, #16]
 8002b0e:	2f00      	cmp	r7, #0
 8002b10:	d0a9      	beq.n	8002a66 <__sflush_r+0x1a>
 8002b12:	0793      	lsls	r3, r2, #30
 8002b14:	680e      	ldr	r6, [r1, #0]
 8002b16:	bf08      	it	eq
 8002b18:	694b      	ldreq	r3, [r1, #20]
 8002b1a:	600f      	str	r7, [r1, #0]
 8002b1c:	bf18      	it	ne
 8002b1e:	2300      	movne	r3, #0
 8002b20:	eba6 0807 	sub.w	r8, r6, r7
 8002b24:	608b      	str	r3, [r1, #8]
 8002b26:	f1b8 0f00 	cmp.w	r8, #0
 8002b2a:	dd9c      	ble.n	8002a66 <__sflush_r+0x1a>
 8002b2c:	6a21      	ldr	r1, [r4, #32]
 8002b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b30:	4643      	mov	r3, r8
 8002b32:	463a      	mov	r2, r7
 8002b34:	4628      	mov	r0, r5
 8002b36:	47b0      	blx	r6
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	dc06      	bgt.n	8002b4a <__sflush_r+0xfe>
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b42:	81a3      	strh	r3, [r4, #12]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	e78e      	b.n	8002a68 <__sflush_r+0x1c>
 8002b4a:	4407      	add	r7, r0
 8002b4c:	eba8 0800 	sub.w	r8, r8, r0
 8002b50:	e7e9      	b.n	8002b26 <__sflush_r+0xda>
 8002b52:	bf00      	nop
 8002b54:	20400001 	.word	0x20400001

08002b58 <_fflush_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	690b      	ldr	r3, [r1, #16]
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	b913      	cbnz	r3, 8002b68 <_fflush_r+0x10>
 8002b62:	2500      	movs	r5, #0
 8002b64:	4628      	mov	r0, r5
 8002b66:	bd38      	pop	{r3, r4, r5, pc}
 8002b68:	b118      	cbz	r0, 8002b72 <_fflush_r+0x1a>
 8002b6a:	6983      	ldr	r3, [r0, #24]
 8002b6c:	b90b      	cbnz	r3, 8002b72 <_fflush_r+0x1a>
 8002b6e:	f7ff fa4f 	bl	8002010 <__sinit>
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <_fflush_r+0x6c>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	d11b      	bne.n	8002bb0 <_fflush_r+0x58>
 8002b78:	686c      	ldr	r4, [r5, #4]
 8002b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ef      	beq.n	8002b62 <_fflush_r+0xa>
 8002b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b84:	07d0      	lsls	r0, r2, #31
 8002b86:	d404      	bmi.n	8002b92 <_fflush_r+0x3a>
 8002b88:	0599      	lsls	r1, r3, #22
 8002b8a:	d402      	bmi.n	8002b92 <_fflush_r+0x3a>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b8e:	f7ff fadd 	bl	800214c <__retarget_lock_acquire_recursive>
 8002b92:	4628      	mov	r0, r5
 8002b94:	4621      	mov	r1, r4
 8002b96:	f7ff ff59 	bl	8002a4c <__sflush_r>
 8002b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b9c:	07da      	lsls	r2, r3, #31
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	d4e0      	bmi.n	8002b64 <_fflush_r+0xc>
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	059b      	lsls	r3, r3, #22
 8002ba6:	d4dd      	bmi.n	8002b64 <_fflush_r+0xc>
 8002ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002baa:	f7ff fad0 	bl	800214e <__retarget_lock_release_recursive>
 8002bae:	e7d9      	b.n	8002b64 <_fflush_r+0xc>
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <_fflush_r+0x70>)
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d101      	bne.n	8002bba <_fflush_r+0x62>
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	e7df      	b.n	8002b7a <_fflush_r+0x22>
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <_fflush_r+0x74>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	bf08      	it	eq
 8002bc0:	68ec      	ldreq	r4, [r5, #12]
 8002bc2:	e7da      	b.n	8002b7a <_fflush_r+0x22>
 8002bc4:	08002ec4 	.word	0x08002ec4
 8002bc8:	08002ee4 	.word	0x08002ee4
 8002bcc:	08002ea4 	.word	0x08002ea4

08002bd0 <_lseek_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4d07      	ldr	r5, [pc, #28]	; (8002bf0 <_lseek_r+0x20>)
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	4608      	mov	r0, r1
 8002bd8:	4611      	mov	r1, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	602a      	str	r2, [r5, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f914 	bl	8002e0c <_lseek>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d102      	bne.n	8002bee <_lseek_r+0x1e>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	b103      	cbz	r3, 8002bee <_lseek_r+0x1e>
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	200000f8 	.word	0x200000f8

08002bf4 <__swhatbuf_r>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	460e      	mov	r6, r1
 8002bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	b096      	sub	sp, #88	; 0x58
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	da07      	bge.n	8002c16 <__swhatbuf_r+0x22>
 8002c06:	2300      	movs	r3, #0
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	89b3      	ldrh	r3, [r6, #12]
 8002c0c:	061a      	lsls	r2, r3, #24
 8002c0e:	d410      	bmi.n	8002c32 <__swhatbuf_r+0x3e>
 8002c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c14:	e00e      	b.n	8002c34 <__swhatbuf_r+0x40>
 8002c16:	466a      	mov	r2, sp
 8002c18:	f000 f8be 	bl	8002d98 <_fstat_r>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	dbf2      	blt.n	8002c06 <__swhatbuf_r+0x12>
 8002c20:	9a01      	ldr	r2, [sp, #4]
 8002c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	415a      	adcs	r2, r3
 8002c2e:	602a      	str	r2, [r5, #0]
 8002c30:	e7ee      	b.n	8002c10 <__swhatbuf_r+0x1c>
 8002c32:	2340      	movs	r3, #64	; 0x40
 8002c34:	2000      	movs	r0, #0
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	b016      	add	sp, #88	; 0x58
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}

08002c3c <__smakebuf_r>:
 8002c3c:	898b      	ldrh	r3, [r1, #12]
 8002c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c40:	079d      	lsls	r5, r3, #30
 8002c42:	4606      	mov	r6, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	d507      	bpl.n	8002c58 <__smakebuf_r+0x1c>
 8002c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	6123      	str	r3, [r4, #16]
 8002c50:	2301      	movs	r3, #1
 8002c52:	6163      	str	r3, [r4, #20]
 8002c54:	b002      	add	sp, #8
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	ab01      	add	r3, sp, #4
 8002c5a:	466a      	mov	r2, sp
 8002c5c:	f7ff ffca 	bl	8002bf4 <__swhatbuf_r>
 8002c60:	9900      	ldr	r1, [sp, #0]
 8002c62:	4605      	mov	r5, r0
 8002c64:	4630      	mov	r0, r6
 8002c66:	f7ff fa73 	bl	8002150 <_malloc_r>
 8002c6a:	b948      	cbnz	r0, 8002c80 <__smakebuf_r+0x44>
 8002c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c70:	059a      	lsls	r2, r3, #22
 8002c72:	d4ef      	bmi.n	8002c54 <__smakebuf_r+0x18>
 8002c74:	f023 0303 	bic.w	r3, r3, #3
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	e7e3      	b.n	8002c48 <__smakebuf_r+0xc>
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <__smakebuf_r+0x7c>)
 8002c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	6020      	str	r0, [r4, #0]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	9b00      	ldr	r3, [sp, #0]
 8002c90:	6163      	str	r3, [r4, #20]
 8002c92:	9b01      	ldr	r3, [sp, #4]
 8002c94:	6120      	str	r0, [r4, #16]
 8002c96:	b15b      	cbz	r3, 8002cb0 <__smakebuf_r+0x74>
 8002c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f000 f88d 	bl	8002dbc <_isatty_r>
 8002ca2:	b128      	cbz	r0, 8002cb0 <__smakebuf_r+0x74>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	89a0      	ldrh	r0, [r4, #12]
 8002cb2:	4305      	orrs	r5, r0
 8002cb4:	81a5      	strh	r5, [r4, #12]
 8002cb6:	e7cd      	b.n	8002c54 <__smakebuf_r+0x18>
 8002cb8:	08001fa9 	.word	0x08001fa9

08002cbc <__malloc_lock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_lock+0x8>)
 8002cbe:	f7ff ba45 	b.w	800214c <__retarget_lock_acquire_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	200000f0 	.word	0x200000f0

08002cc8 <__malloc_unlock>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	; (8002cd0 <__malloc_unlock+0x8>)
 8002cca:	f7ff ba40 	b.w	800214e <__retarget_lock_release_recursive>
 8002cce:	bf00      	nop
 8002cd0:	200000f0 	.word	0x200000f0

08002cd4 <_free_r>:
 8002cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	d048      	beq.n	8002d6c <_free_r+0x98>
 8002cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cde:	9001      	str	r0, [sp, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8002ce6:	bfb8      	it	lt
 8002ce8:	18e4      	addlt	r4, r4, r3
 8002cea:	f7ff ffe7 	bl	8002cbc <__malloc_lock>
 8002cee:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <_free_r+0x9c>)
 8002cf0:	9801      	ldr	r0, [sp, #4]
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	4615      	mov	r5, r2
 8002cf6:	b933      	cbnz	r3, 8002d06 <_free_r+0x32>
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	6014      	str	r4, [r2, #0]
 8002cfc:	b003      	add	sp, #12
 8002cfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d02:	f7ff bfe1 	b.w	8002cc8 <__malloc_unlock>
 8002d06:	42a3      	cmp	r3, r4
 8002d08:	d90b      	bls.n	8002d22 <_free_r+0x4e>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	1862      	adds	r2, r4, r1
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	bf04      	itt	eq
 8002d12:	681a      	ldreq	r2, [r3, #0]
 8002d14:	685b      	ldreq	r3, [r3, #4]
 8002d16:	6063      	str	r3, [r4, #4]
 8002d18:	bf04      	itt	eq
 8002d1a:	1852      	addeq	r2, r2, r1
 8002d1c:	6022      	streq	r2, [r4, #0]
 8002d1e:	602c      	str	r4, [r5, #0]
 8002d20:	e7ec      	b.n	8002cfc <_free_r+0x28>
 8002d22:	461a      	mov	r2, r3
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	b10b      	cbz	r3, 8002d2c <_free_r+0x58>
 8002d28:	42a3      	cmp	r3, r4
 8002d2a:	d9fa      	bls.n	8002d22 <_free_r+0x4e>
 8002d2c:	6811      	ldr	r1, [r2, #0]
 8002d2e:	1855      	adds	r5, r2, r1
 8002d30:	42a5      	cmp	r5, r4
 8002d32:	d10b      	bne.n	8002d4c <_free_r+0x78>
 8002d34:	6824      	ldr	r4, [r4, #0]
 8002d36:	4421      	add	r1, r4
 8002d38:	1854      	adds	r4, r2, r1
 8002d3a:	42a3      	cmp	r3, r4
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	d1dd      	bne.n	8002cfc <_free_r+0x28>
 8002d40:	681c      	ldr	r4, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	6053      	str	r3, [r2, #4]
 8002d46:	4421      	add	r1, r4
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	e7d7      	b.n	8002cfc <_free_r+0x28>
 8002d4c:	d902      	bls.n	8002d54 <_free_r+0x80>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	6003      	str	r3, [r0, #0]
 8002d52:	e7d3      	b.n	8002cfc <_free_r+0x28>
 8002d54:	6825      	ldr	r5, [r4, #0]
 8002d56:	1961      	adds	r1, r4, r5
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	bf04      	itt	eq
 8002d5c:	6819      	ldreq	r1, [r3, #0]
 8002d5e:	685b      	ldreq	r3, [r3, #4]
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	bf04      	itt	eq
 8002d64:	1949      	addeq	r1, r1, r5
 8002d66:	6021      	streq	r1, [r4, #0]
 8002d68:	6054      	str	r4, [r2, #4]
 8002d6a:	e7c7      	b.n	8002cfc <_free_r+0x28>
 8002d6c:	b003      	add	sp, #12
 8002d6e:	bd30      	pop	{r4, r5, pc}
 8002d70:	2000008c 	.word	0x2000008c

08002d74 <_read_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4d07      	ldr	r5, [pc, #28]	; (8002d94 <_read_r+0x20>)
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4608      	mov	r0, r1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	2200      	movs	r2, #0
 8002d80:	602a      	str	r2, [r5, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f84a 	bl	8002e1c <_read>
 8002d88:	1c43      	adds	r3, r0, #1
 8002d8a:	d102      	bne.n	8002d92 <_read_r+0x1e>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	b103      	cbz	r3, 8002d92 <_read_r+0x1e>
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
 8002d94:	200000f8 	.word	0x200000f8

08002d98 <_fstat_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4d07      	ldr	r5, [pc, #28]	; (8002db8 <_fstat_r+0x20>)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	f000 f821 	bl	8002dec <_fstat>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d102      	bne.n	8002db4 <_fstat_r+0x1c>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	b103      	cbz	r3, 8002db4 <_fstat_r+0x1c>
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	bf00      	nop
 8002db8:	200000f8 	.word	0x200000f8

08002dbc <_isatty_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4d06      	ldr	r5, [pc, #24]	; (8002dd8 <_isatty_r+0x1c>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f000 f818 	bl	8002dfc <_isatty>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d102      	bne.n	8002dd6 <_isatty_r+0x1a>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	b103      	cbz	r3, 8002dd6 <_isatty_r+0x1a>
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	200000f8 	.word	0x200000f8

08002ddc <_close>:
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <_close+0xc>)
 8002dde:	2258      	movs	r2, #88	; 0x58
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	4770      	bx	lr
 8002de8:	200000f8 	.word	0x200000f8

08002dec <_fstat>:
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <_fstat+0xc>)
 8002dee:	2258      	movs	r2, #88	; 0x58
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295
 8002df6:	4770      	bx	lr
 8002df8:	200000f8 	.word	0x200000f8

08002dfc <_isatty>:
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <_isatty+0xc>)
 8002dfe:	2258      	movs	r2, #88	; 0x58
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	200000f8 	.word	0x200000f8

08002e0c <_lseek>:
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <_lseek+0xc>)
 8002e0e:	2258      	movs	r2, #88	; 0x58
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f04f 30ff 	mov.w	r0, #4294967295
 8002e16:	4770      	bx	lr
 8002e18:	200000f8 	.word	0x200000f8

08002e1c <_read>:
 8002e1c:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <_read+0xc>)
 8002e1e:	2258      	movs	r2, #88	; 0x58
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f04f 30ff 	mov.w	r0, #4294967295
 8002e26:	4770      	bx	lr
 8002e28:	200000f8 	.word	0x200000f8

08002e2c <_sbrk>:
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <_sbrk+0x14>)
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	4602      	mov	r2, r0
 8002e32:	b909      	cbnz	r1, 8002e38 <_sbrk+0xc>
 8002e34:	4903      	ldr	r1, [pc, #12]	; (8002e44 <_sbrk+0x18>)
 8002e36:	6019      	str	r1, [r3, #0]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	4402      	add	r2, r0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	4770      	bx	lr
 8002e40:	20000094 	.word	0x20000094
 8002e44:	20000100 	.word	0x20000100

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
