
02_timer_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003560  08003560  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003568  08003568  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080035e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080035e0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001195b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  000319f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029518  00000000  00000000  00035348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001069a  00000000  00000000  0005e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9b5  00000000  00000000  0006eefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e8af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a0  00000000  00000000  0016e904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  001721a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00172228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003470 	.word	0x08003470

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003470 	.word	0x08003470

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <display_board_information>:

#ifndef INC_UTILS_H_
#define INC_UTILS_H_

void display_board_information()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if (VERBOSE)
	{
		printf("Board Id:\t\t\t%d\r\n", (int)HAL_GetDEVID());
 80005dc:	f000 fa1a 	bl	8000a14 <HAL_GetDEVID>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <display_board_information+0x24>)
 80005e6:	f001 ffb7 	bl	8002558 <iprintf>
		printf("Board Freq:\t\t\t%d\r\n", (int)HAL_RCC_GetHCLKFreq());
 80005ea:	f001 f95b 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <display_board_information+0x28>)
 80005f4:	f001 ffb0 	bl	8002558 <iprintf>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08003488 	.word	0x08003488
 8000600:	0800349c 	.word	0x0800349c

08000604 <main>:
#include "utils.h"


uint32_t counter = 0;
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_Init(); // Initializing HAL.
 8000608:	f000 f990 	bl	800092c <HAL_Init>

	rcc_clock_config_HSE();
 800060c:	f000 f8b6 	bl	800077c <rcc_clock_config_HSE>

	gpio_LED_Blue_init();
 8000610:	f000 f890 	bl	8000734 <gpio_LED_Blue_init>


	uart_UART3_GPIO_config();
 8000614:	f000 f91e 	bl	8000854 <uart_UART3_GPIO_config>
	uart_UART3_config();
 8000618:	f000 f952 	bl	80008c0 <uart_UART3_config>

	timer_Init();
 800061c:	f000 f8fa 	bl	8000814 <timer_Init>



	display_board_information();
 8000620:	f7ff ffda 	bl	80005d8 <display_board_information>
	timer_start();
 8000624:	f000 f90c 	bl	8000840 <timer_start>
    while (1){
 8000628:	e7fe      	b.n	8000628 <main+0x24>
	...

0800062c <HAL_TIM_PeriodElapsedCallback>:
    }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	counter++;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2000008c 	.word	0x2000008c

08000650 <__io_putchar>:
#include "nucleo_stm32f767xx_uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	 uint8_t c[1];
	 c[0] = ch & 0x00FF;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	 HAL_USART_Transmit(&husart3, &c[0], 1, 100);
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <__io_putchar+0x28>)
 8000668:	f001 fc7a 	bl	8001f60 <HAL_USART_Transmit>
	 return ch;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000e8 	.word	0x200000e8

0800067c <_write>:

int _write(int file,char *ptr, int len) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e009      	b.n	80006a2 <_write+0x26>
  __io_putchar(*ptr++);
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	60ba      	str	r2, [r7, #8]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffda 	bl	8000650 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3301      	adds	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dbf1      	blt.n	800068e <_write+0x12>
 }
 return len;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_TIM_Base_MspInit>:
// msp.c
// this does the low level inits for timer 6


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_TIM_Base_MspInit+0x38>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_TIM_Base_MspInit+0x38>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_TIM_Base_MspInit+0x38>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	f000 faa2 	bl	8000c1e <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80006da:	2200      	movs	r2, #0
 80006dc:	210f      	movs	r1, #15
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fa81 	bl	8000be6 <HAL_NVIC_SetPriority>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800

080006f0 <SysTick_Handler>:
#include "stm32f7xx_it.h"

extern TIM_HandleTypeDef htimer6;

void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80006f4:	f000 f96e 	bl	80009d4 <HAL_IncTick>

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <TIM6_DAC_IRQHandler+0x10>)
 8000702:	f001 f9d3 	bl	8001aac <HAL_TIM_IRQHandler>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000009c 	.word	0x2000009c

08000710 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <SystemInit+0x20>)
 8000716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <SystemInit+0x20>)
 800071c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <gpio_LED_Blue_init>:

/*************************************************************************************************************************************************************************/


void gpio_LED_Blue_init()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <gpio_LED_Blue_init+0x40>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <gpio_LED_Blue_init+0x40>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <gpio_LED_Blue_init+0x40>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_blue_t;
    led_blue_t.Pin = BLUE_LED;
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	607b      	str	r3, [r7, #4]
    led_blue_t.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
    led_blue_t.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
    led_blue_t.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_blue_t);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <gpio_LED_Blue_init+0x44>)
 8000768:	f000 fa74 	bl	8000c54 <HAL_GPIO_Init>
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <rcc_clock_config_HSE>:
	    }
	    return true;
}

bool rcc_clock_config_HSE(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b092      	sub	sp, #72	; 0x48
 8000780:	af00      	add	r7, sp, #0


	  /*
	   * Oscillator initialization   *
	   */
	    RCC_OscInitTypeDef oscInit_t = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2234      	movs	r2, #52	; 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fedc 	bl	8002548 <memset>



	    oscInit_t.OscillatorType 					= RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
	    oscInit_t.HSEState  						= RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000798:	61bb      	str	r3, [r7, #24]
	    oscInit_t.HSICalibrationValue 				= RCC_HSICALIBRATION_DEFAULT;
 800079a:	2310      	movs	r3, #16
 800079c:	627b      	str	r3, [r7, #36]	; 0x24

	    oscInit_t.PLL.PLLState 						= RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	    oscInit_t.PLL.PLLSource 					= RCC_PLLSOURCE_HSI;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30

	    oscInit_t.PLL.PLLM 							= 8;
 80007a6:	2308      	movs	r3, #8
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
	    oscInit_t.PLL.PLLN 							= 216;
 80007aa:	23d8      	movs	r3, #216	; 0xd8
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
	    oscInit_t.PLL.PLLP 							= RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	    oscInit_t.PLL.PLLQ 							= 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	643b      	str	r3, [r7, #64]	; 0x40
	    oscInit_t.PLL.PLLR 							= 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_RCC_OscConfig(&oscInit_t)!= HAL_OK)
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fbf4 	bl	8000fac <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <rcc_clock_config_HSE+0x52>
	      {
	    		return false;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e01d      	b.n	800080a <rcc_clock_config_HSE+0x8e>

	    /**
	     * clock initialization
	     */

	    RCC_ClkInitTypeDef oscClk_t = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
	    oscClk_t.ClockType 							= RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007dc:	230f      	movs	r3, #15
 80007de:	603b      	str	r3, [r7, #0]
	    oscClk_t.SYSCLKSource 						= RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
	    oscClk_t.AHBCLKDivider 						= RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
	    oscClk_t.APB1CLKDivider						= RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	60fb      	str	r3, [r7, #12]
	    oscClk_t.APB2CLKDivider 					= RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	613b      	str	r3, [r7, #16]

	    if (HAL_RCC_ClockConfig(&oscClk_t, FLASH_LATENCY_7) != HAL_OK){
 80007f4:	463b      	mov	r3, r7
 80007f6:	2107      	movs	r1, #7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fe85 	bl	8001508 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <rcc_clock_config_HSE+0x8c>
	    	return false;
 8000804:	2300      	movs	r3, #0
 8000806:	e000      	b.n	800080a <rcc_clock_config_HSE+0x8e>
	    }

	    return true;
 8000808:	2301      	movs	r3, #1
}
 800080a:	4618      	mov	r0, r3
 800080c:	3748      	adds	r7, #72	; 0x48
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <timer_Init>:

#include "nucleo_stm32f767xx_timer.h"


void timer_Init()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <timer_Init+0x24>)
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <timer_Init+0x28>)
 800081c:	601a      	str	r2, [r3, #0]

	// set up a variable in ISR and count up every time.
	// this variable should give you ticks in ms


	htimer6.Init.Prescaler 			= 2 - 1;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <timer_Init+0x24>)
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period 			= 54000 - 1;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <timer_Init+0x24>)
 8000826:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 800082a:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Init(&htimer6);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <timer_Init+0x24>)
 800082e:	f001 f86d 	bl	800190c <HAL_TIM_Base_Init>

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000009c 	.word	0x2000009c
 800083c:	40001000 	.word	0x40001000

08000840 <timer_start>:

void timer_start(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <timer_start+0x10>)
 8000846:	f001 f8b9 	bl	80019bc <HAL_TIM_Base_Start_IT>


}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000009c 	.word	0x2000009c

08000854 <uart_UART3_GPIO_config>:
#include "nucleo_stm32f767xx_uart.h"

USART_HandleTypeDef husart3;

void uart_UART3_GPIO_config()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
     * RX = PD9
     * 1 Enable cllock for Port D
     * 2: set GPIO_TypeDef to corresponding values
     */

     __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <uart_UART3_GPIO_config+0x64>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <uart_UART3_GPIO_config+0x64>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <uart_UART3_GPIO_config+0x64>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
     GPIO_InitTypeDef gpio_tx_t;

     gpio_tx_t.Pin = GPIO_PIN_8;
 8000872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000876:	61fb      	str	r3, [r7, #28]
     gpio_tx_t.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
     gpio_tx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
     gpio_tx_t.Alternate = GPIO_AF7_USART3;
 8000880:	2307      	movs	r3, #7
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
     HAL_GPIO_Init(GPIOD, &gpio_tx_t);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <uart_UART3_GPIO_config+0x68>)
 800088c:	f000 f9e2 	bl	8000c54 <HAL_GPIO_Init>

     GPIO_InitTypeDef gpio_rx_t;

     gpio_rx_t.Pin = GPIO_PIN_9;
 8000890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000894:	60bb      	str	r3, [r7, #8]
     gpio_rx_t.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
     gpio_rx_t.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
     gpio_rx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOD, &gpio_rx_t);
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <uart_UART3_GPIO_config+0x68>)
 80008aa:	f000 f9d3 	bl	8000c54 <HAL_GPIO_Init>




}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <uart_UART3_config>:


bool uart_UART3_config()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <uart_UART3_config+0x60>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <uart_UART3_config+0x60>)
 80008cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <uart_UART3_config+0x60>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

    husart3.Instance = USART3;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <uart_UART3_config+0x64>)
 80008e0:	4a11      	ldr	r2, [pc, #68]	; (8000928 <uart_UART3_config+0x68>)
 80008e2:	601a      	str	r2, [r3, #0]
    husart3.Init.BaudRate = 115200;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <uart_UART3_config+0x64>)
 80008e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ea:	605a      	str	r2, [r3, #4]
    husart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <uart_UART3_config+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    husart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <uart_UART3_config+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
    husart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <uart_UART3_config+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    husart3.Init.Mode= UART_MODE_TX_RX;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <uart_UART3_config+0x64>)
 8000900:	220c      	movs	r2, #12
 8000902:	615a      	str	r2, [r3, #20]

    if(HAL_USART_Init(&husart3) != HAL_OK)
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <uart_UART3_config+0x64>)
 8000906:	f001 fad7 	bl	8001eb8 <HAL_USART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <uart_UART3_config+0x54>
      {
    		return false;
 8000910:	2300      	movs	r3, #0
 8000912:	e000      	b.n	8000916 <uart_UART3_config+0x56>
      }
    return true;
 8000914:	2301      	movs	r3, #1

}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	200000e8 	.word	0x200000e8
 8000928:	40004800 	.word	0x40004800

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x34>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x34>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x34>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x34>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f941 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	200f      	movs	r0, #15
 8000950:	f000 f810 	bl	8000974 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f000 f806 	bl	8000964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f951 	bl	8000c3a <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f919 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000138 	.word	0x20000138

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000138 	.word	0x20000138

08000a14 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <HAL_GetDEVID+0x18>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e0042000 	.word	0xe0042000

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	05fa0000 	.word	0x05fa0000

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff8e 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff29 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff3e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff8e 	bl	8000b24 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff31 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e175      	b.n	8000f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8164 	bne.w	8000f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00b      	beq.n	8000cb2 <HAL_GPIO_Init+0x5e>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca6:	2b11      	cmp	r3, #17
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x100>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80be 	beq.w	8000f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a65      	ldr	r2, [pc, #404]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b63      	ldr	r3, [pc, #396]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000df6:	4a61      	ldr	r2, [pc, #388]	; (8000f7c <HAL_GPIO_Init+0x328>)
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x32c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d037      	beq.n	8000e92 <HAL_GPIO_Init+0x23e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d031      	beq.n	8000e8e <HAL_GPIO_Init+0x23a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a56      	ldr	r2, [pc, #344]	; (8000f88 <HAL_GPIO_Init+0x334>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d02b      	beq.n	8000e8a <HAL_GPIO_Init+0x236>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <HAL_GPIO_Init+0x338>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d025      	beq.n	8000e86 <HAL_GPIO_Init+0x232>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <HAL_GPIO_Init+0x33c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01f      	beq.n	8000e82 <HAL_GPIO_Init+0x22e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a53      	ldr	r2, [pc, #332]	; (8000f94 <HAL_GPIO_Init+0x340>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d019      	beq.n	8000e7e <HAL_GPIO_Init+0x22a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x344>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0x226>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x348>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00d      	beq.n	8000e76 <HAL_GPIO_Init+0x222>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_GPIO_Init+0x34c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x21e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_Init+0x21a>
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	e012      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e6e:	230a      	movs	r3, #10
 8000e70:	e010      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e72:	2308      	movs	r3, #8
 8000e74:	e00e      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00c      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e00a      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e008      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e86:	2303      	movs	r3, #3
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e92:	2300      	movs	r3, #0
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	f002 0203 	and.w	r2, r2, #3
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ea4:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x328>)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed6:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_GPIO_Init+0x354>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	f67f ae86 	bls.w	8000c74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	40022400 	.word	0x40022400
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e29b      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8087 	beq.w	80010de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd0:	4b96      	ldr	r3, [pc, #600]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d00c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fdc:	4b93      	ldr	r3, [pc, #588]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d112      	bne.n	800100e <HAL_RCC_OscConfig+0x62>
 8000fe8:	4b90      	ldr	r3, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ff4:	d10b      	bne.n	800100e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff6:	4b8d      	ldr	r3, [pc, #564]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d06c      	beq.n	80010dc <HAL_RCC_OscConfig+0x130>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d168      	bne.n	80010dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e275      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x7a>
 8001018:	4b84      	ldr	r3, [pc, #528]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a83      	ldr	r2, [pc, #524]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e02e      	b.n	8001084 <HAL_RCC_OscConfig+0xd8>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x9c>
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b7c      	ldr	r3, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a7b      	ldr	r2, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01d      	b.n	8001084 <HAL_RCC_OscConfig+0xd8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0xc0>
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a75      	ldr	r2, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b73      	ldr	r3, [pc, #460]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a72      	ldr	r2, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0xd8>
 800106c:	4b6f      	ldr	r3, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a6e      	ldr	r2, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a6b      	ldr	r2, [pc, #428]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800107e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fcb6 	bl	80009fc <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcb2 	bl	80009fc <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e229      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0xe8>
 80010b2:	e014      	b.n	80010de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b4:	f7ff fca2 	bl	80009fc <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fc9e 	bl	80009fc <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e215      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x110>
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d069      	beq.n	80011be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d11c      	bne.n	800113c <HAL_RCC_OscConfig+0x190>
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x17a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d001      	beq.n	8001126 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e1e9      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	493d      	ldr	r1, [pc, #244]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	e040      	b.n	80011be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d023      	beq.n	800118c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a38      	ldr	r2, [pc, #224]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc54 	bl	80009fc <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc50 	bl	80009fc <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1c7      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4929      	ldr	r1, [pc, #164]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
 800118a:	e018      	b.n	80011be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fc30 	bl	80009fc <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc2c 	bl	80009fc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1a3      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d038      	beq.n	800123c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d019      	beq.n	8001206 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80011d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011de:	f7ff fc0d 	bl	80009fc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc09 	bl	80009fc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e180      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_RCC_OscConfig+0x280>)
 80011fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x23a>
 8001204:	e01a      	b.n	800123c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_OscConfig+0x280>)
 8001208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_RCC_OscConfig+0x280>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fbf3 	bl	80009fc <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fbef 	bl	80009fc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d903      	bls.n	8001230 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e166      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
 800122c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b92      	ldr	r3, [pc, #584]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a4 	beq.w	8001392 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b89      	ldr	r3, [pc, #548]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a88      	ldr	r2, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b86      	ldr	r3, [pc, #536]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001272:	4b83      	ldr	r3, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x4d4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800127e:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x4d4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x4d4>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128a:	f7ff fbb7 	bl	80009fc <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff fbb3 	bl	80009fc <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b64      	cmp	r3, #100	; 0x64
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e12a      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4d4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x31a>
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	e02d      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x33c>
 80012ce:	4b6b      	ldr	r3, [pc, #428]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	4b68      	ldr	r3, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a67      	ldr	r2, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x35e>
 80012f0:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	4a61      	ldr	r2, [pc, #388]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	; 0x70
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a5e      	ldr	r2, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b59      	ldr	r3, [pc, #356]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fb67 	bl	80009fc <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb63 	bl	80009fc <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0d8      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ee      	beq.n	8001332 <HAL_RCC_OscConfig+0x386>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff fb51 	bl	80009fc <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb4d 	bl	80009fc <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0c2      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a3c      	ldr	r2, [pc, #240]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80ae 	beq.w	80014f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d06d      	beq.n	8001484 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d14b      	bne.n	8001448 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80013b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb1e 	bl	80009fc <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fb1a 	bl	80009fc <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e091      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	071b      	lsls	r3, r3, #28
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff faec 	bl	80009fc <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fae8 	bl	80009fc <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e05f      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x47c>
 8001446:	e057      	b.n	80014f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 800144e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fad2 	bl	80009fc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff face 	bl	80009fc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e045      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_OscConfig+0x4d0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x4b0>
 800147a:	e03d      	b.n	80014f8 <HAL_RCC_OscConfig+0x54c>
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_RCC_OscConfig+0x558>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d030      	beq.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d129      	bne.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d122      	bne.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014bc:	4293      	cmp	r3, r2
 80014be:	d119      	bne.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10f      	bne.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0d0      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 020f 	bic.w	r2, r3, #15
 8001536:	4965      	ldr	r1, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800156e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001572:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800158a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d040      	beq.n	800162c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e073      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06b      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015fc:	f7ff f9fe 	bl	80009fc <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff f9fa 	bl	80009fc <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e053      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d210      	bcs.n	800165c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 020f 	bic.w	r2, r3, #15
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f821 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	490a      	ldr	r1, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1cc>)
 80016ac:	5ccb      	ldrb	r3, [r1, r3]
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1d0>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1d4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f95a 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	080034b0 	.word	0x080034b0
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	2300      	movs	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f8:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d00d      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x40>
 8001704:	2b08      	cmp	r3, #8
 8001706:	f200 80bd 	bhi.w	8001884 <HAL_RCC_GetSysClockFreq+0x1a4>
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x34>
 800170e:	2b04      	cmp	r3, #4
 8001710:	d003      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0x3a>
 8001712:	e0b7      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001716:	60bb      	str	r3, [r7, #8]
      break;
 8001718:	e0b7      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800171a:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800171c:	60bb      	str	r3, [r7, #8]
      break;
 800171e:	e0b4      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001728:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d04d      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	461a      	mov	r2, r3
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	ea02 0800 	and.w	r8, r2, r0
 800174e:	ea03 0901 	and.w	r9, r3, r1
 8001752:	4640      	mov	r0, r8
 8001754:	4649      	mov	r1, r9
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001764:	0142      	lsls	r2, r0, #5
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	ebb0 0008 	subs.w	r0, r0, r8
 800176e:	eb61 0109 	sbc.w	r1, r1, r9
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001780:	0182      	lsls	r2, r0, #6
 8001782:	1a12      	subs	r2, r2, r0
 8001784:	eb63 0301 	sbc.w	r3, r3, r1
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	00d9      	lsls	r1, r3, #3
 8001792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001796:	00d0      	lsls	r0, r2, #3
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	eb12 0208 	adds.w	r2, r2, r8
 80017a0:	eb43 0309 	adc.w	r3, r3, r9
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	0259      	lsls	r1, r3, #9
 80017ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017b2:	0250      	lsls	r0, r2, #9
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f7fe fd8c 	bl	80002e0 <__aeabi_uldivmod>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e04a      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	461a      	mov	r2, r3
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	ea02 0400 	and.w	r4, r2, r0
 80017ea:	ea03 0501 	and.w	r5, r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	014b      	lsls	r3, r1, #5
 80017fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001800:	0142      	lsls	r2, r0, #5
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	1b00      	subs	r0, r0, r4
 8001808:	eb61 0105 	sbc.w	r1, r1, r5
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	018b      	lsls	r3, r1, #6
 8001816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800181a:	0182      	lsls	r2, r0, #6
 800181c:	1a12      	subs	r2, r2, r0
 800181e:	eb63 0301 	sbc.w	r3, r3, r1
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	00d9      	lsls	r1, r3, #3
 800182c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001830:	00d0      	lsls	r0, r2, #3
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	1912      	adds	r2, r2, r4
 8001838:	eb45 0303 	adc.w	r3, r5, r3
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	0299      	lsls	r1, r3, #10
 8001846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800184a:	0290      	lsls	r0, r2, #10
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f7fe fd40 	bl	80002e0 <__aeabi_uldivmod>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4613      	mov	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	3301      	adds	r3, #1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	60bb      	str	r3, [r7, #8]
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001886:	60bb      	str	r3, [r7, #8]
      break;
 8001888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188a:	68bb      	ldr	r3, [r7, #8]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	00f42400 	.word	0x00f42400
 80018a0:	007a1200 	.word	0x007a1200

080018a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c0:	f7ff fff0 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	0a9b      	lsrs	r3, r3, #10
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	080034c0 	.word	0x080034c0

080018e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018e8:	f7ff ffdc 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	0b5b      	lsrs	r3, r3, #13
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	080034c0 	.word	0x080034c0

0800190c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e049      	b.n	80019b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe febe 	bl	80006b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3304      	adds	r3, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f000 f9f6 	bl	8001d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e054      	b.n	8001a7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_TIM_Base_Start_IT+0xd0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d022      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fe:	d01d      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d018      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_TIM_Base_Start_IT+0xe0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d115      	bne.n	8001a68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xec>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d015      	beq.n	8001a7a <HAL_TIM_Base_Start_IT+0xbe>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d011      	beq.n	8001a7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a66:	e008      	b.n	8001a7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e000      	b.n	8001a7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40000800 	.word	0x40000800
 8001a98:	40000c00 	.word	0x40000c00
 8001a9c:	40010400 	.word	0x40010400
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	40001800 	.word	0x40001800
 8001aa8:	00010007 	.word	0x00010007

08001aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d122      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d11b      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0202 	mvn.w	r2, #2
 8001ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f905 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8f7 	bl	8001cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f908 	bl	8001d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d122      	bne.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d11b      	bne.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0204 	mvn.w	r2, #4
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8db 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8cd 	bl	8001cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8de 	bl	8001d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d122      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d11b      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0208 	mvn.w	r2, #8
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8b1 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8a3 	bl	8001cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8b4 	bl	8001d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0210 	mvn.w	r2, #16
 8001bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f887 	bl	8001cfe <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f879 	bl	8001cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f88a 	bl	8001d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0201 	mvn.w	r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fcfe 	bl	800062c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f91a 	bl	8001e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6a:	d10e      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b80      	cmp	r3, #128	; 0x80
 8001c78:	d107      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f90d 	bl	8001ea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d10e      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f838 	bl	8001d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d107      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0220 	mvn.w	r2, #32
 8001cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8cd 	bl	8001e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <TIM_Base_SetConfig+0x114>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d00f      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <TIM_Base_SetConfig+0x118>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00b      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <TIM_Base_SetConfig+0x11c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <TIM_Base_SetConfig+0x120>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <TIM_Base_SetConfig+0x124>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d108      	bne.n	8001d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <TIM_Base_SetConfig+0x114>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d027      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <TIM_Base_SetConfig+0x118>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d023      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <TIM_Base_SetConfig+0x11c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <TIM_Base_SetConfig+0x120>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <TIM_Base_SetConfig+0x124>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d017      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <TIM_Base_SetConfig+0x128>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <TIM_Base_SetConfig+0x12c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00f      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <TIM_Base_SetConfig+0x130>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00b      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <TIM_Base_SetConfig+0x134>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <TIM_Base_SetConfig+0x138>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d003      	beq.n	8001dee <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <TIM_Base_SetConfig+0x13c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d108      	bne.n	8001e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <TIM_Base_SetConfig+0x114>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <TIM_Base_SetConfig+0xf8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <TIM_Base_SetConfig+0x124>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d103      	bne.n	8001e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	615a      	str	r2, [r3, #20]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40000c00 	.word	0x40000c00
 8001e60:	40010400 	.word	0x40010400
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40014400 	.word	0x40014400
 8001e6c:	40014800 	.word	0x40014800
 8001e70:	40001800 	.word	0x40001800
 8001e74:	40001c00 	.word	0x40001c00
 8001e78:	40002000 	.word	0x40002000

08001e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03c      	b.n	8001f44 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f834 	bl	8001f4c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f90f 	bl	8002120 <USART_SetConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e01b      	b.n	8001f44 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f1a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fa71 	bl	8002424 <USART_CheckIdleState>
 8001f42:	4603      	mov	r3, r0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f040 8095 	bne.w	80020a8 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_USART_Transmit+0x2a>
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e08d      	b.n	80020aa <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_USART_Transmit+0x3c>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e086      	b.n	80020aa <HAL_USART_Transmit+0x14a>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2212      	movs	r2, #18
 8001fae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fd23 	bl	80009fc <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_USART_Transmit+0x80>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8001fe8:	e02a      	b.n	8002040 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f85c 	bl	80020b2 <USART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e052      	b.n	80020aa <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10b      	bne.n	8002022 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3302      	adds	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e007      	b.n	8002032 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1cf      	bne.n	8001fea <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2200      	movs	r2, #0
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f82c 	bl	80020b2 <USART_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e022      	b.n	80020aa <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80020c2:	e018      	b.n	80020f6 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d014      	beq.n	80020f6 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7fe fc96 	bl	80009fc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <USART_WaitOnFlagUntilTimeout+0x30>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	429a      	cmp	r2, r3
 8002112:	d0d7      	beq.n	80020c4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4bae      	ldr	r3, [pc, #696]	; (8002408 <USART_SetConfig+0x2e8>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6979      	ldr	r1, [r7, #20]
 8002156:	430b      	orrs	r3, r1
 8002158:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800215a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800215e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4313      	orrs	r3, r2
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a9b      	ldr	r2, [pc, #620]	; (800240c <USART_SetConfig+0x2ec>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d121      	bne.n	80021e6 <USART_SetConfig+0xc6>
 80021a2:	4b9b      	ldr	r3, [pc, #620]	; (8002410 <USART_SetConfig+0x2f0>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d817      	bhi.n	80021e0 <USART_SetConfig+0xc0>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <USART_SetConfig+0x98>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021cf 	.word	0x080021cf
 80021c4:	080021db 	.word	0x080021db
 80021c8:	2301      	movs	r3, #1
 80021ca:	77fb      	strb	r3, [r7, #31]
 80021cc:	e096      	b.n	80022fc <USART_SetConfig+0x1dc>
 80021ce:	2302      	movs	r3, #2
 80021d0:	77fb      	strb	r3, [r7, #31]
 80021d2:	e093      	b.n	80022fc <USART_SetConfig+0x1dc>
 80021d4:	2304      	movs	r3, #4
 80021d6:	77fb      	strb	r3, [r7, #31]
 80021d8:	e090      	b.n	80022fc <USART_SetConfig+0x1dc>
 80021da:	2308      	movs	r3, #8
 80021dc:	77fb      	strb	r3, [r7, #31]
 80021de:	e08d      	b.n	80022fc <USART_SetConfig+0x1dc>
 80021e0:	2310      	movs	r3, #16
 80021e2:	77fb      	strb	r3, [r7, #31]
 80021e4:	e08a      	b.n	80022fc <USART_SetConfig+0x1dc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a8a      	ldr	r2, [pc, #552]	; (8002414 <USART_SetConfig+0x2f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d132      	bne.n	8002256 <USART_SetConfig+0x136>
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <USART_SetConfig+0x2f0>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d828      	bhi.n	8002250 <USART_SetConfig+0x130>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <USART_SetConfig+0xe4>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002239 	.word	0x08002239
 8002208:	08002251 	.word	0x08002251
 800220c:	08002251 	.word	0x08002251
 8002210:	08002251 	.word	0x08002251
 8002214:	08002245 	.word	0x08002245
 8002218:	08002251 	.word	0x08002251
 800221c:	08002251 	.word	0x08002251
 8002220:	08002251 	.word	0x08002251
 8002224:	0800223f 	.word	0x0800223f
 8002228:	08002251 	.word	0x08002251
 800222c:	08002251 	.word	0x08002251
 8002230:	08002251 	.word	0x08002251
 8002234:	0800224b 	.word	0x0800224b
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e05e      	b.n	80022fc <USART_SetConfig+0x1dc>
 800223e:	2302      	movs	r3, #2
 8002240:	77fb      	strb	r3, [r7, #31]
 8002242:	e05b      	b.n	80022fc <USART_SetConfig+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	77fb      	strb	r3, [r7, #31]
 8002248:	e058      	b.n	80022fc <USART_SetConfig+0x1dc>
 800224a:	2308      	movs	r3, #8
 800224c:	77fb      	strb	r3, [r7, #31]
 800224e:	e055      	b.n	80022fc <USART_SetConfig+0x1dc>
 8002250:	2310      	movs	r3, #16
 8002252:	77fb      	strb	r3, [r7, #31]
 8002254:	e052      	b.n	80022fc <USART_SetConfig+0x1dc>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6f      	ldr	r2, [pc, #444]	; (8002418 <USART_SetConfig+0x2f8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d120      	bne.n	80022a2 <USART_SetConfig+0x182>
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <USART_SetConfig+0x2f0>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800226a:	2b30      	cmp	r3, #48	; 0x30
 800226c:	d013      	beq.n	8002296 <USART_SetConfig+0x176>
 800226e:	2b30      	cmp	r3, #48	; 0x30
 8002270:	d814      	bhi.n	800229c <USART_SetConfig+0x17c>
 8002272:	2b20      	cmp	r3, #32
 8002274:	d009      	beq.n	800228a <USART_SetConfig+0x16a>
 8002276:	2b20      	cmp	r3, #32
 8002278:	d810      	bhi.n	800229c <USART_SetConfig+0x17c>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <USART_SetConfig+0x164>
 800227e:	2b10      	cmp	r3, #16
 8002280:	d006      	beq.n	8002290 <USART_SetConfig+0x170>
 8002282:	e00b      	b.n	800229c <USART_SetConfig+0x17c>
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
 8002288:	e038      	b.n	80022fc <USART_SetConfig+0x1dc>
 800228a:	2302      	movs	r3, #2
 800228c:	77fb      	strb	r3, [r7, #31]
 800228e:	e035      	b.n	80022fc <USART_SetConfig+0x1dc>
 8002290:	2304      	movs	r3, #4
 8002292:	77fb      	strb	r3, [r7, #31]
 8002294:	e032      	b.n	80022fc <USART_SetConfig+0x1dc>
 8002296:	2308      	movs	r3, #8
 8002298:	77fb      	strb	r3, [r7, #31]
 800229a:	e02f      	b.n	80022fc <USART_SetConfig+0x1dc>
 800229c:	2310      	movs	r3, #16
 800229e:	77fb      	strb	r3, [r7, #31]
 80022a0:	e02c      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5d      	ldr	r2, [pc, #372]	; (800241c <USART_SetConfig+0x2fc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d125      	bne.n	80022f8 <USART_SetConfig+0x1d8>
 80022ac:	4b58      	ldr	r3, [pc, #352]	; (8002410 <USART_SetConfig+0x2f0>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80022ba:	d017      	beq.n	80022ec <USART_SetConfig+0x1cc>
 80022bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80022c0:	d817      	bhi.n	80022f2 <USART_SetConfig+0x1d2>
 80022c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c6:	d00b      	beq.n	80022e0 <USART_SetConfig+0x1c0>
 80022c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022cc:	d811      	bhi.n	80022f2 <USART_SetConfig+0x1d2>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <USART_SetConfig+0x1ba>
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d006      	beq.n	80022e6 <USART_SetConfig+0x1c6>
 80022d8:	e00b      	b.n	80022f2 <USART_SetConfig+0x1d2>
 80022da:	2301      	movs	r3, #1
 80022dc:	77fb      	strb	r3, [r7, #31]
 80022de:	e00d      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022e0:	2302      	movs	r3, #2
 80022e2:	77fb      	strb	r3, [r7, #31]
 80022e4:	e00a      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022e6:	2304      	movs	r3, #4
 80022e8:	77fb      	strb	r3, [r7, #31]
 80022ea:	e007      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022ec:	2308      	movs	r3, #8
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	e004      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022f2:	2310      	movs	r3, #16
 80022f4:	77fb      	strb	r3, [r7, #31]
 80022f6:	e001      	b.n	80022fc <USART_SetConfig+0x1dc>
 80022f8:	2310      	movs	r3, #16
 80022fa:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d857      	bhi.n	80023b2 <USART_SetConfig+0x292>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <USART_SetConfig+0x1e8>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	0800232d 	.word	0x0800232d
 800230c:	0800234b 	.word	0x0800234b
 8002310:	08002369 	.word	0x08002369
 8002314:	080023b3 	.word	0x080023b3
 8002318:	0800237f 	.word	0x0800237f
 800231c:	080023b3 	.word	0x080023b3
 8002320:	080023b3 	.word	0x080023b3
 8002324:	080023b3 	.word	0x080023b3
 8002328:	0800239d 	.word	0x0800239d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800232c:	f7ff fac6 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 8002330:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	005a      	lsls	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	61bb      	str	r3, [r7, #24]
      break;
 8002348:	e036      	b.n	80023b8 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800234a:	f7ff facb 	bl	80018e4 <HAL_RCC_GetPCLK2Freq>
 800234e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	005a      	lsls	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	441a      	add	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	61bb      	str	r3, [r7, #24]
      break;
 8002366:	e027      	b.n	80023b8 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	085a      	lsrs	r2, r3, #1
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <USART_SetConfig+0x300>)
 8002370:	4413      	add	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6852      	ldr	r2, [r2, #4]
 8002376:	fbb3 f3f2 	udiv	r3, r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      break;
 800237c:	e01c      	b.n	80023b8 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800237e:	f7ff f9af 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 8002382:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	005a      	lsls	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	61bb      	str	r3, [r7, #24]
      break;
 800239a:	e00d      	b.n	80023b8 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	61bb      	str	r3, [r7, #24]
      break;
 80023b0:	e002      	b.n	80023b8 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	77bb      	strb	r3, [r7, #30]
      break;
 80023b6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	d916      	bls.n	80023ec <USART_SetConfig+0x2cc>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d212      	bcs.n	80023ec <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f023 030f 	bic.w	r3, r3, #15
 80023ce:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	b29a      	uxth	r2, r3
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	4313      	orrs	r3, r2
 80023e0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	e001      	b.n	80023f0 <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80023fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	efff69f3 	.word	0xefff69f3
 800240c:	40011000 	.word	0x40011000
 8002410:	40023800 	.word	0x40023800
 8002414:	40004400 	.word	0x40004400
 8002418:	40004800 	.word	0x40004800
 800241c:	40011400 	.word	0x40011400
 8002420:	01e84800 	.word	0x01e84800

08002424 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002432:	f7fe fae3 	bl	80009fc <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b08      	cmp	r3, #8
 8002444:	d10e      	bne.n	8002464 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fe2c 	bl	80020b2 <USART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e01e      	b.n	80024a2 <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d10e      	bne.n	8002490 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe16 	bl	80020b2 <USART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e008      	b.n	80024a2 <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c8:	4c0b      	ldr	r4, [pc, #44]	; (80024f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d6:	f7fe f91b 	bl	8000710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024da:	f000 f811 	bl	8002500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7fe f891 	bl	8000604 <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80024f0:	08003570 	.word	0x08003570
  ldr r2, =_sbss
 80024f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80024f8:	2000014c 	.word	0x2000014c

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <__libc_init_array>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	4d0d      	ldr	r5, [pc, #52]	; (8002538 <__libc_init_array+0x38>)
 8002504:	4c0d      	ldr	r4, [pc, #52]	; (800253c <__libc_init_array+0x3c>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	2600      	movs	r6, #0
 800250c:	42a6      	cmp	r6, r4
 800250e:	d109      	bne.n	8002524 <__libc_init_array+0x24>
 8002510:	4d0b      	ldr	r5, [pc, #44]	; (8002540 <__libc_init_array+0x40>)
 8002512:	4c0c      	ldr	r4, [pc, #48]	; (8002544 <__libc_init_array+0x44>)
 8002514:	f000 ffac 	bl	8003470 <_init>
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	2600      	movs	r6, #0
 800251e:	42a6      	cmp	r6, r4
 8002520:	d105      	bne.n	800252e <__libc_init_array+0x2e>
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	f855 3b04 	ldr.w	r3, [r5], #4
 8002528:	4798      	blx	r3
 800252a:	3601      	adds	r6, #1
 800252c:	e7ee      	b.n	800250c <__libc_init_array+0xc>
 800252e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002532:	4798      	blx	r3
 8002534:	3601      	adds	r6, #1
 8002536:	e7f2      	b.n	800251e <__libc_init_array+0x1e>
 8002538:	08003568 	.word	0x08003568
 800253c:	08003568 	.word	0x08003568
 8002540:	08003568 	.word	0x08003568
 8002544:	0800356c 	.word	0x0800356c

08002548 <memset>:
 8002548:	4402      	add	r2, r0
 800254a:	4603      	mov	r3, r0
 800254c:	4293      	cmp	r3, r2
 800254e:	d100      	bne.n	8002552 <memset+0xa>
 8002550:	4770      	bx	lr
 8002552:	f803 1b01 	strb.w	r1, [r3], #1
 8002556:	e7f9      	b.n	800254c <memset+0x4>

08002558 <iprintf>:
 8002558:	b40f      	push	{r0, r1, r2, r3}
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <iprintf+0x2c>)
 800255c:	b513      	push	{r0, r1, r4, lr}
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	b124      	cbz	r4, 800256c <iprintf+0x14>
 8002562:	69a3      	ldr	r3, [r4, #24]
 8002564:	b913      	cbnz	r3, 800256c <iprintf+0x14>
 8002566:	4620      	mov	r0, r4
 8002568:	f000 f866 	bl	8002638 <__sinit>
 800256c:	ab05      	add	r3, sp, #20
 800256e:	9a04      	ldr	r2, [sp, #16]
 8002570:	68a1      	ldr	r1, [r4, #8]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	4620      	mov	r0, r4
 8002576:	f000 f983 	bl	8002880 <_vfiprintf_r>
 800257a:	b002      	add	sp, #8
 800257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr
 8002584:	2000000c 	.word	0x2000000c

08002588 <std>:
 8002588:	2300      	movs	r3, #0
 800258a:	b510      	push	{r4, lr}
 800258c:	4604      	mov	r4, r0
 800258e:	e9c0 3300 	strd	r3, r3, [r0]
 8002592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002596:	6083      	str	r3, [r0, #8]
 8002598:	8181      	strh	r1, [r0, #12]
 800259a:	6643      	str	r3, [r0, #100]	; 0x64
 800259c:	81c2      	strh	r2, [r0, #14]
 800259e:	6183      	str	r3, [r0, #24]
 80025a0:	4619      	mov	r1, r3
 80025a2:	2208      	movs	r2, #8
 80025a4:	305c      	adds	r0, #92	; 0x5c
 80025a6:	f7ff ffcf 	bl	8002548 <memset>
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <std+0x38>)
 80025ac:	6263      	str	r3, [r4, #36]	; 0x24
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <std+0x3c>)
 80025b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <std+0x40>)
 80025b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <std+0x44>)
 80025b8:	6224      	str	r4, [r4, #32]
 80025ba:	6323      	str	r3, [r4, #48]	; 0x30
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	bf00      	nop
 80025c0:	08002e29 	.word	0x08002e29
 80025c4:	08002e4b 	.word	0x08002e4b
 80025c8:	08002e83 	.word	0x08002e83
 80025cc:	08002ea7 	.word	0x08002ea7

080025d0 <_cleanup_r>:
 80025d0:	4901      	ldr	r1, [pc, #4]	; (80025d8 <_cleanup_r+0x8>)
 80025d2:	f000 b8af 	b.w	8002734 <_fwalk_reent>
 80025d6:	bf00      	nop
 80025d8:	08003181 	.word	0x08003181

080025dc <__sfmoreglue>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	1e4a      	subs	r2, r1, #1
 80025e0:	2568      	movs	r5, #104	; 0x68
 80025e2:	4355      	muls	r5, r2
 80025e4:	460e      	mov	r6, r1
 80025e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025ea:	f000 f8c5 	bl	8002778 <_malloc_r>
 80025ee:	4604      	mov	r4, r0
 80025f0:	b140      	cbz	r0, 8002604 <__sfmoreglue+0x28>
 80025f2:	2100      	movs	r1, #0
 80025f4:	e9c0 1600 	strd	r1, r6, [r0]
 80025f8:	300c      	adds	r0, #12
 80025fa:	60a0      	str	r0, [r4, #8]
 80025fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002600:	f7ff ffa2 	bl	8002548 <memset>
 8002604:	4620      	mov	r0, r4
 8002606:	bd70      	pop	{r4, r5, r6, pc}

08002608 <__sfp_lock_acquire>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__sfp_lock_acquire+0x8>)
 800260a:	f000 b8b3 	b.w	8002774 <__retarget_lock_acquire_recursive>
 800260e:	bf00      	nop
 8002610:	20000144 	.word	0x20000144

08002614 <__sfp_lock_release>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__sfp_lock_release+0x8>)
 8002616:	f000 b8ae 	b.w	8002776 <__retarget_lock_release_recursive>
 800261a:	bf00      	nop
 800261c:	20000144 	.word	0x20000144

08002620 <__sinit_lock_acquire>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__sinit_lock_acquire+0x8>)
 8002622:	f000 b8a7 	b.w	8002774 <__retarget_lock_acquire_recursive>
 8002626:	bf00      	nop
 8002628:	2000013f 	.word	0x2000013f

0800262c <__sinit_lock_release>:
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <__sinit_lock_release+0x8>)
 800262e:	f000 b8a2 	b.w	8002776 <__retarget_lock_release_recursive>
 8002632:	bf00      	nop
 8002634:	2000013f 	.word	0x2000013f

08002638 <__sinit>:
 8002638:	b510      	push	{r4, lr}
 800263a:	4604      	mov	r4, r0
 800263c:	f7ff fff0 	bl	8002620 <__sinit_lock_acquire>
 8002640:	69a3      	ldr	r3, [r4, #24]
 8002642:	b11b      	cbz	r3, 800264c <__sinit+0x14>
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002648:	f7ff bff0 	b.w	800262c <__sinit_lock_release>
 800264c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002650:	6523      	str	r3, [r4, #80]	; 0x50
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <__sinit+0x68>)
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <__sinit+0x6c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62a2      	str	r2, [r4, #40]	; 0x28
 800265a:	42a3      	cmp	r3, r4
 800265c:	bf04      	itt	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	61a3      	streq	r3, [r4, #24]
 8002662:	4620      	mov	r0, r4
 8002664:	f000 f820 	bl	80026a8 <__sfp>
 8002668:	6060      	str	r0, [r4, #4]
 800266a:	4620      	mov	r0, r4
 800266c:	f000 f81c 	bl	80026a8 <__sfp>
 8002670:	60a0      	str	r0, [r4, #8]
 8002672:	4620      	mov	r0, r4
 8002674:	f000 f818 	bl	80026a8 <__sfp>
 8002678:	2200      	movs	r2, #0
 800267a:	60e0      	str	r0, [r4, #12]
 800267c:	2104      	movs	r1, #4
 800267e:	6860      	ldr	r0, [r4, #4]
 8002680:	f7ff ff82 	bl	8002588 <std>
 8002684:	68a0      	ldr	r0, [r4, #8]
 8002686:	2201      	movs	r2, #1
 8002688:	2109      	movs	r1, #9
 800268a:	f7ff ff7d 	bl	8002588 <std>
 800268e:	68e0      	ldr	r0, [r4, #12]
 8002690:	2202      	movs	r2, #2
 8002692:	2112      	movs	r1, #18
 8002694:	f7ff ff78 	bl	8002588 <std>
 8002698:	2301      	movs	r3, #1
 800269a:	61a3      	str	r3, [r4, #24]
 800269c:	e7d2      	b.n	8002644 <__sinit+0xc>
 800269e:	bf00      	nop
 80026a0:	080034c8 	.word	0x080034c8
 80026a4:	080025d1 	.word	0x080025d1

080026a8 <__sfp>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	4607      	mov	r7, r0
 80026ac:	f7ff ffac 	bl	8002608 <__sfp_lock_acquire>
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <__sfp+0x84>)
 80026b2:	681e      	ldr	r6, [r3, #0]
 80026b4:	69b3      	ldr	r3, [r6, #24]
 80026b6:	b913      	cbnz	r3, 80026be <__sfp+0x16>
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7ff ffbd 	bl	8002638 <__sinit>
 80026be:	3648      	adds	r6, #72	; 0x48
 80026c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	d503      	bpl.n	80026d0 <__sfp+0x28>
 80026c8:	6833      	ldr	r3, [r6, #0]
 80026ca:	b30b      	cbz	r3, 8002710 <__sfp+0x68>
 80026cc:	6836      	ldr	r6, [r6, #0]
 80026ce:	e7f7      	b.n	80026c0 <__sfp+0x18>
 80026d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026d4:	b9d5      	cbnz	r5, 800270c <__sfp+0x64>
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <__sfp+0x88>)
 80026d8:	60e3      	str	r3, [r4, #12]
 80026da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026de:	6665      	str	r5, [r4, #100]	; 0x64
 80026e0:	f000 f847 	bl	8002772 <__retarget_lock_init_recursive>
 80026e4:	f7ff ff96 	bl	8002614 <__sfp_lock_release>
 80026e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026f0:	6025      	str	r5, [r4, #0]
 80026f2:	61a5      	str	r5, [r4, #24]
 80026f4:	2208      	movs	r2, #8
 80026f6:	4629      	mov	r1, r5
 80026f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026fc:	f7ff ff24 	bl	8002548 <memset>
 8002700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002708:	4620      	mov	r0, r4
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800270c:	3468      	adds	r4, #104	; 0x68
 800270e:	e7d9      	b.n	80026c4 <__sfp+0x1c>
 8002710:	2104      	movs	r1, #4
 8002712:	4638      	mov	r0, r7
 8002714:	f7ff ff62 	bl	80025dc <__sfmoreglue>
 8002718:	4604      	mov	r4, r0
 800271a:	6030      	str	r0, [r6, #0]
 800271c:	2800      	cmp	r0, #0
 800271e:	d1d5      	bne.n	80026cc <__sfp+0x24>
 8002720:	f7ff ff78 	bl	8002614 <__sfp_lock_release>
 8002724:	230c      	movs	r3, #12
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	e7ee      	b.n	8002708 <__sfp+0x60>
 800272a:	bf00      	nop
 800272c:	080034c8 	.word	0x080034c8
 8002730:	ffff0001 	.word	0xffff0001

08002734 <_fwalk_reent>:
 8002734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002738:	4606      	mov	r6, r0
 800273a:	4688      	mov	r8, r1
 800273c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002740:	2700      	movs	r7, #0
 8002742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002746:	f1b9 0901 	subs.w	r9, r9, #1
 800274a:	d505      	bpl.n	8002758 <_fwalk_reent+0x24>
 800274c:	6824      	ldr	r4, [r4, #0]
 800274e:	2c00      	cmp	r4, #0
 8002750:	d1f7      	bne.n	8002742 <_fwalk_reent+0xe>
 8002752:	4638      	mov	r0, r7
 8002754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002758:	89ab      	ldrh	r3, [r5, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d907      	bls.n	800276e <_fwalk_reent+0x3a>
 800275e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002762:	3301      	adds	r3, #1
 8002764:	d003      	beq.n	800276e <_fwalk_reent+0x3a>
 8002766:	4629      	mov	r1, r5
 8002768:	4630      	mov	r0, r6
 800276a:	47c0      	blx	r8
 800276c:	4307      	orrs	r7, r0
 800276e:	3568      	adds	r5, #104	; 0x68
 8002770:	e7e9      	b.n	8002746 <_fwalk_reent+0x12>

08002772 <__retarget_lock_init_recursive>:
 8002772:	4770      	bx	lr

08002774 <__retarget_lock_acquire_recursive>:
 8002774:	4770      	bx	lr

08002776 <__retarget_lock_release_recursive>:
 8002776:	4770      	bx	lr

08002778 <_malloc_r>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	1ccd      	adds	r5, r1, #3
 800277c:	f025 0503 	bic.w	r5, r5, #3
 8002780:	3508      	adds	r5, #8
 8002782:	2d0c      	cmp	r5, #12
 8002784:	bf38      	it	cc
 8002786:	250c      	movcc	r5, #12
 8002788:	2d00      	cmp	r5, #0
 800278a:	4606      	mov	r6, r0
 800278c:	db01      	blt.n	8002792 <_malloc_r+0x1a>
 800278e:	42a9      	cmp	r1, r5
 8002790:	d903      	bls.n	800279a <_malloc_r+0x22>
 8002792:	230c      	movs	r3, #12
 8002794:	6033      	str	r3, [r6, #0]
 8002796:	2000      	movs	r0, #0
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	f000 fda3 	bl	80032e4 <__malloc_lock>
 800279e:	4921      	ldr	r1, [pc, #132]	; (8002824 <_malloc_r+0xac>)
 80027a0:	680a      	ldr	r2, [r1, #0]
 80027a2:	4614      	mov	r4, r2
 80027a4:	b99c      	cbnz	r4, 80027ce <_malloc_r+0x56>
 80027a6:	4f20      	ldr	r7, [pc, #128]	; (8002828 <_malloc_r+0xb0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b923      	cbnz	r3, 80027b6 <_malloc_r+0x3e>
 80027ac:	4621      	mov	r1, r4
 80027ae:	4630      	mov	r0, r6
 80027b0:	f000 fb2a 	bl	8002e08 <_sbrk_r>
 80027b4:	6038      	str	r0, [r7, #0]
 80027b6:	4629      	mov	r1, r5
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 fb25 	bl	8002e08 <_sbrk_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	d123      	bne.n	800280a <_malloc_r+0x92>
 80027c2:	230c      	movs	r3, #12
 80027c4:	6033      	str	r3, [r6, #0]
 80027c6:	4630      	mov	r0, r6
 80027c8:	f000 fd92 	bl	80032f0 <__malloc_unlock>
 80027cc:	e7e3      	b.n	8002796 <_malloc_r+0x1e>
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	1b5b      	subs	r3, r3, r5
 80027d2:	d417      	bmi.n	8002804 <_malloc_r+0x8c>
 80027d4:	2b0b      	cmp	r3, #11
 80027d6:	d903      	bls.n	80027e0 <_malloc_r+0x68>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	441c      	add	r4, r3
 80027dc:	6025      	str	r5, [r4, #0]
 80027de:	e004      	b.n	80027ea <_malloc_r+0x72>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	42a2      	cmp	r2, r4
 80027e4:	bf0c      	ite	eq
 80027e6:	600b      	streq	r3, [r1, #0]
 80027e8:	6053      	strne	r3, [r2, #4]
 80027ea:	4630      	mov	r0, r6
 80027ec:	f000 fd80 	bl	80032f0 <__malloc_unlock>
 80027f0:	f104 000b 	add.w	r0, r4, #11
 80027f4:	1d23      	adds	r3, r4, #4
 80027f6:	f020 0007 	bic.w	r0, r0, #7
 80027fa:	1ac2      	subs	r2, r0, r3
 80027fc:	d0cc      	beq.n	8002798 <_malloc_r+0x20>
 80027fe:	1a1b      	subs	r3, r3, r0
 8002800:	50a3      	str	r3, [r4, r2]
 8002802:	e7c9      	b.n	8002798 <_malloc_r+0x20>
 8002804:	4622      	mov	r2, r4
 8002806:	6864      	ldr	r4, [r4, #4]
 8002808:	e7cc      	b.n	80027a4 <_malloc_r+0x2c>
 800280a:	1cc4      	adds	r4, r0, #3
 800280c:	f024 0403 	bic.w	r4, r4, #3
 8002810:	42a0      	cmp	r0, r4
 8002812:	d0e3      	beq.n	80027dc <_malloc_r+0x64>
 8002814:	1a21      	subs	r1, r4, r0
 8002816:	4630      	mov	r0, r6
 8002818:	f000 faf6 	bl	8002e08 <_sbrk_r>
 800281c:	3001      	adds	r0, #1
 800281e:	d1dd      	bne.n	80027dc <_malloc_r+0x64>
 8002820:	e7cf      	b.n	80027c2 <_malloc_r+0x4a>
 8002822:	bf00      	nop
 8002824:	20000090 	.word	0x20000090
 8002828:	20000094 	.word	0x20000094

0800282c <__sfputc_r>:
 800282c:	6893      	ldr	r3, [r2, #8]
 800282e:	3b01      	subs	r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	b410      	push	{r4}
 8002834:	6093      	str	r3, [r2, #8]
 8002836:	da08      	bge.n	800284a <__sfputc_r+0x1e>
 8002838:	6994      	ldr	r4, [r2, #24]
 800283a:	42a3      	cmp	r3, r4
 800283c:	db01      	blt.n	8002842 <__sfputc_r+0x16>
 800283e:	290a      	cmp	r1, #10
 8002840:	d103      	bne.n	800284a <__sfputc_r+0x1e>
 8002842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002846:	f000 bb33 	b.w	8002eb0 <__swbuf_r>
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	1c58      	adds	r0, r3, #1
 800284e:	6010      	str	r0, [r2, #0]
 8002850:	7019      	strb	r1, [r3, #0]
 8002852:	4608      	mov	r0, r1
 8002854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002858:	4770      	bx	lr

0800285a <__sfputs_r>:
 800285a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285c:	4606      	mov	r6, r0
 800285e:	460f      	mov	r7, r1
 8002860:	4614      	mov	r4, r2
 8002862:	18d5      	adds	r5, r2, r3
 8002864:	42ac      	cmp	r4, r5
 8002866:	d101      	bne.n	800286c <__sfputs_r+0x12>
 8002868:	2000      	movs	r0, #0
 800286a:	e007      	b.n	800287c <__sfputs_r+0x22>
 800286c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002870:	463a      	mov	r2, r7
 8002872:	4630      	mov	r0, r6
 8002874:	f7ff ffda 	bl	800282c <__sfputc_r>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d1f3      	bne.n	8002864 <__sfputs_r+0xa>
 800287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002880 <_vfiprintf_r>:
 8002880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002884:	460d      	mov	r5, r1
 8002886:	b09d      	sub	sp, #116	; 0x74
 8002888:	4614      	mov	r4, r2
 800288a:	4698      	mov	r8, r3
 800288c:	4606      	mov	r6, r0
 800288e:	b118      	cbz	r0, 8002898 <_vfiprintf_r+0x18>
 8002890:	6983      	ldr	r3, [r0, #24]
 8002892:	b90b      	cbnz	r3, 8002898 <_vfiprintf_r+0x18>
 8002894:	f7ff fed0 	bl	8002638 <__sinit>
 8002898:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <_vfiprintf_r+0x240>)
 800289a:	429d      	cmp	r5, r3
 800289c:	d11b      	bne.n	80028d6 <_vfiprintf_r+0x56>
 800289e:	6875      	ldr	r5, [r6, #4]
 80028a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028a2:	07d9      	lsls	r1, r3, #31
 80028a4:	d405      	bmi.n	80028b2 <_vfiprintf_r+0x32>
 80028a6:	89ab      	ldrh	r3, [r5, #12]
 80028a8:	059a      	lsls	r2, r3, #22
 80028aa:	d402      	bmi.n	80028b2 <_vfiprintf_r+0x32>
 80028ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028ae:	f7ff ff61 	bl	8002774 <__retarget_lock_acquire_recursive>
 80028b2:	89ab      	ldrh	r3, [r5, #12]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	d501      	bpl.n	80028bc <_vfiprintf_r+0x3c>
 80028b8:	692b      	ldr	r3, [r5, #16]
 80028ba:	b9eb      	cbnz	r3, 80028f8 <_vfiprintf_r+0x78>
 80028bc:	4629      	mov	r1, r5
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 fb5a 	bl	8002f78 <__swsetup_r>
 80028c4:	b1c0      	cbz	r0, 80028f8 <_vfiprintf_r+0x78>
 80028c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028c8:	07dc      	lsls	r4, r3, #31
 80028ca:	d50e      	bpl.n	80028ea <_vfiprintf_r+0x6a>
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	b01d      	add	sp, #116	; 0x74
 80028d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d6:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <_vfiprintf_r+0x244>)
 80028d8:	429d      	cmp	r5, r3
 80028da:	d101      	bne.n	80028e0 <_vfiprintf_r+0x60>
 80028dc:	68b5      	ldr	r5, [r6, #8]
 80028de:	e7df      	b.n	80028a0 <_vfiprintf_r+0x20>
 80028e0:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <_vfiprintf_r+0x248>)
 80028e2:	429d      	cmp	r5, r3
 80028e4:	bf08      	it	eq
 80028e6:	68f5      	ldreq	r5, [r6, #12]
 80028e8:	e7da      	b.n	80028a0 <_vfiprintf_r+0x20>
 80028ea:	89ab      	ldrh	r3, [r5, #12]
 80028ec:	0598      	lsls	r0, r3, #22
 80028ee:	d4ed      	bmi.n	80028cc <_vfiprintf_r+0x4c>
 80028f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028f2:	f7ff ff40 	bl	8002776 <__retarget_lock_release_recursive>
 80028f6:	e7e9      	b.n	80028cc <_vfiprintf_r+0x4c>
 80028f8:	2300      	movs	r3, #0
 80028fa:	9309      	str	r3, [sp, #36]	; 0x24
 80028fc:	2320      	movs	r3, #32
 80028fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002902:	f8cd 800c 	str.w	r8, [sp, #12]
 8002906:	2330      	movs	r3, #48	; 0x30
 8002908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002acc <_vfiprintf_r+0x24c>
 800290c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002910:	f04f 0901 	mov.w	r9, #1
 8002914:	4623      	mov	r3, r4
 8002916:	469a      	mov	sl, r3
 8002918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800291c:	b10a      	cbz	r2, 8002922 <_vfiprintf_r+0xa2>
 800291e:	2a25      	cmp	r2, #37	; 0x25
 8002920:	d1f9      	bne.n	8002916 <_vfiprintf_r+0x96>
 8002922:	ebba 0b04 	subs.w	fp, sl, r4
 8002926:	d00b      	beq.n	8002940 <_vfiprintf_r+0xc0>
 8002928:	465b      	mov	r3, fp
 800292a:	4622      	mov	r2, r4
 800292c:	4629      	mov	r1, r5
 800292e:	4630      	mov	r0, r6
 8002930:	f7ff ff93 	bl	800285a <__sfputs_r>
 8002934:	3001      	adds	r0, #1
 8002936:	f000 80aa 	beq.w	8002a8e <_vfiprintf_r+0x20e>
 800293a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800293c:	445a      	add	r2, fp
 800293e:	9209      	str	r2, [sp, #36]	; 0x24
 8002940:	f89a 3000 	ldrb.w	r3, [sl]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a2 	beq.w	8002a8e <_vfiprintf_r+0x20e>
 800294a:	2300      	movs	r3, #0
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002954:	f10a 0a01 	add.w	sl, sl, #1
 8002958:	9304      	str	r3, [sp, #16]
 800295a:	9307      	str	r3, [sp, #28]
 800295c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002960:	931a      	str	r3, [sp, #104]	; 0x68
 8002962:	4654      	mov	r4, sl
 8002964:	2205      	movs	r2, #5
 8002966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800296a:	4858      	ldr	r0, [pc, #352]	; (8002acc <_vfiprintf_r+0x24c>)
 800296c:	f7fd fc68 	bl	8000240 <memchr>
 8002970:	9a04      	ldr	r2, [sp, #16]
 8002972:	b9d8      	cbnz	r0, 80029ac <_vfiprintf_r+0x12c>
 8002974:	06d1      	lsls	r1, r2, #27
 8002976:	bf44      	itt	mi
 8002978:	2320      	movmi	r3, #32
 800297a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297e:	0713      	lsls	r3, r2, #28
 8002980:	bf44      	itt	mi
 8002982:	232b      	movmi	r3, #43	; 0x2b
 8002984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002988:	f89a 3000 	ldrb.w	r3, [sl]
 800298c:	2b2a      	cmp	r3, #42	; 0x2a
 800298e:	d015      	beq.n	80029bc <_vfiprintf_r+0x13c>
 8002990:	9a07      	ldr	r2, [sp, #28]
 8002992:	4654      	mov	r4, sl
 8002994:	2000      	movs	r0, #0
 8002996:	f04f 0c0a 	mov.w	ip, #10
 800299a:	4621      	mov	r1, r4
 800299c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029a0:	3b30      	subs	r3, #48	; 0x30
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	d94e      	bls.n	8002a44 <_vfiprintf_r+0x1c4>
 80029a6:	b1b0      	cbz	r0, 80029d6 <_vfiprintf_r+0x156>
 80029a8:	9207      	str	r2, [sp, #28]
 80029aa:	e014      	b.n	80029d6 <_vfiprintf_r+0x156>
 80029ac:	eba0 0308 	sub.w	r3, r0, r8
 80029b0:	fa09 f303 	lsl.w	r3, r9, r3
 80029b4:	4313      	orrs	r3, r2
 80029b6:	9304      	str	r3, [sp, #16]
 80029b8:	46a2      	mov	sl, r4
 80029ba:	e7d2      	b.n	8002962 <_vfiprintf_r+0xe2>
 80029bc:	9b03      	ldr	r3, [sp, #12]
 80029be:	1d19      	adds	r1, r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	9103      	str	r1, [sp, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bfbb      	ittet	lt
 80029c8:	425b      	neglt	r3, r3
 80029ca:	f042 0202 	orrlt.w	r2, r2, #2
 80029ce:	9307      	strge	r3, [sp, #28]
 80029d0:	9307      	strlt	r3, [sp, #28]
 80029d2:	bfb8      	it	lt
 80029d4:	9204      	strlt	r2, [sp, #16]
 80029d6:	7823      	ldrb	r3, [r4, #0]
 80029d8:	2b2e      	cmp	r3, #46	; 0x2e
 80029da:	d10c      	bne.n	80029f6 <_vfiprintf_r+0x176>
 80029dc:	7863      	ldrb	r3, [r4, #1]
 80029de:	2b2a      	cmp	r3, #42	; 0x2a
 80029e0:	d135      	bne.n	8002a4e <_vfiprintf_r+0x1ce>
 80029e2:	9b03      	ldr	r3, [sp, #12]
 80029e4:	1d1a      	adds	r2, r3, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	9203      	str	r2, [sp, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bfb8      	it	lt
 80029ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80029f2:	3402      	adds	r4, #2
 80029f4:	9305      	str	r3, [sp, #20]
 80029f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002adc <_vfiprintf_r+0x25c>
 80029fa:	7821      	ldrb	r1, [r4, #0]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4650      	mov	r0, sl
 8002a00:	f7fd fc1e 	bl	8000240 <memchr>
 8002a04:	b140      	cbz	r0, 8002a18 <_vfiprintf_r+0x198>
 8002a06:	2340      	movs	r3, #64	; 0x40
 8002a08:	eba0 000a 	sub.w	r0, r0, sl
 8002a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8002a10:	9b04      	ldr	r3, [sp, #16]
 8002a12:	4303      	orrs	r3, r0
 8002a14:	3401      	adds	r4, #1
 8002a16:	9304      	str	r3, [sp, #16]
 8002a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a1c:	482c      	ldr	r0, [pc, #176]	; (8002ad0 <_vfiprintf_r+0x250>)
 8002a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a22:	2206      	movs	r2, #6
 8002a24:	f7fd fc0c 	bl	8000240 <memchr>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d03f      	beq.n	8002aac <_vfiprintf_r+0x22c>
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <_vfiprintf_r+0x254>)
 8002a2e:	bb1b      	cbnz	r3, 8002a78 <_vfiprintf_r+0x1f8>
 8002a30:	9b03      	ldr	r3, [sp, #12]
 8002a32:	3307      	adds	r3, #7
 8002a34:	f023 0307 	bic.w	r3, r3, #7
 8002a38:	3308      	adds	r3, #8
 8002a3a:	9303      	str	r3, [sp, #12]
 8002a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3e:	443b      	add	r3, r7
 8002a40:	9309      	str	r3, [sp, #36]	; 0x24
 8002a42:	e767      	b.n	8002914 <_vfiprintf_r+0x94>
 8002a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a48:	460c      	mov	r4, r1
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e7a5      	b.n	800299a <_vfiprintf_r+0x11a>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	3401      	adds	r4, #1
 8002a52:	9305      	str	r3, [sp, #20]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0c0a 	mov.w	ip, #10
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a60:	3a30      	subs	r2, #48	; 0x30
 8002a62:	2a09      	cmp	r2, #9
 8002a64:	d903      	bls.n	8002a6e <_vfiprintf_r+0x1ee>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0c5      	beq.n	80029f6 <_vfiprintf_r+0x176>
 8002a6a:	9105      	str	r1, [sp, #20]
 8002a6c:	e7c3      	b.n	80029f6 <_vfiprintf_r+0x176>
 8002a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a72:	4604      	mov	r4, r0
 8002a74:	2301      	movs	r3, #1
 8002a76:	e7f0      	b.n	8002a5a <_vfiprintf_r+0x1da>
 8002a78:	ab03      	add	r3, sp, #12
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	462a      	mov	r2, r5
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <_vfiprintf_r+0x258>)
 8002a80:	a904      	add	r1, sp, #16
 8002a82:	4630      	mov	r0, r6
 8002a84:	f3af 8000 	nop.w
 8002a88:	4607      	mov	r7, r0
 8002a8a:	1c78      	adds	r0, r7, #1
 8002a8c:	d1d6      	bne.n	8002a3c <_vfiprintf_r+0x1bc>
 8002a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a90:	07d9      	lsls	r1, r3, #31
 8002a92:	d405      	bmi.n	8002aa0 <_vfiprintf_r+0x220>
 8002a94:	89ab      	ldrh	r3, [r5, #12]
 8002a96:	059a      	lsls	r2, r3, #22
 8002a98:	d402      	bmi.n	8002aa0 <_vfiprintf_r+0x220>
 8002a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a9c:	f7ff fe6b 	bl	8002776 <__retarget_lock_release_recursive>
 8002aa0:	89ab      	ldrh	r3, [r5, #12]
 8002aa2:	065b      	lsls	r3, r3, #25
 8002aa4:	f53f af12 	bmi.w	80028cc <_vfiprintf_r+0x4c>
 8002aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aaa:	e711      	b.n	80028d0 <_vfiprintf_r+0x50>
 8002aac:	ab03      	add	r3, sp, #12
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	462a      	mov	r2, r5
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <_vfiprintf_r+0x258>)
 8002ab4:	a904      	add	r1, sp, #16
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	f000 f880 	bl	8002bbc <_printf_i>
 8002abc:	e7e4      	b.n	8002a88 <_vfiprintf_r+0x208>
 8002abe:	bf00      	nop
 8002ac0:	080034ec 	.word	0x080034ec
 8002ac4:	0800350c 	.word	0x0800350c
 8002ac8:	080034cc 	.word	0x080034cc
 8002acc:	0800352c 	.word	0x0800352c
 8002ad0:	08003536 	.word	0x08003536
 8002ad4:	00000000 	.word	0x00000000
 8002ad8:	0800285b 	.word	0x0800285b
 8002adc:	08003532 	.word	0x08003532

08002ae0 <_printf_common>:
 8002ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae4:	4616      	mov	r6, r2
 8002ae6:	4699      	mov	r9, r3
 8002ae8:	688a      	ldr	r2, [r1, #8]
 8002aea:	690b      	ldr	r3, [r1, #16]
 8002aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bfb8      	it	lt
 8002af4:	4613      	movlt	r3, r2
 8002af6:	6033      	str	r3, [r6, #0]
 8002af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002afc:	4607      	mov	r7, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	b10a      	cbz	r2, 8002b06 <_printf_common+0x26>
 8002b02:	3301      	adds	r3, #1
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	0699      	lsls	r1, r3, #26
 8002b0a:	bf42      	ittt	mi
 8002b0c:	6833      	ldrmi	r3, [r6, #0]
 8002b0e:	3302      	addmi	r3, #2
 8002b10:	6033      	strmi	r3, [r6, #0]
 8002b12:	6825      	ldr	r5, [r4, #0]
 8002b14:	f015 0506 	ands.w	r5, r5, #6
 8002b18:	d106      	bne.n	8002b28 <_printf_common+0x48>
 8002b1a:	f104 0a19 	add.w	sl, r4, #25
 8002b1e:	68e3      	ldr	r3, [r4, #12]
 8002b20:	6832      	ldr	r2, [r6, #0]
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	42ab      	cmp	r3, r5
 8002b26:	dc26      	bgt.n	8002b76 <_printf_common+0x96>
 8002b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b2c:	1e13      	subs	r3, r2, #0
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	bf18      	it	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	0692      	lsls	r2, r2, #26
 8002b36:	d42b      	bmi.n	8002b90 <_printf_common+0xb0>
 8002b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	4638      	mov	r0, r7
 8002b40:	47c0      	blx	r8
 8002b42:	3001      	adds	r0, #1
 8002b44:	d01e      	beq.n	8002b84 <_printf_common+0xa4>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	68e5      	ldr	r5, [r4, #12]
 8002b4a:	6832      	ldr	r2, [r6, #0]
 8002b4c:	f003 0306 	and.w	r3, r3, #6
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	bf08      	it	eq
 8002b54:	1aad      	subeq	r5, r5, r2
 8002b56:	68a3      	ldr	r3, [r4, #8]
 8002b58:	6922      	ldr	r2, [r4, #16]
 8002b5a:	bf0c      	ite	eq
 8002b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b60:	2500      	movne	r5, #0
 8002b62:	4293      	cmp	r3, r2
 8002b64:	bfc4      	itt	gt
 8002b66:	1a9b      	subgt	r3, r3, r2
 8002b68:	18ed      	addgt	r5, r5, r3
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	341a      	adds	r4, #26
 8002b6e:	42b5      	cmp	r5, r6
 8002b70:	d11a      	bne.n	8002ba8 <_printf_common+0xc8>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e008      	b.n	8002b88 <_printf_common+0xa8>
 8002b76:	2301      	movs	r3, #1
 8002b78:	4652      	mov	r2, sl
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	4638      	mov	r0, r7
 8002b7e:	47c0      	blx	r8
 8002b80:	3001      	adds	r0, #1
 8002b82:	d103      	bne.n	8002b8c <_printf_common+0xac>
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7c6      	b.n	8002b1e <_printf_common+0x3e>
 8002b90:	18e1      	adds	r1, r4, r3
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	2030      	movs	r0, #48	; 0x30
 8002b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b9a:	4422      	add	r2, r4
 8002b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	e7c7      	b.n	8002b38 <_printf_common+0x58>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4622      	mov	r2, r4
 8002bac:	4649      	mov	r1, r9
 8002bae:	4638      	mov	r0, r7
 8002bb0:	47c0      	blx	r8
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	d0e6      	beq.n	8002b84 <_printf_common+0xa4>
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7d9      	b.n	8002b6e <_printf_common+0x8e>
	...

08002bbc <_printf_i>:
 8002bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	4691      	mov	r9, r2
 8002bc4:	7e27      	ldrb	r7, [r4, #24]
 8002bc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bc8:	2f78      	cmp	r7, #120	; 0x78
 8002bca:	4680      	mov	r8, r0
 8002bcc:	469a      	mov	sl, r3
 8002bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bd2:	d807      	bhi.n	8002be4 <_printf_i+0x28>
 8002bd4:	2f62      	cmp	r7, #98	; 0x62
 8002bd6:	d80a      	bhi.n	8002bee <_printf_i+0x32>
 8002bd8:	2f00      	cmp	r7, #0
 8002bda:	f000 80d8 	beq.w	8002d8e <_printf_i+0x1d2>
 8002bde:	2f58      	cmp	r7, #88	; 0x58
 8002be0:	f000 80a3 	beq.w	8002d2a <_printf_i+0x16e>
 8002be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bec:	e03a      	b.n	8002c64 <_printf_i+0xa8>
 8002bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bf2:	2b15      	cmp	r3, #21
 8002bf4:	d8f6      	bhi.n	8002be4 <_printf_i+0x28>
 8002bf6:	a001      	add	r0, pc, #4	; (adr r0, 8002bfc <_printf_i+0x40>)
 8002bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002c69 	.word	0x08002c69
 8002c04:	08002be5 	.word	0x08002be5
 8002c08:	08002be5 	.word	0x08002be5
 8002c0c:	08002be5 	.word	0x08002be5
 8002c10:	08002be5 	.word	0x08002be5
 8002c14:	08002c69 	.word	0x08002c69
 8002c18:	08002be5 	.word	0x08002be5
 8002c1c:	08002be5 	.word	0x08002be5
 8002c20:	08002be5 	.word	0x08002be5
 8002c24:	08002be5 	.word	0x08002be5
 8002c28:	08002d75 	.word	0x08002d75
 8002c2c:	08002c99 	.word	0x08002c99
 8002c30:	08002d57 	.word	0x08002d57
 8002c34:	08002be5 	.word	0x08002be5
 8002c38:	08002be5 	.word	0x08002be5
 8002c3c:	08002d97 	.word	0x08002d97
 8002c40:	08002be5 	.word	0x08002be5
 8002c44:	08002c99 	.word	0x08002c99
 8002c48:	08002be5 	.word	0x08002be5
 8002c4c:	08002be5 	.word	0x08002be5
 8002c50:	08002d5f 	.word	0x08002d5f
 8002c54:	680b      	ldr	r3, [r1, #0]
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	600a      	str	r2, [r1, #0]
 8002c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0a3      	b.n	8002db0 <_printf_i+0x1f4>
 8002c68:	6825      	ldr	r5, [r4, #0]
 8002c6a:	6808      	ldr	r0, [r1, #0]
 8002c6c:	062e      	lsls	r6, r5, #24
 8002c6e:	f100 0304 	add.w	r3, r0, #4
 8002c72:	d50a      	bpl.n	8002c8a <_printf_i+0xce>
 8002c74:	6805      	ldr	r5, [r0, #0]
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	da03      	bge.n	8002c84 <_printf_i+0xc8>
 8002c7c:	232d      	movs	r3, #45	; 0x2d
 8002c7e:	426d      	negs	r5, r5
 8002c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c84:	485e      	ldr	r0, [pc, #376]	; (8002e00 <_printf_i+0x244>)
 8002c86:	230a      	movs	r3, #10
 8002c88:	e019      	b.n	8002cbe <_printf_i+0x102>
 8002c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c8e:	6805      	ldr	r5, [r0, #0]
 8002c90:	600b      	str	r3, [r1, #0]
 8002c92:	bf18      	it	ne
 8002c94:	b22d      	sxthne	r5, r5
 8002c96:	e7ef      	b.n	8002c78 <_printf_i+0xbc>
 8002c98:	680b      	ldr	r3, [r1, #0]
 8002c9a:	6825      	ldr	r5, [r4, #0]
 8002c9c:	1d18      	adds	r0, r3, #4
 8002c9e:	6008      	str	r0, [r1, #0]
 8002ca0:	0628      	lsls	r0, r5, #24
 8002ca2:	d501      	bpl.n	8002ca8 <_printf_i+0xec>
 8002ca4:	681d      	ldr	r5, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <_printf_i+0xf2>
 8002ca8:	0669      	lsls	r1, r5, #25
 8002caa:	d5fb      	bpl.n	8002ca4 <_printf_i+0xe8>
 8002cac:	881d      	ldrh	r5, [r3, #0]
 8002cae:	4854      	ldr	r0, [pc, #336]	; (8002e00 <_printf_i+0x244>)
 8002cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2308      	moveq	r3, #8
 8002cb6:	230a      	movne	r3, #10
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cbe:	6866      	ldr	r6, [r4, #4]
 8002cc0:	60a6      	str	r6, [r4, #8]
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	bfa2      	ittt	ge
 8002cc6:	6821      	ldrge	r1, [r4, #0]
 8002cc8:	f021 0104 	bicge.w	r1, r1, #4
 8002ccc:	6021      	strge	r1, [r4, #0]
 8002cce:	b90d      	cbnz	r5, 8002cd4 <_printf_i+0x118>
 8002cd0:	2e00      	cmp	r6, #0
 8002cd2:	d04d      	beq.n	8002d70 <_printf_i+0x1b4>
 8002cd4:	4616      	mov	r6, r2
 8002cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cda:	fb03 5711 	mls	r7, r3, r1, r5
 8002cde:	5dc7      	ldrb	r7, [r0, r7]
 8002ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ce4:	462f      	mov	r7, r5
 8002ce6:	42bb      	cmp	r3, r7
 8002ce8:	460d      	mov	r5, r1
 8002cea:	d9f4      	bls.n	8002cd6 <_printf_i+0x11a>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d10b      	bne.n	8002d08 <_printf_i+0x14c>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	07df      	lsls	r7, r3, #31
 8002cf4:	d508      	bpl.n	8002d08 <_printf_i+0x14c>
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	6861      	ldr	r1, [r4, #4]
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	bfde      	ittt	le
 8002cfe:	2330      	movle	r3, #48	; 0x30
 8002d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d08:	1b92      	subs	r2, r2, r6
 8002d0a:	6122      	str	r2, [r4, #16]
 8002d0c:	f8cd a000 	str.w	sl, [sp]
 8002d10:	464b      	mov	r3, r9
 8002d12:	aa03      	add	r2, sp, #12
 8002d14:	4621      	mov	r1, r4
 8002d16:	4640      	mov	r0, r8
 8002d18:	f7ff fee2 	bl	8002ae0 <_printf_common>
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d14c      	bne.n	8002dba <_printf_i+0x1fe>
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	b004      	add	sp, #16
 8002d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2a:	4835      	ldr	r0, [pc, #212]	; (8002e00 <_printf_i+0x244>)
 8002d2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	680e      	ldr	r6, [r1, #0]
 8002d34:	061f      	lsls	r7, r3, #24
 8002d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d3a:	600e      	str	r6, [r1, #0]
 8002d3c:	d514      	bpl.n	8002d68 <_printf_i+0x1ac>
 8002d3e:	07d9      	lsls	r1, r3, #31
 8002d40:	bf44      	itt	mi
 8002d42:	f043 0320 	orrmi.w	r3, r3, #32
 8002d46:	6023      	strmi	r3, [r4, #0]
 8002d48:	b91d      	cbnz	r5, 8002d52 <_printf_i+0x196>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f023 0320 	bic.w	r3, r3, #32
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	2310      	movs	r3, #16
 8002d54:	e7b0      	b.n	8002cb8 <_printf_i+0xfc>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f043 0320 	orr.w	r3, r3, #32
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	2378      	movs	r3, #120	; 0x78
 8002d60:	4828      	ldr	r0, [pc, #160]	; (8002e04 <_printf_i+0x248>)
 8002d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d66:	e7e3      	b.n	8002d30 <_printf_i+0x174>
 8002d68:	065e      	lsls	r6, r3, #25
 8002d6a:	bf48      	it	mi
 8002d6c:	b2ad      	uxthmi	r5, r5
 8002d6e:	e7e6      	b.n	8002d3e <_printf_i+0x182>
 8002d70:	4616      	mov	r6, r2
 8002d72:	e7bb      	b.n	8002cec <_printf_i+0x130>
 8002d74:	680b      	ldr	r3, [r1, #0]
 8002d76:	6826      	ldr	r6, [r4, #0]
 8002d78:	6960      	ldr	r0, [r4, #20]
 8002d7a:	1d1d      	adds	r5, r3, #4
 8002d7c:	600d      	str	r5, [r1, #0]
 8002d7e:	0635      	lsls	r5, r6, #24
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	d501      	bpl.n	8002d88 <_printf_i+0x1cc>
 8002d84:	6018      	str	r0, [r3, #0]
 8002d86:	e002      	b.n	8002d8e <_printf_i+0x1d2>
 8002d88:	0671      	lsls	r1, r6, #25
 8002d8a:	d5fb      	bpl.n	8002d84 <_printf_i+0x1c8>
 8002d8c:	8018      	strh	r0, [r3, #0]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6123      	str	r3, [r4, #16]
 8002d92:	4616      	mov	r6, r2
 8002d94:	e7ba      	b.n	8002d0c <_printf_i+0x150>
 8002d96:	680b      	ldr	r3, [r1, #0]
 8002d98:	1d1a      	adds	r2, r3, #4
 8002d9a:	600a      	str	r2, [r1, #0]
 8002d9c:	681e      	ldr	r6, [r3, #0]
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4630      	mov	r0, r6
 8002da4:	f7fd fa4c 	bl	8000240 <memchr>
 8002da8:	b108      	cbz	r0, 8002dae <_printf_i+0x1f2>
 8002daa:	1b80      	subs	r0, r0, r6
 8002dac:	6060      	str	r0, [r4, #4]
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	6123      	str	r3, [r4, #16]
 8002db2:	2300      	movs	r3, #0
 8002db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db8:	e7a8      	b.n	8002d0c <_printf_i+0x150>
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	47d0      	blx	sl
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d0ab      	beq.n	8002d20 <_printf_i+0x164>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	079b      	lsls	r3, r3, #30
 8002dcc:	d413      	bmi.n	8002df6 <_printf_i+0x23a>
 8002dce:	68e0      	ldr	r0, [r4, #12]
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	bfb8      	it	lt
 8002dd6:	4618      	movlt	r0, r3
 8002dd8:	e7a4      	b.n	8002d24 <_printf_i+0x168>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	4632      	mov	r2, r6
 8002dde:	4649      	mov	r1, r9
 8002de0:	4640      	mov	r0, r8
 8002de2:	47d0      	blx	sl
 8002de4:	3001      	adds	r0, #1
 8002de6:	d09b      	beq.n	8002d20 <_printf_i+0x164>
 8002de8:	3501      	adds	r5, #1
 8002dea:	68e3      	ldr	r3, [r4, #12]
 8002dec:	9903      	ldr	r1, [sp, #12]
 8002dee:	1a5b      	subs	r3, r3, r1
 8002df0:	42ab      	cmp	r3, r5
 8002df2:	dcf2      	bgt.n	8002dda <_printf_i+0x21e>
 8002df4:	e7eb      	b.n	8002dce <_printf_i+0x212>
 8002df6:	2500      	movs	r5, #0
 8002df8:	f104 0619 	add.w	r6, r4, #25
 8002dfc:	e7f5      	b.n	8002dea <_printf_i+0x22e>
 8002dfe:	bf00      	nop
 8002e00:	0800353d 	.word	0x0800353d
 8002e04:	0800354e 	.word	0x0800354e

08002e08 <_sbrk_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d06      	ldr	r5, [pc, #24]	; (8002e24 <_sbrk_r+0x1c>)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f000 fb1e 	bl	8003454 <_sbrk>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_sbrk_r+0x1a>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_sbrk_r+0x1a>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000148 	.word	0x20000148

08002e28 <__sread>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e30:	f000 fab4 	bl	800339c <_read_r>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	bfab      	itete	ge
 8002e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e3c:	181b      	addge	r3, r3, r0
 8002e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e42:	bfac      	ite	ge
 8002e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e46:	81a3      	strhlt	r3, [r4, #12]
 8002e48:	bd10      	pop	{r4, pc}

08002e4a <__swrite>:
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	461f      	mov	r7, r3
 8002e50:	898b      	ldrh	r3, [r1, #12]
 8002e52:	05db      	lsls	r3, r3, #23
 8002e54:	4605      	mov	r5, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	4616      	mov	r6, r2
 8002e5a:	d505      	bpl.n	8002e68 <__swrite+0x1e>
 8002e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e60:	2302      	movs	r3, #2
 8002e62:	2200      	movs	r2, #0
 8002e64:	f000 f9c8 	bl	80031f8 <_lseek_r>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e72:	81a3      	strh	r3, [r4, #12]
 8002e74:	4632      	mov	r2, r6
 8002e76:	463b      	mov	r3, r7
 8002e78:	4628      	mov	r0, r5
 8002e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7e:	f000 b869 	b.w	8002f54 <_write_r>

08002e82 <__sseek>:
 8002e82:	b510      	push	{r4, lr}
 8002e84:	460c      	mov	r4, r1
 8002e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8a:	f000 f9b5 	bl	80031f8 <_lseek_r>
 8002e8e:	1c43      	adds	r3, r0, #1
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	bf15      	itete	ne
 8002e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e9e:	81a3      	strheq	r3, [r4, #12]
 8002ea0:	bf18      	it	ne
 8002ea2:	81a3      	strhne	r3, [r4, #12]
 8002ea4:	bd10      	pop	{r4, pc}

08002ea6 <__sclose>:
 8002ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eaa:	f000 b8d3 	b.w	8003054 <_close_r>
	...

08002eb0 <__swbuf_r>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	b118      	cbz	r0, 8002ec2 <__swbuf_r+0x12>
 8002eba:	6983      	ldr	r3, [r0, #24]
 8002ebc:	b90b      	cbnz	r3, 8002ec2 <__swbuf_r+0x12>
 8002ebe:	f7ff fbbb 	bl	8002638 <__sinit>
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <__swbuf_r+0x98>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d12b      	bne.n	8002f20 <__swbuf_r+0x70>
 8002ec8:	686c      	ldr	r4, [r5, #4]
 8002eca:	69a3      	ldr	r3, [r4, #24]
 8002ecc:	60a3      	str	r3, [r4, #8]
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	071a      	lsls	r2, r3, #28
 8002ed2:	d52f      	bpl.n	8002f34 <__swbuf_r+0x84>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	b36b      	cbz	r3, 8002f34 <__swbuf_r+0x84>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	1ac0      	subs	r0, r0, r3
 8002ede:	6963      	ldr	r3, [r4, #20]
 8002ee0:	b2f6      	uxtb	r6, r6
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	4637      	mov	r7, r6
 8002ee6:	dc04      	bgt.n	8002ef2 <__swbuf_r+0x42>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4628      	mov	r0, r5
 8002eec:	f000 f948 	bl	8003180 <_fflush_r>
 8002ef0:	bb30      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	6022      	str	r2, [r4, #0]
 8002efe:	701e      	strb	r6, [r3, #0]
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	3001      	adds	r0, #1
 8002f04:	4283      	cmp	r3, r0
 8002f06:	d004      	beq.n	8002f12 <__swbuf_r+0x62>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	d506      	bpl.n	8002f1c <__swbuf_r+0x6c>
 8002f0e:	2e0a      	cmp	r6, #10
 8002f10:	d104      	bne.n	8002f1c <__swbuf_r+0x6c>
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f933 	bl	8003180 <_fflush_r>
 8002f1a:	b988      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <__swbuf_r+0x9c>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	d101      	bne.n	8002f2a <__swbuf_r+0x7a>
 8002f26:	68ac      	ldr	r4, [r5, #8]
 8002f28:	e7cf      	b.n	8002eca <__swbuf_r+0x1a>
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <__swbuf_r+0xa0>)
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	bf08      	it	eq
 8002f30:	68ec      	ldreq	r4, [r5, #12]
 8002f32:	e7ca      	b.n	8002eca <__swbuf_r+0x1a>
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 f81e 	bl	8002f78 <__swsetup_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0cb      	beq.n	8002ed8 <__swbuf_r+0x28>
 8002f40:	f04f 37ff 	mov.w	r7, #4294967295
 8002f44:	e7ea      	b.n	8002f1c <__swbuf_r+0x6c>
 8002f46:	bf00      	nop
 8002f48:	080034ec 	.word	0x080034ec
 8002f4c:	0800350c 	.word	0x0800350c
 8002f50:	080034cc 	.word	0x080034cc

08002f54 <_write_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d07      	ldr	r5, [pc, #28]	; (8002f74 <_write_r+0x20>)
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	602a      	str	r2, [r5, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fd fb8a 	bl	800067c <_write>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_write_r+0x1e>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_write_r+0x1e>
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	20000148 	.word	0x20000148

08002f78 <__swsetup_r>:
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <__swsetup_r+0xcc>)
 8002f7a:	b570      	push	{r4, r5, r6, lr}
 8002f7c:	681d      	ldr	r5, [r3, #0]
 8002f7e:	4606      	mov	r6, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	b125      	cbz	r5, 8002f8e <__swsetup_r+0x16>
 8002f84:	69ab      	ldr	r3, [r5, #24]
 8002f86:	b913      	cbnz	r3, 8002f8e <__swsetup_r+0x16>
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f7ff fb55 	bl	8002638 <__sinit>
 8002f8e:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <__swsetup_r+0xd0>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d10f      	bne.n	8002fb4 <__swsetup_r+0x3c>
 8002f94:	686c      	ldr	r4, [r5, #4]
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f9c:	0719      	lsls	r1, r3, #28
 8002f9e:	d42c      	bmi.n	8002ffa <__swsetup_r+0x82>
 8002fa0:	06dd      	lsls	r5, r3, #27
 8002fa2:	d411      	bmi.n	8002fc8 <__swsetup_r+0x50>
 8002fa4:	2309      	movs	r3, #9
 8002fa6:	6033      	str	r3, [r6, #0]
 8002fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb2:	e03e      	b.n	8003032 <__swsetup_r+0xba>
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <__swsetup_r+0xd4>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	d101      	bne.n	8002fbe <__swsetup_r+0x46>
 8002fba:	68ac      	ldr	r4, [r5, #8]
 8002fbc:	e7eb      	b.n	8002f96 <__swsetup_r+0x1e>
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <__swsetup_r+0xd8>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	bf08      	it	eq
 8002fc4:	68ec      	ldreq	r4, [r5, #12]
 8002fc6:	e7e6      	b.n	8002f96 <__swsetup_r+0x1e>
 8002fc8:	0758      	lsls	r0, r3, #29
 8002fca:	d512      	bpl.n	8002ff2 <__swsetup_r+0x7a>
 8002fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fce:	b141      	cbz	r1, 8002fe2 <__swsetup_r+0x6a>
 8002fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	d002      	beq.n	8002fde <__swsetup_r+0x66>
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 f98f 	bl	80032fc <_free_r>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	2300      	movs	r3, #0
 8002fec:	6063      	str	r3, [r4, #4]
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	81a3      	strh	r3, [r4, #12]
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	b94b      	cbnz	r3, 8003012 <__swsetup_r+0x9a>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d003      	beq.n	8003012 <__swsetup_r+0x9a>
 800300a:	4621      	mov	r1, r4
 800300c:	4630      	mov	r0, r6
 800300e:	f000 f929 	bl	8003264 <__smakebuf_r>
 8003012:	89a0      	ldrh	r0, [r4, #12]
 8003014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003018:	f010 0301 	ands.w	r3, r0, #1
 800301c:	d00a      	beq.n	8003034 <__swsetup_r+0xbc>
 800301e:	2300      	movs	r3, #0
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	425b      	negs	r3, r3
 8003026:	61a3      	str	r3, [r4, #24]
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	b943      	cbnz	r3, 800303e <__swsetup_r+0xc6>
 800302c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003030:	d1ba      	bne.n	8002fa8 <__swsetup_r+0x30>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	0781      	lsls	r1, r0, #30
 8003036:	bf58      	it	pl
 8003038:	6963      	ldrpl	r3, [r4, #20]
 800303a:	60a3      	str	r3, [r4, #8]
 800303c:	e7f4      	b.n	8003028 <__swsetup_r+0xb0>
 800303e:	2000      	movs	r0, #0
 8003040:	e7f7      	b.n	8003032 <__swsetup_r+0xba>
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c
 8003048:	080034ec 	.word	0x080034ec
 800304c:	0800350c 	.word	0x0800350c
 8003050:	080034cc 	.word	0x080034cc

08003054 <_close_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4d06      	ldr	r5, [pc, #24]	; (8003070 <_close_r+0x1c>)
 8003058:	2300      	movs	r3, #0
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	f000 f9d0 	bl	8003404 <_close>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_close_r+0x1a>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_close_r+0x1a>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20000148 	.word	0x20000148

08003074 <__sflush_r>:
 8003074:	898a      	ldrh	r2, [r1, #12]
 8003076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307a:	4605      	mov	r5, r0
 800307c:	0710      	lsls	r0, r2, #28
 800307e:	460c      	mov	r4, r1
 8003080:	d458      	bmi.n	8003134 <__sflush_r+0xc0>
 8003082:	684b      	ldr	r3, [r1, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dc05      	bgt.n	8003094 <__sflush_r+0x20>
 8003088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	dc02      	bgt.n	8003094 <__sflush_r+0x20>
 800308e:	2000      	movs	r0, #0
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003096:	2e00      	cmp	r6, #0
 8003098:	d0f9      	beq.n	800308e <__sflush_r+0x1a>
 800309a:	2300      	movs	r3, #0
 800309c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030a0:	682f      	ldr	r7, [r5, #0]
 80030a2:	602b      	str	r3, [r5, #0]
 80030a4:	d032      	beq.n	800310c <__sflush_r+0x98>
 80030a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	075a      	lsls	r2, r3, #29
 80030ac:	d505      	bpl.n	80030ba <__sflush_r+0x46>
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	1ac0      	subs	r0, r0, r3
 80030b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030b4:	b10b      	cbz	r3, 80030ba <__sflush_r+0x46>
 80030b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b8:	1ac0      	subs	r0, r0, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	4602      	mov	r2, r0
 80030be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030c0:	6a21      	ldr	r1, [r4, #32]
 80030c2:	4628      	mov	r0, r5
 80030c4:	47b0      	blx	r6
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	d106      	bne.n	80030da <__sflush_r+0x66>
 80030cc:	6829      	ldr	r1, [r5, #0]
 80030ce:	291d      	cmp	r1, #29
 80030d0:	d82c      	bhi.n	800312c <__sflush_r+0xb8>
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <__sflush_r+0x108>)
 80030d4:	40ca      	lsrs	r2, r1
 80030d6:	07d6      	lsls	r6, r2, #31
 80030d8:	d528      	bpl.n	800312c <__sflush_r+0xb8>
 80030da:	2200      	movs	r2, #0
 80030dc:	6062      	str	r2, [r4, #4]
 80030de:	04d9      	lsls	r1, r3, #19
 80030e0:	6922      	ldr	r2, [r4, #16]
 80030e2:	6022      	str	r2, [r4, #0]
 80030e4:	d504      	bpl.n	80030f0 <__sflush_r+0x7c>
 80030e6:	1c42      	adds	r2, r0, #1
 80030e8:	d101      	bne.n	80030ee <__sflush_r+0x7a>
 80030ea:	682b      	ldr	r3, [r5, #0]
 80030ec:	b903      	cbnz	r3, 80030f0 <__sflush_r+0x7c>
 80030ee:	6560      	str	r0, [r4, #84]	; 0x54
 80030f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030f2:	602f      	str	r7, [r5, #0]
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d0ca      	beq.n	800308e <__sflush_r+0x1a>
 80030f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030fc:	4299      	cmp	r1, r3
 80030fe:	d002      	beq.n	8003106 <__sflush_r+0x92>
 8003100:	4628      	mov	r0, r5
 8003102:	f000 f8fb 	bl	80032fc <_free_r>
 8003106:	2000      	movs	r0, #0
 8003108:	6360      	str	r0, [r4, #52]	; 0x34
 800310a:	e7c1      	b.n	8003090 <__sflush_r+0x1c>
 800310c:	6a21      	ldr	r1, [r4, #32]
 800310e:	2301      	movs	r3, #1
 8003110:	4628      	mov	r0, r5
 8003112:	47b0      	blx	r6
 8003114:	1c41      	adds	r1, r0, #1
 8003116:	d1c7      	bne.n	80030a8 <__sflush_r+0x34>
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0c4      	beq.n	80030a8 <__sflush_r+0x34>
 800311e:	2b1d      	cmp	r3, #29
 8003120:	d001      	beq.n	8003126 <__sflush_r+0xb2>
 8003122:	2b16      	cmp	r3, #22
 8003124:	d101      	bne.n	800312a <__sflush_r+0xb6>
 8003126:	602f      	str	r7, [r5, #0]
 8003128:	e7b1      	b.n	800308e <__sflush_r+0x1a>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	e7ad      	b.n	8003090 <__sflush_r+0x1c>
 8003134:	690f      	ldr	r7, [r1, #16]
 8003136:	2f00      	cmp	r7, #0
 8003138:	d0a9      	beq.n	800308e <__sflush_r+0x1a>
 800313a:	0793      	lsls	r3, r2, #30
 800313c:	680e      	ldr	r6, [r1, #0]
 800313e:	bf08      	it	eq
 8003140:	694b      	ldreq	r3, [r1, #20]
 8003142:	600f      	str	r7, [r1, #0]
 8003144:	bf18      	it	ne
 8003146:	2300      	movne	r3, #0
 8003148:	eba6 0807 	sub.w	r8, r6, r7
 800314c:	608b      	str	r3, [r1, #8]
 800314e:	f1b8 0f00 	cmp.w	r8, #0
 8003152:	dd9c      	ble.n	800308e <__sflush_r+0x1a>
 8003154:	6a21      	ldr	r1, [r4, #32]
 8003156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003158:	4643      	mov	r3, r8
 800315a:	463a      	mov	r2, r7
 800315c:	4628      	mov	r0, r5
 800315e:	47b0      	blx	r6
 8003160:	2800      	cmp	r0, #0
 8003162:	dc06      	bgt.n	8003172 <__sflush_r+0xfe>
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800316a:	81a3      	strh	r3, [r4, #12]
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	e78e      	b.n	8003090 <__sflush_r+0x1c>
 8003172:	4407      	add	r7, r0
 8003174:	eba8 0800 	sub.w	r8, r8, r0
 8003178:	e7e9      	b.n	800314e <__sflush_r+0xda>
 800317a:	bf00      	nop
 800317c:	20400001 	.word	0x20400001

08003180 <_fflush_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	690b      	ldr	r3, [r1, #16]
 8003184:	4605      	mov	r5, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b913      	cbnz	r3, 8003190 <_fflush_r+0x10>
 800318a:	2500      	movs	r5, #0
 800318c:	4628      	mov	r0, r5
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	b118      	cbz	r0, 800319a <_fflush_r+0x1a>
 8003192:	6983      	ldr	r3, [r0, #24]
 8003194:	b90b      	cbnz	r3, 800319a <_fflush_r+0x1a>
 8003196:	f7ff fa4f 	bl	8002638 <__sinit>
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <_fflush_r+0x6c>)
 800319c:	429c      	cmp	r4, r3
 800319e:	d11b      	bne.n	80031d8 <_fflush_r+0x58>
 80031a0:	686c      	ldr	r4, [r5, #4]
 80031a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ef      	beq.n	800318a <_fflush_r+0xa>
 80031aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031ac:	07d0      	lsls	r0, r2, #31
 80031ae:	d404      	bmi.n	80031ba <_fflush_r+0x3a>
 80031b0:	0599      	lsls	r1, r3, #22
 80031b2:	d402      	bmi.n	80031ba <_fflush_r+0x3a>
 80031b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031b6:	f7ff fadd 	bl	8002774 <__retarget_lock_acquire_recursive>
 80031ba:	4628      	mov	r0, r5
 80031bc:	4621      	mov	r1, r4
 80031be:	f7ff ff59 	bl	8003074 <__sflush_r>
 80031c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c4:	07da      	lsls	r2, r3, #31
 80031c6:	4605      	mov	r5, r0
 80031c8:	d4e0      	bmi.n	800318c <_fflush_r+0xc>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	059b      	lsls	r3, r3, #22
 80031ce:	d4dd      	bmi.n	800318c <_fflush_r+0xc>
 80031d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031d2:	f7ff fad0 	bl	8002776 <__retarget_lock_release_recursive>
 80031d6:	e7d9      	b.n	800318c <_fflush_r+0xc>
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <_fflush_r+0x70>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d101      	bne.n	80031e2 <_fflush_r+0x62>
 80031de:	68ac      	ldr	r4, [r5, #8]
 80031e0:	e7df      	b.n	80031a2 <_fflush_r+0x22>
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <_fflush_r+0x74>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	bf08      	it	eq
 80031e8:	68ec      	ldreq	r4, [r5, #12]
 80031ea:	e7da      	b.n	80031a2 <_fflush_r+0x22>
 80031ec:	080034ec 	.word	0x080034ec
 80031f0:	0800350c 	.word	0x0800350c
 80031f4:	080034cc 	.word	0x080034cc

080031f8 <_lseek_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4d07      	ldr	r5, [pc, #28]	; (8003218 <_lseek_r+0x20>)
 80031fc:	4604      	mov	r4, r0
 80031fe:	4608      	mov	r0, r1
 8003200:	4611      	mov	r1, r2
 8003202:	2200      	movs	r2, #0
 8003204:	602a      	str	r2, [r5, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f914 	bl	8003434 <_lseek>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d102      	bne.n	8003216 <_lseek_r+0x1e>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b103      	cbz	r3, 8003216 <_lseek_r+0x1e>
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	20000148 	.word	0x20000148

0800321c <__swhatbuf_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	460e      	mov	r6, r1
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	2900      	cmp	r1, #0
 8003226:	b096      	sub	sp, #88	; 0x58
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	da07      	bge.n	800323e <__swhatbuf_r+0x22>
 800322e:	2300      	movs	r3, #0
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	89b3      	ldrh	r3, [r6, #12]
 8003234:	061a      	lsls	r2, r3, #24
 8003236:	d410      	bmi.n	800325a <__swhatbuf_r+0x3e>
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	e00e      	b.n	800325c <__swhatbuf_r+0x40>
 800323e:	466a      	mov	r2, sp
 8003240:	f000 f8be 	bl	80033c0 <_fstat_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	dbf2      	blt.n	800322e <__swhatbuf_r+0x12>
 8003248:	9a01      	ldr	r2, [sp, #4]
 800324a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800324e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003252:	425a      	negs	r2, r3
 8003254:	415a      	adcs	r2, r3
 8003256:	602a      	str	r2, [r5, #0]
 8003258:	e7ee      	b.n	8003238 <__swhatbuf_r+0x1c>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	2000      	movs	r0, #0
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	b016      	add	sp, #88	; 0x58
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <__smakebuf_r>:
 8003264:	898b      	ldrh	r3, [r1, #12]
 8003266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003268:	079d      	lsls	r5, r3, #30
 800326a:	4606      	mov	r6, r0
 800326c:	460c      	mov	r4, r1
 800326e:	d507      	bpl.n	8003280 <__smakebuf_r+0x1c>
 8003270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	6123      	str	r3, [r4, #16]
 8003278:	2301      	movs	r3, #1
 800327a:	6163      	str	r3, [r4, #20]
 800327c:	b002      	add	sp, #8
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	ab01      	add	r3, sp, #4
 8003282:	466a      	mov	r2, sp
 8003284:	f7ff ffca 	bl	800321c <__swhatbuf_r>
 8003288:	9900      	ldr	r1, [sp, #0]
 800328a:	4605      	mov	r5, r0
 800328c:	4630      	mov	r0, r6
 800328e:	f7ff fa73 	bl	8002778 <_malloc_r>
 8003292:	b948      	cbnz	r0, 80032a8 <__smakebuf_r+0x44>
 8003294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003298:	059a      	lsls	r2, r3, #22
 800329a:	d4ef      	bmi.n	800327c <__smakebuf_r+0x18>
 800329c:	f023 0303 	bic.w	r3, r3, #3
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	e7e3      	b.n	8003270 <__smakebuf_r+0xc>
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <__smakebuf_r+0x7c>)
 80032aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	6020      	str	r0, [r4, #0]
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	9b00      	ldr	r3, [sp, #0]
 80032b8:	6163      	str	r3, [r4, #20]
 80032ba:	9b01      	ldr	r3, [sp, #4]
 80032bc:	6120      	str	r0, [r4, #16]
 80032be:	b15b      	cbz	r3, 80032d8 <__smakebuf_r+0x74>
 80032c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f88d 	bl	80033e4 <_isatty_r>
 80032ca:	b128      	cbz	r0, 80032d8 <__smakebuf_r+0x74>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	89a0      	ldrh	r0, [r4, #12]
 80032da:	4305      	orrs	r5, r0
 80032dc:	81a5      	strh	r5, [r4, #12]
 80032de:	e7cd      	b.n	800327c <__smakebuf_r+0x18>
 80032e0:	080025d1 	.word	0x080025d1

080032e4 <__malloc_lock>:
 80032e4:	4801      	ldr	r0, [pc, #4]	; (80032ec <__malloc_lock+0x8>)
 80032e6:	f7ff ba45 	b.w	8002774 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	20000140 	.word	0x20000140

080032f0 <__malloc_unlock>:
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <__malloc_unlock+0x8>)
 80032f2:	f7ff ba40 	b.w	8002776 <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	20000140 	.word	0x20000140

080032fc <_free_r>:
 80032fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032fe:	2900      	cmp	r1, #0
 8003300:	d048      	beq.n	8003394 <_free_r+0x98>
 8003302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003306:	9001      	str	r0, [sp, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f1a1 0404 	sub.w	r4, r1, #4
 800330e:	bfb8      	it	lt
 8003310:	18e4      	addlt	r4, r4, r3
 8003312:	f7ff ffe7 	bl	80032e4 <__malloc_lock>
 8003316:	4a20      	ldr	r2, [pc, #128]	; (8003398 <_free_r+0x9c>)
 8003318:	9801      	ldr	r0, [sp, #4]
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	4615      	mov	r5, r2
 800331e:	b933      	cbnz	r3, 800332e <_free_r+0x32>
 8003320:	6063      	str	r3, [r4, #4]
 8003322:	6014      	str	r4, [r2, #0]
 8003324:	b003      	add	sp, #12
 8003326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800332a:	f7ff bfe1 	b.w	80032f0 <__malloc_unlock>
 800332e:	42a3      	cmp	r3, r4
 8003330:	d90b      	bls.n	800334a <_free_r+0x4e>
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	1862      	adds	r2, r4, r1
 8003336:	4293      	cmp	r3, r2
 8003338:	bf04      	itt	eq
 800333a:	681a      	ldreq	r2, [r3, #0]
 800333c:	685b      	ldreq	r3, [r3, #4]
 800333e:	6063      	str	r3, [r4, #4]
 8003340:	bf04      	itt	eq
 8003342:	1852      	addeq	r2, r2, r1
 8003344:	6022      	streq	r2, [r4, #0]
 8003346:	602c      	str	r4, [r5, #0]
 8003348:	e7ec      	b.n	8003324 <_free_r+0x28>
 800334a:	461a      	mov	r2, r3
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	b10b      	cbz	r3, 8003354 <_free_r+0x58>
 8003350:	42a3      	cmp	r3, r4
 8003352:	d9fa      	bls.n	800334a <_free_r+0x4e>
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	1855      	adds	r5, r2, r1
 8003358:	42a5      	cmp	r5, r4
 800335a:	d10b      	bne.n	8003374 <_free_r+0x78>
 800335c:	6824      	ldr	r4, [r4, #0]
 800335e:	4421      	add	r1, r4
 8003360:	1854      	adds	r4, r2, r1
 8003362:	42a3      	cmp	r3, r4
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	d1dd      	bne.n	8003324 <_free_r+0x28>
 8003368:	681c      	ldr	r4, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	6053      	str	r3, [r2, #4]
 800336e:	4421      	add	r1, r4
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	e7d7      	b.n	8003324 <_free_r+0x28>
 8003374:	d902      	bls.n	800337c <_free_r+0x80>
 8003376:	230c      	movs	r3, #12
 8003378:	6003      	str	r3, [r0, #0]
 800337a:	e7d3      	b.n	8003324 <_free_r+0x28>
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	1961      	adds	r1, r4, r5
 8003380:	428b      	cmp	r3, r1
 8003382:	bf04      	itt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	bf04      	itt	eq
 800338c:	1949      	addeq	r1, r1, r5
 800338e:	6021      	streq	r1, [r4, #0]
 8003390:	6054      	str	r4, [r2, #4]
 8003392:	e7c7      	b.n	8003324 <_free_r+0x28>
 8003394:	b003      	add	sp, #12
 8003396:	bd30      	pop	{r4, r5, pc}
 8003398:	20000090 	.word	0x20000090

0800339c <_read_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	4d07      	ldr	r5, [pc, #28]	; (80033bc <_read_r+0x20>)
 80033a0:	4604      	mov	r4, r0
 80033a2:	4608      	mov	r0, r1
 80033a4:	4611      	mov	r1, r2
 80033a6:	2200      	movs	r2, #0
 80033a8:	602a      	str	r2, [r5, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 f84a 	bl	8003444 <_read>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d102      	bne.n	80033ba <_read_r+0x1e>
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	b103      	cbz	r3, 80033ba <_read_r+0x1e>
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	bd38      	pop	{r3, r4, r5, pc}
 80033bc:	20000148 	.word	0x20000148

080033c0 <_fstat_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4d07      	ldr	r5, [pc, #28]	; (80033e0 <_fstat_r+0x20>)
 80033c4:	2300      	movs	r3, #0
 80033c6:	4604      	mov	r4, r0
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	f000 f821 	bl	8003414 <_fstat>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	d102      	bne.n	80033dc <_fstat_r+0x1c>
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	b103      	cbz	r3, 80033dc <_fstat_r+0x1c>
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	20000148 	.word	0x20000148

080033e4 <_isatty_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4d06      	ldr	r5, [pc, #24]	; (8003400 <_isatty_r+0x1c>)
 80033e8:	2300      	movs	r3, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	f000 f818 	bl	8003424 <_isatty>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_isatty_r+0x1a>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_isatty_r+0x1a>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	20000148 	.word	0x20000148

08003404 <_close>:
 8003404:	4b02      	ldr	r3, [pc, #8]	; (8003410 <_close+0xc>)
 8003406:	2258      	movs	r2, #88	; 0x58
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	4770      	bx	lr
 8003410:	20000148 	.word	0x20000148

08003414 <_fstat>:
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <_fstat+0xc>)
 8003416:	2258      	movs	r2, #88	; 0x58
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	4770      	bx	lr
 8003420:	20000148 	.word	0x20000148

08003424 <_isatty>:
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <_isatty+0xc>)
 8003426:	2258      	movs	r2, #88	; 0x58
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	2000      	movs	r0, #0
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000148 	.word	0x20000148

08003434 <_lseek>:
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <_lseek+0xc>)
 8003436:	2258      	movs	r2, #88	; 0x58
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	4770      	bx	lr
 8003440:	20000148 	.word	0x20000148

08003444 <_read>:
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <_read+0xc>)
 8003446:	2258      	movs	r2, #88	; 0x58
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295
 800344e:	4770      	bx	lr
 8003450:	20000148 	.word	0x20000148

08003454 <_sbrk>:
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <_sbrk+0x14>)
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	4602      	mov	r2, r0
 800345a:	b909      	cbnz	r1, 8003460 <_sbrk+0xc>
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <_sbrk+0x18>)
 800345e:	6019      	str	r1, [r3, #0]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	4402      	add	r2, r0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4770      	bx	lr
 8003468:	20000098 	.word	0x20000098
 800346c:	20000150 	.word	0x20000150

08003470 <_init>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr

0800347c <_fini>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr
