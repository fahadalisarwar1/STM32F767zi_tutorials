
03_timer_OC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003da4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b22  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  00031bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00033eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029518  00000000  00000000  00035540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010592  00000000  00000000  0005ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9e3  00000000  00000000  0006efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e9cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  0016ea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  001722c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  0017234c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c34 	.word	0x08003c34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003c34 	.word	0x08003c34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <display_board_information>:

#ifndef INC_UTILS_H_
#define INC_UTILS_H_

void display_board_information()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if (VERBOSE)
	{
		printf("Board Id:\t\t\t%d\r\n", (int)HAL_GetDEVID());
 80005dc:	f000 fa3c 	bl	8000a58 <HAL_GetDEVID>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <display_board_information+0x24>)
 80005e6:	f002 fb99 	bl	8002d1c <iprintf>
		printf("Board Freq:\t\t\t%d\r\n", (int)HAL_RCC_GetHCLKFreq());
 80005ea:	f001 f97d 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <display_board_information+0x28>)
 80005f4:	f002 fb92 	bl	8002d1c <iprintf>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08003c4c 	.word	0x08003c4c
 8000600:	08003c60 	.word	0x08003c60

08000604 <main>:
#include "utils.h"


uint32_t counter = 0;
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_Init(); // Initializing HAL.
 8000608:	f000 f9b2 	bl	8000970 <HAL_Init>

	rcc_clock_config_HSE();
 800060c:	f000 f8ca 	bl	80007a4 <rcc_clock_config_HSE>

	gpio_LED_Blue_init();
 8000610:	f000 f8a4 	bl	800075c <gpio_LED_Blue_init>


	uart_UART3_GPIO_config();
 8000614:	f000 f940 	bl	8000898 <uart_UART3_GPIO_config>
	uart_UART3_config();
 8000618:	f000 f974 	bl	8000904 <uart_UART3_config>

	timer_Init();
 800061c:	f000 f90e 	bl	800083c <timer_Init>



	display_board_information();
 8000620:	f7ff ffda 	bl	80005d8 <display_board_information>
	timer_start();
 8000624:	f000 f92e 	bl	8000884 <timer_start>
    while (1){
 8000628:	e7fe      	b.n	8000628 <main+0x24>

0800062a <HAL_TIM_PeriodElapsedCallback>:
    }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <__io_putchar>:
#include "nucleo_stm32f767xx_uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	 uint8_t c[1];
	 c[0] = ch & 0x00FF;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	733b      	strb	r3, [r7, #12]
	 HAL_USART_Transmit(&husart3, &c[0], 1, 100);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <__io_putchar+0x28>)
 8000658:	f002 f865 	bl	8002726 <HAL_USART_Transmit>
	 return ch;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000e4 	.word	0x200000e4

0800066c <_write>:

int _write(int file,char *ptr, int len) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e009      	b.n	8000692 <_write+0x26>
  __io_putchar(*ptr++);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffda 	bl	8000640 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf1      	blt.n	800067e <_write+0x12>
 }
 return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <HAL_TIM_OC_MspInit>:
// msp.c
// this does the low level inits for timer 3


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM3_CLK_ENABLE();
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_TIM_OC_MspInit+0x6c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]


	GPIO_InitTypeDef OC_pin;
	OC_pin.Pin = GPIO_PIN_0;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
	OC_pin.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
	OC_pin.Alternate = GPIO_AF2_TIM3;
 80006e4:	2302      	movs	r3, #2
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
	OC_pin.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]


	HAL_GPIO_Init(GPIOB, &OC_pin);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <HAL_TIM_OC_MspInit+0x70>)
 80006f4:	f000 fad0 	bl	8000c98 <HAL_GPIO_Init>

	//2. Enable the IRQ of TIM3
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006f8:	201d      	movs	r0, #29
 80006fa:	f000 fab2 	bl	8000c62 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM3_IRQn
	HAL_NVIC_SetPriority(TIM3_IRQn,15,0);
 80006fe:	2200      	movs	r2, #0
 8000700:	210f      	movs	r1, #15
 8000702:	201d      	movs	r0, #29
 8000704:	f000 fa91 	bl	8000c2a <HAL_NVIC_SetPriority>



}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40020400 	.word	0x40020400

08000718 <SysTick_Handler>:
#include "stm32f7xx_it.h"

extern TIM_HandleTypeDef htimer3;

void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800071c:	f000 f97c 	bl	8000a18 <HAL_IncTick>

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer3);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <TIM3_IRQHandler+0x10>)
 800072a:	f001 faa9 	bl	8001c80 <HAL_TIM_IRQHandler>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000098 	.word	0x20000098

08000738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <gpio_LED_Blue_init>:

/*************************************************************************************************************************************************************************/


void gpio_LED_Blue_init()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <gpio_LED_Blue_init+0x40>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <gpio_LED_Blue_init+0x40>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <gpio_LED_Blue_init+0x40>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_blue_t;
    led_blue_t.Pin = BLUE_LED;
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	607b      	str	r3, [r7, #4]
    led_blue_t.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
    led_blue_t.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
    led_blue_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_blue_t);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <gpio_LED_Blue_init+0x44>)
 8000790:	f000 fa82 	bl	8000c98 <HAL_GPIO_Init>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <rcc_clock_config_HSE>:
	    }
	    return true;
}

bool rcc_clock_config_HSE(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0


	  /*
	   * Oscillator initialization   *
	   */
	    RCC_OscInitTypeDef oscInit_t = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 faaa 	bl	8002d0c <memset>



	    oscInit_t.OscillatorType 					= RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
	    oscInit_t.HSEState  						= RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	61bb      	str	r3, [r7, #24]
	    oscInit_t.HSICalibrationValue 				= RCC_HSICALIBRATION_DEFAULT;
 80007c2:	2310      	movs	r3, #16
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

	    oscInit_t.PLL.PLLState 						= RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	    oscInit_t.PLL.PLLSource 					= RCC_PLLSOURCE_HSI;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30

	    oscInit_t.PLL.PLLM 							= 8;
 80007ce:	2308      	movs	r3, #8
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
	    oscInit_t.PLL.PLLN 							= 216;
 80007d2:	23d8      	movs	r3, #216	; 0xd8
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
	    oscInit_t.PLL.PLLP 							= RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	    oscInit_t.PLL.PLLQ 							= 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
	    oscInit_t.PLL.PLLR 							= 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_RCC_OscConfig(&oscInit_t)!= HAL_OK)
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fc02 	bl	8000ff0 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <rcc_clock_config_HSE+0x52>
	      {
	    		return false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e01d      	b.n	8000832 <rcc_clock_config_HSE+0x8e>

	    /**
	     * clock initialization
	     */

	    RCC_ClkInitTypeDef oscClk_t = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
	    oscClk_t.ClockType 							= RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000804:	230f      	movs	r3, #15
 8000806:	603b      	str	r3, [r7, #0]
	    oscClk_t.SYSCLKSource 						= RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	607b      	str	r3, [r7, #4]
	    oscClk_t.AHBCLKDivider 						= RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
	    oscClk_t.APB1CLKDivider						= RCC_HCLK_DIV4;
 8000810:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000814:	60fb      	str	r3, [r7, #12]
	    oscClk_t.APB2CLKDivider 					= RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	613b      	str	r3, [r7, #16]

	    if (HAL_RCC_ClockConfig(&oscClk_t, FLASH_LATENCY_7) != HAL_OK){
 800081c:	463b      	mov	r3, r7
 800081e:	2107      	movs	r1, #7
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fe93 	bl	800154c <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <rcc_clock_config_HSE+0x8c>
	    	return false;
 800082c:	2300      	movs	r3, #0
 800082e:	e000      	b.n	8000832 <rcc_clock_config_HSE+0x8e>
	    }

	    return true;
 8000830:	2301      	movs	r3, #1
}
 8000832:	4618      	mov	r0, r3
 8000834:	3748      	adds	r7, #72	; 0x48
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <timer_Init>:

// TIMER 3 CHANNEL 4 is connected to PB0 which is green LED on the nucleo board so we will use this pin as OC channel.

// TIM3 is connected to APB1
void timer_Init()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
	htimer3.Instance = TIM3;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <timer_Init+0x40>)
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <timer_Init+0x44>)
 8000846:	601a      	str	r2, [r3, #0]





	htimer3.Init.Prescaler 			= 2000 - 1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <timer_Init+0x40>)
 800084a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800084e:	605a      	str	r2, [r3, #4]
	htimer3.Init.Period 			= 54000 - 1;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <timer_Init+0x40>)
 8000852:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8000856:	60da      	str	r2, [r3, #12]

	HAL_TIM_OC_Init(&htimer3);
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <timer_Init+0x40>)
 800085a:	f001 f879 	bl	8001950 <HAL_TIM_OC_Init>
	TIM_OC_InitTypeDef sConfig;
	sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 800085e:	2330      	movs	r3, #48	; 0x30
 8000860:	607b      	str	r3, [r7, #4]

	sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8000862:	2302      	movs	r3, #2
 8000864:	60fb      	str	r3, [r7, #12]
	HAL_TIM_OC_ConfigChannel(&htimer3, &sConfig, TIM_CHANNEL_3);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2208      	movs	r2, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <timer_Init+0x40>)
 800086e:	f001 fb27 	bl	8001ec0 <HAL_TIM_OC_ConfigChannel>


}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000098 	.word	0x20000098
 8000880:	40000400 	.word	0x40000400

08000884 <timer_start>:

void timer_start(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	HAL_TIM_OC_Start_IT(&htimer3, TIM_CHANNEL_3);
 8000888:	2108      	movs	r1, #8
 800088a:	4802      	ldr	r0, [pc, #8]	; (8000894 <timer_start+0x10>)
 800088c:	f001 f8b8 	bl	8001a00 <HAL_TIM_OC_Start_IT>


}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000098 	.word	0x20000098

08000898 <uart_UART3_GPIO_config>:
#include "nucleo_stm32f767xx_uart.h"

USART_HandleTypeDef husart3;

void uart_UART3_GPIO_config()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
     * RX = PD9
     * 1 Enable cllock for Port D
     * 2: set GPIO_TypeDef to corresponding values
     */

     __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <uart_UART3_GPIO_config+0x64>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <uart_UART3_GPIO_config+0x64>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <uart_UART3_GPIO_config+0x64>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
     GPIO_InitTypeDef gpio_tx_t;

     gpio_tx_t.Pin = GPIO_PIN_8;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	61fb      	str	r3, [r7, #28]
     gpio_tx_t.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
     gpio_tx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
     gpio_tx_t.Alternate = GPIO_AF7_USART3;
 80008c4:	2307      	movs	r3, #7
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
     HAL_GPIO_Init(GPIOD, &gpio_tx_t);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <uart_UART3_GPIO_config+0x68>)
 80008d0:	f000 f9e2 	bl	8000c98 <HAL_GPIO_Init>

     GPIO_InitTypeDef gpio_rx_t;

     gpio_rx_t.Pin = GPIO_PIN_9;
 80008d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d8:	60bb      	str	r3, [r7, #8]
     gpio_rx_t.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
     gpio_rx_t.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
     gpio_rx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2302      	movs	r3, #2
 80008e4:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOD, &gpio_rx_t);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <uart_UART3_GPIO_config+0x68>)
 80008ee:	f000 f9d3 	bl	8000c98 <HAL_GPIO_Init>




}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00

08000904 <uart_UART3_config>:


bool uart_UART3_config()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <uart_UART3_config+0x60>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <uart_UART3_config+0x60>)
 8000910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <uart_UART3_config+0x60>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

    husart3.Instance = USART3;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <uart_UART3_config+0x64>)
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <uart_UART3_config+0x68>)
 8000926:	601a      	str	r2, [r3, #0]
    husart3.Init.BaudRate = 115200;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <uart_UART3_config+0x64>)
 800092a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092e:	605a      	str	r2, [r3, #4]
    husart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <uart_UART3_config+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    husart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <uart_UART3_config+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
    husart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <uart_UART3_config+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    husart3.Init.Mode= UART_MODE_TX_RX;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <uart_UART3_config+0x64>)
 8000944:	220c      	movs	r2, #12
 8000946:	615a      	str	r2, [r3, #20]

    if(HAL_USART_Init(&husart3) != HAL_OK)
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <uart_UART3_config+0x64>)
 800094a:	f001 fe98 	bl	800267e <HAL_USART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <uart_UART3_config+0x54>
      {
    		return false;
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <uart_UART3_config+0x56>
      }
    return true;
 8000958:	2301      	movs	r3, #1

}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	200000e4 	.word	0x200000e4
 800096c:	40004800 	.word	0x40004800

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x34>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_Init+0x34>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x34>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x34>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f941 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f810 	bl	80009b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f000 f806 	bl	80009a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f951 	bl	8000c7e <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f919 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000134 	.word	0x20000134

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000134 	.word	0x20000134

08000a58 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_GetDEVID+0x18>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e0042000 	.word	0xe0042000

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	05fa0000 	.word	0x05fa0000

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff3e 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e175      	b.n	8000fa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8164 	bne.w	8000f9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_GPIO_Init+0x5e>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cea:	2b11      	cmp	r3, #17
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d130      	bne.n	8000d58 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	f003 0201 	and.w	r2, r3, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x100>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80be 	beq.w	8000f9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e3a:	4a61      	ldr	r2, [pc, #388]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x32c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d037      	beq.n	8000ed6 <HAL_GPIO_Init+0x23e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d031      	beq.n	8000ed2 <HAL_GPIO_Init+0x23a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a56      	ldr	r2, [pc, #344]	; (8000fcc <HAL_GPIO_Init+0x334>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d02b      	beq.n	8000ece <HAL_GPIO_Init+0x236>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a55      	ldr	r2, [pc, #340]	; (8000fd0 <HAL_GPIO_Init+0x338>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x232>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a54      	ldr	r2, [pc, #336]	; (8000fd4 <HAL_GPIO_Init+0x33c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a53      	ldr	r2, [pc, #332]	; (8000fd8 <HAL_GPIO_Init+0x340>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x22a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <HAL_GPIO_Init+0x344>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_GPIO_Init+0x348>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x34c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000eae:	2309      	movs	r3, #9
 8000eb0:	e012      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	e010      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00e      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00c      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00a      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ee8:	4935      	ldr	r1, [pc, #212]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1a:	4a34      	ldr	r2, [pc, #208]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f44:	4a29      	ldr	r2, [pc, #164]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_GPIO_Init+0x354>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f ae86 	bls.w	8000cb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021c00 	.word	0x40021c00
 8000fe4:	40022000 	.word	0x40022000
 8000fe8:	40022400 	.word	0x40022400
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e29b      	b.n	800153e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8087 	beq.w	8001122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001014:	4b96      	ldr	r3, [pc, #600]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b04      	cmp	r3, #4
 800101e:	d00c      	beq.n	800103a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001020:	4b93      	ldr	r3, [pc, #588]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d112      	bne.n	8001052 <HAL_RCC_OscConfig+0x62>
 800102c:	4b90      	ldr	r3, [pc, #576]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001038:	d10b      	bne.n	8001052 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	4b8d      	ldr	r3, [pc, #564]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d06c      	beq.n	8001120 <HAL_RCC_OscConfig+0x130>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d168      	bne.n	8001120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e275      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x7a>
 800105c:	4b84      	ldr	r3, [pc, #528]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a83      	ldr	r2, [pc, #524]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e02e      	b.n	80010c8 <HAL_RCC_OscConfig+0xd8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x9c>
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01d      	b.n	80010c8 <HAL_RCC_OscConfig+0xd8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 8001096:	4b76      	ldr	r3, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a75      	ldr	r2, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b73      	ldr	r3, [pc, #460]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a72      	ldr	r2, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xd8>
 80010b0:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b6c      	ldr	r3, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a6b      	ldr	r2, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcb6 	bl	8000a40 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcb2 	bl	8000a40 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e229      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b61      	ldr	r3, [pc, #388]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fca2 	bl	8000a40 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fc9e 	bl	8000a40 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e215      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x110>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d069      	beq.n	8001202 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b08      	cmp	r3, #8
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x190>
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x17a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1e9      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	493d      	ldr	r1, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	e040      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d023      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a38      	ldr	r2, [pc, #224]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fc54 	bl	8000a40 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc50 	bl	8000a40 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1c7      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4929      	ldr	r1, [pc, #164]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
 80011ce:	e018      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc30 	bl	8000a40 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc2c 	bl	8000a40 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1a3      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d038      	beq.n	8001280 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d019      	beq.n	800124a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fc0d 	bl	8000a40 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff fc09 	bl	8000a40 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e180      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800123e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x23a>
 8001248:	e01a      	b.n	8001280 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_RCC_OscConfig+0x280>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001256:	f7ff fbf3 	bl	8000a40 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fbef 	bl	8000a40 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d903      	bls.n	8001274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e166      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
 8001270:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ee      	bne.n	800125e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a4 	beq.w	80013d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a88      	ldr	r2, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b6:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012c2:	4b80      	ldr	r3, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7f      	ldr	r2, [pc, #508]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fbb7 	bl	8000a40 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fbb3 	bl	8000a40 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e12a      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x31a>
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e02d      	b.n	8001366 <HAL_RCC_OscConfig+0x376>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x33c>
 8001312:	4b6b      	ldr	r3, [pc, #428]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a6a      	ldr	r2, [pc, #424]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a67      	ldr	r2, [pc, #412]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
 800132a:	e01c      	b.n	8001366 <HAL_RCC_OscConfig+0x376>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x35e>
 8001334:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a61      	ldr	r2, [pc, #388]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6713      	str	r3, [r2, #112]	; 0x70
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x376>
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fb67 	bl	8000a40 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fb63 	bl	8000a40 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0d8      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ee      	beq.n	8001376 <HAL_RCC_OscConfig+0x386>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff fb51 	bl	8000a40 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fb4d 	bl	8000a40 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0c2      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ee      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80ae 	beq.w	800153c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d06d      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d14b      	bne.n	800148c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80013fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fb1e 	bl	8000a40 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb1a 	bl	8000a40 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e091      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	019b      	lsls	r3, r3, #6
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	3b01      	subs	r3, #1
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	071b      	lsls	r3, r3, #28
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff faec 	bl	8000a40 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fae8 	bl	8000a40 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e05f      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x47c>
 800148a:	e057      	b.n	800153c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fad2 	bl	8000a40 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff face 	bl	8000a40 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e045      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4b0>
 80014be:	e03d      	b.n	800153c <HAL_RCC_OscConfig+0x54c>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_RCC_OscConfig+0x558>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d030      	beq.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d129      	bne.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d122      	bne.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001500:	4293      	cmp	r3, r2
 8001502:	d119      	bne.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	3b01      	subs	r3, #1
 8001512:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d10f      	bne.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0d0      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 020f 	bic.w	r2, r3, #15
 800157a:	4965      	ldr	r1, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e073      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06b      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4936      	ldr	r1, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001640:	f7ff f9fe 	bl	8000a40 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff f9fa 	bl	8000a40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e053      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d210      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 020f 	bic.w	r2, r3, #15
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1cc>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1d0>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1d4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f95a 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	08003c74 	.word	0x08003c74
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	2300      	movs	r3, #0
 8001736:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00d      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 8001748:	2b08      	cmp	r3, #8
 800174a:	f200 80bd 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 8001752:	2b04      	cmp	r3, #4
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x3a>
 8001756:	e0b7      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800175a:	60bb      	str	r3, [r7, #8]
      break;
 800175c:	e0b7      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001760:	60bb      	str	r3, [r7, #8]
      break;
 8001762:	e0b4      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d04d      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	461a      	mov	r2, r3
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	ea02 0800 	and.w	r8, r2, r0
 8001792:	ea03 0901 	and.w	r9, r3, r1
 8001796:	4640      	mov	r0, r8
 8001798:	4649      	mov	r1, r9
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	014b      	lsls	r3, r1, #5
 80017a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a8:	0142      	lsls	r2, r0, #5
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	ebb0 0008 	subs.w	r0, r0, r8
 80017b2:	eb61 0109 	sbc.w	r1, r1, r9
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	018b      	lsls	r3, r1, #6
 80017c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017c4:	0182      	lsls	r2, r0, #6
 80017c6:	1a12      	subs	r2, r2, r0
 80017c8:	eb63 0301 	sbc.w	r3, r3, r1
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	00d9      	lsls	r1, r3, #3
 80017d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017da:	00d0      	lsls	r0, r2, #3
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	eb12 0208 	adds.w	r2, r2, r8
 80017e4:	eb43 0309 	adc.w	r3, r3, r9
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	0259      	lsls	r1, r3, #9
 80017f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017f6:	0250      	lsls	r0, r2, #9
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	f7fe fd6a 	bl	80002e0 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e04a      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	461a      	mov	r2, r3
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	ea02 0400 	and.w	r4, r2, r0
 800182e:	ea03 0501 	and.w	r5, r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	014b      	lsls	r3, r1, #5
 8001840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001844:	0142      	lsls	r2, r0, #5
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	1b00      	subs	r0, r0, r4
 800184c:	eb61 0105 	sbc.w	r1, r1, r5
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	018b      	lsls	r3, r1, #6
 800185a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800185e:	0182      	lsls	r2, r0, #6
 8001860:	1a12      	subs	r2, r2, r0
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	00d9      	lsls	r1, r3, #3
 8001870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001874:	00d0      	lsls	r0, r2, #3
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	1912      	adds	r2, r2, r4
 800187c:	eb45 0303 	adc.w	r3, r5, r3
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0299      	lsls	r1, r3, #10
 800188a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800188e:	0290      	lsls	r0, r2, #10
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f7fe fd1e 	bl	80002e0 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	60bb      	str	r3, [r7, #8]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ca:	60bb      	str	r3, [r7, #8]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	68bb      	ldr	r3, [r7, #8]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	007a1200 	.word	0x007a1200

080018e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001904:	f7ff fff0 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	08003c84 	.word	0x08003c84

08001928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800192c:	f7ff ffdc 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0b5b      	lsrs	r3, r3, #13
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK2Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	08003c84 	.word	0x08003c84

08001950 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e049      	b.n	80019f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe fe94 	bl	80006a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3304      	adds	r3, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f000 fb34 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_TIM_OC_Start_IT+0x24>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e03c      	b.n	8001a9e <HAL_TIM_OC_Start_IT+0x9e>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d109      	bne.n	8001a3e <HAL_TIM_OC_Start_IT+0x3e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	e02f      	b.n	8001a9e <HAL_TIM_OC_Start_IT+0x9e>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d109      	bne.n	8001a58 <HAL_TIM_OC_Start_IT+0x58>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e022      	b.n	8001a9e <HAL_TIM_OC_Start_IT+0x9e>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d109      	bne.n	8001a72 <HAL_TIM_OC_Start_IT+0x72>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	e015      	b.n	8001a9e <HAL_TIM_OC_Start_IT+0x9e>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d109      	bne.n	8001a8c <HAL_TIM_OC_Start_IT+0x8c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e008      	b.n	8001a9e <HAL_TIM_OC_Start_IT+0x9e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0d8      	b.n	8001c58 <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d104      	bne.n	8001ab6 <HAL_TIM_OC_Start_IT+0xb6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab4:	e023      	b.n	8001afe <HAL_TIM_OC_Start_IT+0xfe>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d104      	bne.n	8001ac6 <HAL_TIM_OC_Start_IT+0xc6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac4:	e01b      	b.n	8001afe <HAL_TIM_OC_Start_IT+0xfe>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d104      	bne.n	8001ad6 <HAL_TIM_OC_Start_IT+0xd6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad4:	e013      	b.n	8001afe <HAL_TIM_OC_Start_IT+0xfe>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	d104      	bne.n	8001ae6 <HAL_TIM_OC_Start_IT+0xe6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ae4:	e00b      	b.n	8001afe <HAL_TIM_OC_Start_IT+0xfe>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d104      	bne.n	8001af6 <HAL_TIM_OC_Start_IT+0xf6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af4:	e003      	b.n	8001afe <HAL_TIM_OC_Start_IT+0xfe>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d841      	bhi.n	8001b88 <HAL_TIM_OC_Start_IT+0x188>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <HAL_TIM_OC_Start_IT+0x10c>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b41 	.word	0x08001b41
 8001b10:	08001b89 	.word	0x08001b89
 8001b14:	08001b89 	.word	0x08001b89
 8001b18:	08001b89 	.word	0x08001b89
 8001b1c:	08001b53 	.word	0x08001b53
 8001b20:	08001b89 	.word	0x08001b89
 8001b24:	08001b89 	.word	0x08001b89
 8001b28:	08001b89 	.word	0x08001b89
 8001b2c:	08001b65 	.word	0x08001b65
 8001b30:	08001b89 	.word	0x08001b89
 8001b34:	08001b89 	.word	0x08001b89
 8001b38:	08001b89 	.word	0x08001b89
 8001b3c:	08001b77 	.word	0x08001b77
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0202 	orr.w	r2, r2, #2
 8001b4e:	60da      	str	r2, [r3, #12]
      break;
 8001b50:	e01b      	b.n	8001b8a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0204 	orr.w	r2, r2, #4
 8001b60:	60da      	str	r2, [r3, #12]
      break;
 8001b62:	e012      	b.n	8001b8a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	60da      	str	r2, [r3, #12]
      break;
 8001b74:	e009      	b.n	8001b8a <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0210 	orr.w	r2, r2, #16
 8001b84:	60da      	str	r2, [r3, #12]
      break;
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8001b88:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd30 	bl	80025f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <HAL_TIM_OC_Start_IT+0x260>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_TIM_OC_Start_IT+0x1ac>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <HAL_TIM_OC_Start_IT+0x264>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_TIM_OC_Start_IT+0x1b0>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_TIM_OC_Start_IT+0x1b2>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_TIM_OC_Start_IT+0x260>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d022      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd8:	d01d      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_TIM_OC_Start_IT+0x268>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d018      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <HAL_TIM_OC_Start_IT+0x26c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_TIM_OC_Start_IT+0x270>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00e      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_OC_Start_IT+0x264>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_TIM_OC_Start_IT+0x274>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d004      	beq.n	8001c16 <HAL_TIM_OC_Start_IT+0x216>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_TIM_OC_Start_IT+0x278>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d115      	bne.n	8001c42 <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_TIM_OC_Start_IT+0x27c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b06      	cmp	r3, #6
 8001c26:	d015      	beq.n	8001c54 <HAL_TIM_OC_Start_IT+0x254>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d011      	beq.n	8001c54 <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	e008      	b.n	8001c54 <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e000      	b.n	8001c56 <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010400 	.word	0x40010400
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40000c00 	.word	0x40000c00
 8001c74:	40014000 	.word	0x40014000
 8001c78:	40001800 	.word	0x40001800
 8001c7c:	00010007 	.word	0x00010007

08001c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0202 	mvn.w	r2, #2
 8001cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f97c 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f96e 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f97f 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0204 	mvn.w	r2, #4
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f952 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f944 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f955 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0208 	mvn.w	r2, #8
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f928 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f91a 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f92b 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0210 	mvn.w	r2, #16
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2208      	movs	r2, #8
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8fe 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8f0 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f901 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0201 	mvn.w	r2, #1
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fc13 	bl	800062a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fc13 	bl	8002656 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b80      	cmp	r3, #128	; 0x80
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fc06 	bl	800266a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d10e      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8af 	bl	8001fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d10e      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0220 	mvn.w	r2, #32
 8001eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fbc6 	bl	8002642 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_OC_ConfigChannel+0x1a>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e064      	b.n	8001fa4 <HAL_TIM_OC_ConfigChannel+0xe4>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b14      	cmp	r3, #20
 8001ee6:	d857      	bhi.n	8001f98 <HAL_TIM_OC_ConfigChannel+0xd8>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f45 	.word	0x08001f45
 8001ef4:	08001f99 	.word	0x08001f99
 8001ef8:	08001f99 	.word	0x08001f99
 8001efc:	08001f99 	.word	0x08001f99
 8001f00:	08001f53 	.word	0x08001f53
 8001f04:	08001f99 	.word	0x08001f99
 8001f08:	08001f99 	.word	0x08001f99
 8001f0c:	08001f99 	.word	0x08001f99
 8001f10:	08001f61 	.word	0x08001f61
 8001f14:	08001f99 	.word	0x08001f99
 8001f18:	08001f99 	.word	0x08001f99
 8001f1c:	08001f99 	.word	0x08001f99
 8001f20:	08001f6f 	.word	0x08001f6f
 8001f24:	08001f99 	.word	0x08001f99
 8001f28:	08001f99 	.word	0x08001f99
 8001f2c:	08001f99 	.word	0x08001f99
 8001f30:	08001f7d 	.word	0x08001f7d
 8001f34:	08001f99 	.word	0x08001f99
 8001f38:	08001f99 	.word	0x08001f99
 8001f3c:	08001f99 	.word	0x08001f99
 8001f40:	08001f8b 	.word	0x08001f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f8f6 	bl	800213c <TIM_OC1_SetConfig>
      break;
 8001f50:	e023      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f961 	bl	8002220 <TIM_OC2_SetConfig>
      break;
 8001f5e:	e01c      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9d2 	bl	8002310 <TIM_OC3_SetConfig>
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fa41 	bl	80023fc <TIM_OC4_SetConfig>
      break;
 8001f7a:	e00e      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fa92 	bl	80024ac <TIM_OC5_SetConfig>
      break;
 8001f88:	e007      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fadd 	bl	8002550 <TIM_OC6_SetConfig>
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8001f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3c      	ldr	r2, [pc, #240]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3b      	ldr	r2, [pc, #236]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <TIM_Base_SetConfig+0x124>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2f      	ldr	r2, [pc, #188]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d027      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d023      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <TIM_Base_SetConfig+0x124>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <TIM_Base_SetConfig+0x128>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <TIM_Base_SetConfig+0x12c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <TIM_Base_SetConfig+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <TIM_Base_SetConfig+0x124>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40010400 	.word	0x40010400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	40001800 	.word	0x40001800
 8002134:	40001c00 	.word	0x40001c00
 8002138:	40002000 	.word	0x40002000

0800213c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f023 0201 	bic.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <TIM_OC1_SetConfig+0xd8>)
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f023 0302 	bic.w	r3, r3, #2
 8002184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <TIM_OC1_SetConfig+0xdc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_OC1_SetConfig+0x64>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <TIM_OC1_SetConfig+0xe0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d10c      	bne.n	80021ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0308 	bic.w	r3, r3, #8
 80021a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a16      	ldr	r2, [pc, #88]	; (8002218 <TIM_OC1_SetConfig+0xdc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <TIM_OC1_SetConfig+0x8e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a15      	ldr	r2, [pc, #84]	; (800221c <TIM_OC1_SetConfig+0xe0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d111      	bne.n	80021ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	fffeff8f 	.word	0xfffeff8f
 8002218:	40010000 	.word	0x40010000
 800221c:	40010400 	.word	0x40010400

08002220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	f023 0210 	bic.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <TIM_OC2_SetConfig+0xe4>)
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f023 0320 	bic.w	r3, r3, #32
 800226a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <TIM_OC2_SetConfig+0xe8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_OC2_SetConfig+0x68>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <TIM_OC2_SetConfig+0xec>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d10d      	bne.n	80022a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800228e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <TIM_OC2_SetConfig+0xe8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d003      	beq.n	80022b4 <TIM_OC2_SetConfig+0x94>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <TIM_OC2_SetConfig+0xec>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d113      	bne.n	80022dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	feff8fff 	.word	0xfeff8fff
 8002308:	40010000 	.word	0x40010000
 800230c:	40010400 	.word	0x40010400

08002310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <TIM_OC3_SetConfig+0xe0>)
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <TIM_OC3_SetConfig+0xe4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_OC3_SetConfig+0x66>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_OC3_SetConfig+0xe8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10d      	bne.n	8002392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <TIM_OC3_SetConfig+0xe4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_OC3_SetConfig+0x92>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <TIM_OC3_SetConfig+0xe8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d113      	bne.n	80023ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	621a      	str	r2, [r3, #32]
}
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	fffeff8f 	.word	0xfffeff8f
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40010400 	.word	0x40010400

080023fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <TIM_OC4_SetConfig+0xa4>)
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	031b      	lsls	r3, r3, #12
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <TIM_OC4_SetConfig+0xa8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_OC4_SetConfig+0x68>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <TIM_OC4_SetConfig+0xac>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d109      	bne.n	8002478 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	feff8fff 	.word	0xfeff8fff
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010400 	.word	0x40010400

080024ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <TIM_OC5_SetConfig+0x98>)
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <TIM_OC5_SetConfig+0x9c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_OC5_SetConfig+0x5e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <TIM_OC5_SetConfig+0xa0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d109      	bne.n	800251e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	fffeff8f 	.word	0xfffeff8f
 8002548:	40010000 	.word	0x40010000
 800254c:	40010400 	.word	0x40010400

08002550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <TIM_OC6_SetConfig+0x9c>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <TIM_OC6_SetConfig+0xa0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_OC6_SetConfig+0x60>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <TIM_OC6_SetConfig+0xa4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d109      	bne.n	80025c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	029b      	lsls	r3, r3, #10
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	feff8fff 	.word	0xfeff8fff
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40010400 	.word	0x40010400

080025f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2201      	movs	r2, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1a      	ldr	r2, [r3, #32]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e03c      	b.n	800270a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f834 	bl	8002712 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f90e 	bl	80028e4 <USART_SetConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e01b      	b.n	800270a <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026e0:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa70 	bl	8002be8 <USART_CheckIdleState>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b08a      	sub	sp, #40	; 0x28
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	f040 8095 	bne.w	800286e <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_USART_Transmit+0x2a>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e08d      	b.n	8002870 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_USART_Transmit+0x3c>
 800275e:	2302      	movs	r3, #2
 8002760:	e086      	b.n	8002870 <HAL_USART_Transmit+0x14a>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2212      	movs	r2, #18
 8002774:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002778:	f7fe f962 	bl	8000a40 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d108      	bne.n	80027a6 <HAL_USART_Transmit+0x80>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e003      	b.n	80027ae <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80027ae:	e02a      	b.n	8002806 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f85c 	bl	8002878 <USART_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e052      	b.n	8002870 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	3302      	adds	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e007      	b.n	80027f8 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1cf      	bne.n	80027b0 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2200      	movs	r2, #0
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f82c 	bl	8002878 <USART_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e022      	b.n	8002870 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2208      	movs	r2, #8
 8002838:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0208 	orr.w	r2, r2, #8
 8002848:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0210 	orr.w	r2, r2, #16
 8002858:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002888:	e018      	b.n	80028bc <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d014      	beq.n	80028bc <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe f8d5 	bl	8000a40 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <USART_WaitOnFlagUntilTimeout+0x30>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e00f      	b.n	80028dc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d0d7      	beq.n	800288a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4bae      	ldr	r3, [pc, #696]	; (8002bcc <USART_SetConfig+0x2e8>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	6979      	ldr	r1, [r7, #20]
 800291a:	430b      	orrs	r3, r1
 800291c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800291e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002922:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4313      	orrs	r3, r2
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a9b      	ldr	r2, [pc, #620]	; (8002bd0 <USART_SetConfig+0x2ec>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d121      	bne.n	80029aa <USART_SetConfig+0xc6>
 8002966:	4b9b      	ldr	r3, [pc, #620]	; (8002bd4 <USART_SetConfig+0x2f0>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d817      	bhi.n	80029a4 <USART_SetConfig+0xc0>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <USART_SetConfig+0x98>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002999 	.word	0x08002999
 8002984:	08002993 	.word	0x08002993
 8002988:	0800299f 	.word	0x0800299f
 800298c:	2301      	movs	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	e096      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002992:	2302      	movs	r3, #2
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	e093      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002998:	2304      	movs	r3, #4
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e090      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 800299e:	2308      	movs	r3, #8
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e08d      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 80029a4:	2310      	movs	r3, #16
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e08a      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <USART_SetConfig+0x2f4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d132      	bne.n	8002a1a <USART_SetConfig+0x136>
 80029b4:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <USART_SetConfig+0x2f0>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d828      	bhi.n	8002a14 <USART_SetConfig+0x130>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <USART_SetConfig+0xe4>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	08002a15 	.word	0x08002a15
 80029d0:	08002a15 	.word	0x08002a15
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a09 	.word	0x08002a09
 80029dc:	08002a15 	.word	0x08002a15
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	08002a03 	.word	0x08002a03
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	08002a15 	.word	0x08002a15
 80029f4:	08002a15 	.word	0x08002a15
 80029f8:	08002a0f 	.word	0x08002a0f
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e05e      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a02:	2302      	movs	r3, #2
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e05b      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e058      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e055      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a14:	2310      	movs	r3, #16
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e052      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6f      	ldr	r2, [pc, #444]	; (8002bdc <USART_SetConfig+0x2f8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d120      	bne.n	8002a66 <USART_SetConfig+0x182>
 8002a24:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <USART_SetConfig+0x2f0>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a2e:	2b30      	cmp	r3, #48	; 0x30
 8002a30:	d013      	beq.n	8002a5a <USART_SetConfig+0x176>
 8002a32:	2b30      	cmp	r3, #48	; 0x30
 8002a34:	d814      	bhi.n	8002a60 <USART_SetConfig+0x17c>
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d009      	beq.n	8002a4e <USART_SetConfig+0x16a>
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d810      	bhi.n	8002a60 <USART_SetConfig+0x17c>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <USART_SetConfig+0x164>
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d006      	beq.n	8002a54 <USART_SetConfig+0x170>
 8002a46:	e00b      	b.n	8002a60 <USART_SetConfig+0x17c>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e038      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e035      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a54:	2304      	movs	r3, #4
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e032      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	77fb      	strb	r3, [r7, #31]
 8002a5e:	e02f      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a60:	2310      	movs	r3, #16
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e02c      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5d      	ldr	r2, [pc, #372]	; (8002be0 <USART_SetConfig+0x2fc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d125      	bne.n	8002abc <USART_SetConfig+0x1d8>
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <USART_SetConfig+0x2f0>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a7e:	d017      	beq.n	8002ab0 <USART_SetConfig+0x1cc>
 8002a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a84:	d817      	bhi.n	8002ab6 <USART_SetConfig+0x1d2>
 8002a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8a:	d00b      	beq.n	8002aa4 <USART_SetConfig+0x1c0>
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a90:	d811      	bhi.n	8002ab6 <USART_SetConfig+0x1d2>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <USART_SetConfig+0x1ba>
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d006      	beq.n	8002aaa <USART_SetConfig+0x1c6>
 8002a9c:	e00b      	b.n	8002ab6 <USART_SetConfig+0x1d2>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e00d      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e00a      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e007      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e004      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e001      	b.n	8002ac0 <USART_SetConfig+0x1dc>
 8002abc:	2310      	movs	r3, #16
 8002abe:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d857      	bhi.n	8002b76 <USART_SetConfig+0x292>
 8002ac6:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <USART_SetConfig+0x1e8>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002b0f 	.word	0x08002b0f
 8002ad4:	08002b2d 	.word	0x08002b2d
 8002ad8:	08002b77 	.word	0x08002b77
 8002adc:	08002b43 	.word	0x08002b43
 8002ae0:	08002b77 	.word	0x08002b77
 8002ae4:	08002b77 	.word	0x08002b77
 8002ae8:	08002b77 	.word	0x08002b77
 8002aec:	08002b61 	.word	0x08002b61
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002af0:	f7fe ff06 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 8002af4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	005a      	lsls	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	441a      	add	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	61bb      	str	r3, [r7, #24]
      break;
 8002b0c:	e036      	b.n	8002b7c <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b0e:	f7fe ff0b 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 8002b12:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	005a      	lsls	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	61bb      	str	r3, [r7, #24]
      break;
 8002b2a:	e027      	b.n	8002b7c <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	085a      	lsrs	r2, r3, #1
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <USART_SetConfig+0x300>)
 8002b34:	4413      	add	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6852      	ldr	r2, [r2, #4]
 8002b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      break;
 8002b40:	e01c      	b.n	8002b7c <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002b42:	f7fe fdef 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8002b46:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	005a      	lsls	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	441a      	add	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	61bb      	str	r3, [r7, #24]
      break;
 8002b5e:	e00d      	b.n	8002b7c <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	61bb      	str	r3, [r7, #24]
      break;
 8002b74:	e002      	b.n	8002b7c <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77bb      	strb	r3, [r7, #30]
      break;
 8002b7a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	d916      	bls.n	8002bb0 <USART_SetConfig+0x2cc>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d212      	bcs.n	8002bb0 <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	89fa      	ldrh	r2, [r7, #14]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e001      	b.n	8002bb4 <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8002bc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	efff69f3 	.word	0xefff69f3
 8002bd0:	40011000 	.word	0x40011000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40004400 	.word	0x40004400
 8002bdc:	40004800 	.word	0x40004800
 8002be0:	40011400 	.word	0x40011400
 8002be4:	01e84800 	.word	0x01e84800

08002be8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bf6:	f7fd ff23 	bl	8000a40 <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d10e      	bne.n	8002c28 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fe2d 	bl	8002878 <USART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e01e      	b.n	8002c66 <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d10e      	bne.n	8002c54 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fe17 	bl	8002878 <USART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e008      	b.n	8002c66 <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c9a:	f7fd fd4d 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f000 f811 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fd fcaf 	bl	8000604 <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002cb4:	08003d34 	.word	0x08003d34
  ldr r2, =_sbss
 8002cb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cbc:	20000148 	.word	0x20000148

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4d0d      	ldr	r5, [pc, #52]	; (8002cfc <__libc_init_array+0x38>)
 8002cc8:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	2600      	movs	r6, #0
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	4d0b      	ldr	r5, [pc, #44]	; (8002d04 <__libc_init_array+0x40>)
 8002cd6:	4c0c      	ldr	r4, [pc, #48]	; (8002d08 <__libc_init_array+0x44>)
 8002cd8:	f000 ffac 	bl	8003c34 <_init>
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08003d2c 	.word	0x08003d2c
 8002d00:	08003d2c 	.word	0x08003d2c
 8002d04:	08003d2c 	.word	0x08003d2c
 8002d08:	08003d30 	.word	0x08003d30

08002d0c <memset>:
 8002d0c:	4402      	add	r2, r0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <iprintf>:
 8002d1c:	b40f      	push	{r0, r1, r2, r3}
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <iprintf+0x2c>)
 8002d20:	b513      	push	{r0, r1, r4, lr}
 8002d22:	681c      	ldr	r4, [r3, #0]
 8002d24:	b124      	cbz	r4, 8002d30 <iprintf+0x14>
 8002d26:	69a3      	ldr	r3, [r4, #24]
 8002d28:	b913      	cbnz	r3, 8002d30 <iprintf+0x14>
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 f866 	bl	8002dfc <__sinit>
 8002d30:	ab05      	add	r3, sp, #20
 8002d32:	9a04      	ldr	r2, [sp, #16]
 8002d34:	68a1      	ldr	r1, [r4, #8]
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 f983 	bl	8003044 <_vfiprintf_r>
 8002d3e:	b002      	add	sp, #8
 8002d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d44:	b004      	add	sp, #16
 8002d46:	4770      	bx	lr
 8002d48:	2000000c 	.word	0x2000000c

08002d4c <std>:
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	4604      	mov	r4, r0
 8002d52:	e9c0 3300 	strd	r3, r3, [r0]
 8002d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d5a:	6083      	str	r3, [r0, #8]
 8002d5c:	8181      	strh	r1, [r0, #12]
 8002d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d60:	81c2      	strh	r2, [r0, #14]
 8002d62:	6183      	str	r3, [r0, #24]
 8002d64:	4619      	mov	r1, r3
 8002d66:	2208      	movs	r2, #8
 8002d68:	305c      	adds	r0, #92	; 0x5c
 8002d6a:	f7ff ffcf 	bl	8002d0c <memset>
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <std+0x38>)
 8002d70:	6263      	str	r3, [r4, #36]	; 0x24
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <std+0x3c>)
 8002d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <std+0x40>)
 8002d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <std+0x44>)
 8002d7c:	6224      	str	r4, [r4, #32]
 8002d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	bf00      	nop
 8002d84:	080035ed 	.word	0x080035ed
 8002d88:	0800360f 	.word	0x0800360f
 8002d8c:	08003647 	.word	0x08003647
 8002d90:	0800366b 	.word	0x0800366b

08002d94 <_cleanup_r>:
 8002d94:	4901      	ldr	r1, [pc, #4]	; (8002d9c <_cleanup_r+0x8>)
 8002d96:	f000 b8af 	b.w	8002ef8 <_fwalk_reent>
 8002d9a:	bf00      	nop
 8002d9c:	08003945 	.word	0x08003945

08002da0 <__sfmoreglue>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	1e4a      	subs	r2, r1, #1
 8002da4:	2568      	movs	r5, #104	; 0x68
 8002da6:	4355      	muls	r5, r2
 8002da8:	460e      	mov	r6, r1
 8002daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002dae:	f000 f8c5 	bl	8002f3c <_malloc_r>
 8002db2:	4604      	mov	r4, r0
 8002db4:	b140      	cbz	r0, 8002dc8 <__sfmoreglue+0x28>
 8002db6:	2100      	movs	r1, #0
 8002db8:	e9c0 1600 	strd	r1, r6, [r0]
 8002dbc:	300c      	adds	r0, #12
 8002dbe:	60a0      	str	r0, [r4, #8]
 8002dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002dc4:	f7ff ffa2 	bl	8002d0c <memset>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bd70      	pop	{r4, r5, r6, pc}

08002dcc <__sfp_lock_acquire>:
 8002dcc:	4801      	ldr	r0, [pc, #4]	; (8002dd4 <__sfp_lock_acquire+0x8>)
 8002dce:	f000 b8b3 	b.w	8002f38 <__retarget_lock_acquire_recursive>
 8002dd2:	bf00      	nop
 8002dd4:	20000140 	.word	0x20000140

08002dd8 <__sfp_lock_release>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	; (8002de0 <__sfp_lock_release+0x8>)
 8002dda:	f000 b8ae 	b.w	8002f3a <__retarget_lock_release_recursive>
 8002dde:	bf00      	nop
 8002de0:	20000140 	.word	0x20000140

08002de4 <__sinit_lock_acquire>:
 8002de4:	4801      	ldr	r0, [pc, #4]	; (8002dec <__sinit_lock_acquire+0x8>)
 8002de6:	f000 b8a7 	b.w	8002f38 <__retarget_lock_acquire_recursive>
 8002dea:	bf00      	nop
 8002dec:	2000013b 	.word	0x2000013b

08002df0 <__sinit_lock_release>:
 8002df0:	4801      	ldr	r0, [pc, #4]	; (8002df8 <__sinit_lock_release+0x8>)
 8002df2:	f000 b8a2 	b.w	8002f3a <__retarget_lock_release_recursive>
 8002df6:	bf00      	nop
 8002df8:	2000013b 	.word	0x2000013b

08002dfc <__sinit>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	f7ff fff0 	bl	8002de4 <__sinit_lock_acquire>
 8002e04:	69a3      	ldr	r3, [r4, #24]
 8002e06:	b11b      	cbz	r3, 8002e10 <__sinit+0x14>
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e0c:	f7ff bff0 	b.w	8002df0 <__sinit_lock_release>
 8002e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e14:	6523      	str	r3, [r4, #80]	; 0x50
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <__sinit+0x68>)
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <__sinit+0x6c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e1e:	42a3      	cmp	r3, r4
 8002e20:	bf04      	itt	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	61a3      	streq	r3, [r4, #24]
 8002e26:	4620      	mov	r0, r4
 8002e28:	f000 f820 	bl	8002e6c <__sfp>
 8002e2c:	6060      	str	r0, [r4, #4]
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f000 f81c 	bl	8002e6c <__sfp>
 8002e34:	60a0      	str	r0, [r4, #8]
 8002e36:	4620      	mov	r0, r4
 8002e38:	f000 f818 	bl	8002e6c <__sfp>
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60e0      	str	r0, [r4, #12]
 8002e40:	2104      	movs	r1, #4
 8002e42:	6860      	ldr	r0, [r4, #4]
 8002e44:	f7ff ff82 	bl	8002d4c <std>
 8002e48:	68a0      	ldr	r0, [r4, #8]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2109      	movs	r1, #9
 8002e4e:	f7ff ff7d 	bl	8002d4c <std>
 8002e52:	68e0      	ldr	r0, [r4, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	2112      	movs	r1, #18
 8002e58:	f7ff ff78 	bl	8002d4c <std>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61a3      	str	r3, [r4, #24]
 8002e60:	e7d2      	b.n	8002e08 <__sinit+0xc>
 8002e62:	bf00      	nop
 8002e64:	08003c8c 	.word	0x08003c8c
 8002e68:	08002d95 	.word	0x08002d95

08002e6c <__sfp>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	4607      	mov	r7, r0
 8002e70:	f7ff ffac 	bl	8002dcc <__sfp_lock_acquire>
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <__sfp+0x84>)
 8002e76:	681e      	ldr	r6, [r3, #0]
 8002e78:	69b3      	ldr	r3, [r6, #24]
 8002e7a:	b913      	cbnz	r3, 8002e82 <__sfp+0x16>
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f7ff ffbd 	bl	8002dfc <__sinit>
 8002e82:	3648      	adds	r6, #72	; 0x48
 8002e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	d503      	bpl.n	8002e94 <__sfp+0x28>
 8002e8c:	6833      	ldr	r3, [r6, #0]
 8002e8e:	b30b      	cbz	r3, 8002ed4 <__sfp+0x68>
 8002e90:	6836      	ldr	r6, [r6, #0]
 8002e92:	e7f7      	b.n	8002e84 <__sfp+0x18>
 8002e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e98:	b9d5      	cbnz	r5, 8002ed0 <__sfp+0x64>
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <__sfp+0x88>)
 8002e9c:	60e3      	str	r3, [r4, #12]
 8002e9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ea4:	f000 f847 	bl	8002f36 <__retarget_lock_init_recursive>
 8002ea8:	f7ff ff96 	bl	8002dd8 <__sfp_lock_release>
 8002eac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002eb4:	6025      	str	r5, [r4, #0]
 8002eb6:	61a5      	str	r5, [r4, #24]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ec0:	f7ff ff24 	bl	8002d0c <memset>
 8002ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ecc:	4620      	mov	r0, r4
 8002ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed0:	3468      	adds	r4, #104	; 0x68
 8002ed2:	e7d9      	b.n	8002e88 <__sfp+0x1c>
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f7ff ff62 	bl	8002da0 <__sfmoreglue>
 8002edc:	4604      	mov	r4, r0
 8002ede:	6030      	str	r0, [r6, #0]
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d1d5      	bne.n	8002e90 <__sfp+0x24>
 8002ee4:	f7ff ff78 	bl	8002dd8 <__sfp_lock_release>
 8002ee8:	230c      	movs	r3, #12
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	e7ee      	b.n	8002ecc <__sfp+0x60>
 8002eee:	bf00      	nop
 8002ef0:	08003c8c 	.word	0x08003c8c
 8002ef4:	ffff0001 	.word	0xffff0001

08002ef8 <_fwalk_reent>:
 8002ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002efc:	4606      	mov	r6, r0
 8002efe:	4688      	mov	r8, r1
 8002f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f04:	2700      	movs	r7, #0
 8002f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8002f0e:	d505      	bpl.n	8002f1c <_fwalk_reent+0x24>
 8002f10:	6824      	ldr	r4, [r4, #0]
 8002f12:	2c00      	cmp	r4, #0
 8002f14:	d1f7      	bne.n	8002f06 <_fwalk_reent+0xe>
 8002f16:	4638      	mov	r0, r7
 8002f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1c:	89ab      	ldrh	r3, [r5, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d907      	bls.n	8002f32 <_fwalk_reent+0x3a>
 8002f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f26:	3301      	adds	r3, #1
 8002f28:	d003      	beq.n	8002f32 <_fwalk_reent+0x3a>
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	47c0      	blx	r8
 8002f30:	4307      	orrs	r7, r0
 8002f32:	3568      	adds	r5, #104	; 0x68
 8002f34:	e7e9      	b.n	8002f0a <_fwalk_reent+0x12>

08002f36 <__retarget_lock_init_recursive>:
 8002f36:	4770      	bx	lr

08002f38 <__retarget_lock_acquire_recursive>:
 8002f38:	4770      	bx	lr

08002f3a <__retarget_lock_release_recursive>:
 8002f3a:	4770      	bx	lr

08002f3c <_malloc_r>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	1ccd      	adds	r5, r1, #3
 8002f40:	f025 0503 	bic.w	r5, r5, #3
 8002f44:	3508      	adds	r5, #8
 8002f46:	2d0c      	cmp	r5, #12
 8002f48:	bf38      	it	cc
 8002f4a:	250c      	movcc	r5, #12
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	4606      	mov	r6, r0
 8002f50:	db01      	blt.n	8002f56 <_malloc_r+0x1a>
 8002f52:	42a9      	cmp	r1, r5
 8002f54:	d903      	bls.n	8002f5e <_malloc_r+0x22>
 8002f56:	230c      	movs	r3, #12
 8002f58:	6033      	str	r3, [r6, #0]
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5e:	f000 fda3 	bl	8003aa8 <__malloc_lock>
 8002f62:	4921      	ldr	r1, [pc, #132]	; (8002fe8 <_malloc_r+0xac>)
 8002f64:	680a      	ldr	r2, [r1, #0]
 8002f66:	4614      	mov	r4, r2
 8002f68:	b99c      	cbnz	r4, 8002f92 <_malloc_r+0x56>
 8002f6a:	4f20      	ldr	r7, [pc, #128]	; (8002fec <_malloc_r+0xb0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b923      	cbnz	r3, 8002f7a <_malloc_r+0x3e>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4630      	mov	r0, r6
 8002f74:	f000 fb2a 	bl	80035cc <_sbrk_r>
 8002f78:	6038      	str	r0, [r7, #0]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 fb25 	bl	80035cc <_sbrk_r>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	d123      	bne.n	8002fce <_malloc_r+0x92>
 8002f86:	230c      	movs	r3, #12
 8002f88:	6033      	str	r3, [r6, #0]
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	f000 fd92 	bl	8003ab4 <__malloc_unlock>
 8002f90:	e7e3      	b.n	8002f5a <_malloc_r+0x1e>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	1b5b      	subs	r3, r3, r5
 8002f96:	d417      	bmi.n	8002fc8 <_malloc_r+0x8c>
 8002f98:	2b0b      	cmp	r3, #11
 8002f9a:	d903      	bls.n	8002fa4 <_malloc_r+0x68>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	441c      	add	r4, r3
 8002fa0:	6025      	str	r5, [r4, #0]
 8002fa2:	e004      	b.n	8002fae <_malloc_r+0x72>
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	42a2      	cmp	r2, r4
 8002fa8:	bf0c      	ite	eq
 8002faa:	600b      	streq	r3, [r1, #0]
 8002fac:	6053      	strne	r3, [r2, #4]
 8002fae:	4630      	mov	r0, r6
 8002fb0:	f000 fd80 	bl	8003ab4 <__malloc_unlock>
 8002fb4:	f104 000b 	add.w	r0, r4, #11
 8002fb8:	1d23      	adds	r3, r4, #4
 8002fba:	f020 0007 	bic.w	r0, r0, #7
 8002fbe:	1ac2      	subs	r2, r0, r3
 8002fc0:	d0cc      	beq.n	8002f5c <_malloc_r+0x20>
 8002fc2:	1a1b      	subs	r3, r3, r0
 8002fc4:	50a3      	str	r3, [r4, r2]
 8002fc6:	e7c9      	b.n	8002f5c <_malloc_r+0x20>
 8002fc8:	4622      	mov	r2, r4
 8002fca:	6864      	ldr	r4, [r4, #4]
 8002fcc:	e7cc      	b.n	8002f68 <_malloc_r+0x2c>
 8002fce:	1cc4      	adds	r4, r0, #3
 8002fd0:	f024 0403 	bic.w	r4, r4, #3
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d0e3      	beq.n	8002fa0 <_malloc_r+0x64>
 8002fd8:	1a21      	subs	r1, r4, r0
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f000 faf6 	bl	80035cc <_sbrk_r>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d1dd      	bne.n	8002fa0 <_malloc_r+0x64>
 8002fe4:	e7cf      	b.n	8002f86 <_malloc_r+0x4a>
 8002fe6:	bf00      	nop
 8002fe8:	2000008c 	.word	0x2000008c
 8002fec:	20000090 	.word	0x20000090

08002ff0 <__sfputc_r>:
 8002ff0:	6893      	ldr	r3, [r2, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	b410      	push	{r4}
 8002ff8:	6093      	str	r3, [r2, #8]
 8002ffa:	da08      	bge.n	800300e <__sfputc_r+0x1e>
 8002ffc:	6994      	ldr	r4, [r2, #24]
 8002ffe:	42a3      	cmp	r3, r4
 8003000:	db01      	blt.n	8003006 <__sfputc_r+0x16>
 8003002:	290a      	cmp	r1, #10
 8003004:	d103      	bne.n	800300e <__sfputc_r+0x1e>
 8003006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300a:	f000 bb33 	b.w	8003674 <__swbuf_r>
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	1c58      	adds	r0, r3, #1
 8003012:	6010      	str	r0, [r2, #0]
 8003014:	7019      	strb	r1, [r3, #0]
 8003016:	4608      	mov	r0, r1
 8003018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800301c:	4770      	bx	lr

0800301e <__sfputs_r>:
 800301e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003020:	4606      	mov	r6, r0
 8003022:	460f      	mov	r7, r1
 8003024:	4614      	mov	r4, r2
 8003026:	18d5      	adds	r5, r2, r3
 8003028:	42ac      	cmp	r4, r5
 800302a:	d101      	bne.n	8003030 <__sfputs_r+0x12>
 800302c:	2000      	movs	r0, #0
 800302e:	e007      	b.n	8003040 <__sfputs_r+0x22>
 8003030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003034:	463a      	mov	r2, r7
 8003036:	4630      	mov	r0, r6
 8003038:	f7ff ffda 	bl	8002ff0 <__sfputc_r>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d1f3      	bne.n	8003028 <__sfputs_r+0xa>
 8003040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003044 <_vfiprintf_r>:
 8003044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003048:	460d      	mov	r5, r1
 800304a:	b09d      	sub	sp, #116	; 0x74
 800304c:	4614      	mov	r4, r2
 800304e:	4698      	mov	r8, r3
 8003050:	4606      	mov	r6, r0
 8003052:	b118      	cbz	r0, 800305c <_vfiprintf_r+0x18>
 8003054:	6983      	ldr	r3, [r0, #24]
 8003056:	b90b      	cbnz	r3, 800305c <_vfiprintf_r+0x18>
 8003058:	f7ff fed0 	bl	8002dfc <__sinit>
 800305c:	4b89      	ldr	r3, [pc, #548]	; (8003284 <_vfiprintf_r+0x240>)
 800305e:	429d      	cmp	r5, r3
 8003060:	d11b      	bne.n	800309a <_vfiprintf_r+0x56>
 8003062:	6875      	ldr	r5, [r6, #4]
 8003064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003066:	07d9      	lsls	r1, r3, #31
 8003068:	d405      	bmi.n	8003076 <_vfiprintf_r+0x32>
 800306a:	89ab      	ldrh	r3, [r5, #12]
 800306c:	059a      	lsls	r2, r3, #22
 800306e:	d402      	bmi.n	8003076 <_vfiprintf_r+0x32>
 8003070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003072:	f7ff ff61 	bl	8002f38 <__retarget_lock_acquire_recursive>
 8003076:	89ab      	ldrh	r3, [r5, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	d501      	bpl.n	8003080 <_vfiprintf_r+0x3c>
 800307c:	692b      	ldr	r3, [r5, #16]
 800307e:	b9eb      	cbnz	r3, 80030bc <_vfiprintf_r+0x78>
 8003080:	4629      	mov	r1, r5
 8003082:	4630      	mov	r0, r6
 8003084:	f000 fb5a 	bl	800373c <__swsetup_r>
 8003088:	b1c0      	cbz	r0, 80030bc <_vfiprintf_r+0x78>
 800308a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800308c:	07dc      	lsls	r4, r3, #31
 800308e:	d50e      	bpl.n	80030ae <_vfiprintf_r+0x6a>
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	b01d      	add	sp, #116	; 0x74
 8003096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800309a:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <_vfiprintf_r+0x244>)
 800309c:	429d      	cmp	r5, r3
 800309e:	d101      	bne.n	80030a4 <_vfiprintf_r+0x60>
 80030a0:	68b5      	ldr	r5, [r6, #8]
 80030a2:	e7df      	b.n	8003064 <_vfiprintf_r+0x20>
 80030a4:	4b79      	ldr	r3, [pc, #484]	; (800328c <_vfiprintf_r+0x248>)
 80030a6:	429d      	cmp	r5, r3
 80030a8:	bf08      	it	eq
 80030aa:	68f5      	ldreq	r5, [r6, #12]
 80030ac:	e7da      	b.n	8003064 <_vfiprintf_r+0x20>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	0598      	lsls	r0, r3, #22
 80030b2:	d4ed      	bmi.n	8003090 <_vfiprintf_r+0x4c>
 80030b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030b6:	f7ff ff40 	bl	8002f3a <__retarget_lock_release_recursive>
 80030ba:	e7e9      	b.n	8003090 <_vfiprintf_r+0x4c>
 80030bc:	2300      	movs	r3, #0
 80030be:	9309      	str	r3, [sp, #36]	; 0x24
 80030c0:	2320      	movs	r3, #32
 80030c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ca:	2330      	movs	r3, #48	; 0x30
 80030cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003290 <_vfiprintf_r+0x24c>
 80030d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d4:	f04f 0901 	mov.w	r9, #1
 80030d8:	4623      	mov	r3, r4
 80030da:	469a      	mov	sl, r3
 80030dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030e0:	b10a      	cbz	r2, 80030e6 <_vfiprintf_r+0xa2>
 80030e2:	2a25      	cmp	r2, #37	; 0x25
 80030e4:	d1f9      	bne.n	80030da <_vfiprintf_r+0x96>
 80030e6:	ebba 0b04 	subs.w	fp, sl, r4
 80030ea:	d00b      	beq.n	8003104 <_vfiprintf_r+0xc0>
 80030ec:	465b      	mov	r3, fp
 80030ee:	4622      	mov	r2, r4
 80030f0:	4629      	mov	r1, r5
 80030f2:	4630      	mov	r0, r6
 80030f4:	f7ff ff93 	bl	800301e <__sfputs_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	f000 80aa 	beq.w	8003252 <_vfiprintf_r+0x20e>
 80030fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003100:	445a      	add	r2, fp
 8003102:	9209      	str	r2, [sp, #36]	; 0x24
 8003104:	f89a 3000 	ldrb.w	r3, [sl]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a2 	beq.w	8003252 <_vfiprintf_r+0x20e>
 800310e:	2300      	movs	r3, #0
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003118:	f10a 0a01 	add.w	sl, sl, #1
 800311c:	9304      	str	r3, [sp, #16]
 800311e:	9307      	str	r3, [sp, #28]
 8003120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003124:	931a      	str	r3, [sp, #104]	; 0x68
 8003126:	4654      	mov	r4, sl
 8003128:	2205      	movs	r2, #5
 800312a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312e:	4858      	ldr	r0, [pc, #352]	; (8003290 <_vfiprintf_r+0x24c>)
 8003130:	f7fd f886 	bl	8000240 <memchr>
 8003134:	9a04      	ldr	r2, [sp, #16]
 8003136:	b9d8      	cbnz	r0, 8003170 <_vfiprintf_r+0x12c>
 8003138:	06d1      	lsls	r1, r2, #27
 800313a:	bf44      	itt	mi
 800313c:	2320      	movmi	r3, #32
 800313e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003142:	0713      	lsls	r3, r2, #28
 8003144:	bf44      	itt	mi
 8003146:	232b      	movmi	r3, #43	; 0x2b
 8003148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314c:	f89a 3000 	ldrb.w	r3, [sl]
 8003150:	2b2a      	cmp	r3, #42	; 0x2a
 8003152:	d015      	beq.n	8003180 <_vfiprintf_r+0x13c>
 8003154:	9a07      	ldr	r2, [sp, #28]
 8003156:	4654      	mov	r4, sl
 8003158:	2000      	movs	r0, #0
 800315a:	f04f 0c0a 	mov.w	ip, #10
 800315e:	4621      	mov	r1, r4
 8003160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003164:	3b30      	subs	r3, #48	; 0x30
 8003166:	2b09      	cmp	r3, #9
 8003168:	d94e      	bls.n	8003208 <_vfiprintf_r+0x1c4>
 800316a:	b1b0      	cbz	r0, 800319a <_vfiprintf_r+0x156>
 800316c:	9207      	str	r2, [sp, #28]
 800316e:	e014      	b.n	800319a <_vfiprintf_r+0x156>
 8003170:	eba0 0308 	sub.w	r3, r0, r8
 8003174:	fa09 f303 	lsl.w	r3, r9, r3
 8003178:	4313      	orrs	r3, r2
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	46a2      	mov	sl, r4
 800317e:	e7d2      	b.n	8003126 <_vfiprintf_r+0xe2>
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	1d19      	adds	r1, r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	9103      	str	r1, [sp, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	bfbb      	ittet	lt
 800318c:	425b      	neglt	r3, r3
 800318e:	f042 0202 	orrlt.w	r2, r2, #2
 8003192:	9307      	strge	r3, [sp, #28]
 8003194:	9307      	strlt	r3, [sp, #28]
 8003196:	bfb8      	it	lt
 8003198:	9204      	strlt	r2, [sp, #16]
 800319a:	7823      	ldrb	r3, [r4, #0]
 800319c:	2b2e      	cmp	r3, #46	; 0x2e
 800319e:	d10c      	bne.n	80031ba <_vfiprintf_r+0x176>
 80031a0:	7863      	ldrb	r3, [r4, #1]
 80031a2:	2b2a      	cmp	r3, #42	; 0x2a
 80031a4:	d135      	bne.n	8003212 <_vfiprintf_r+0x1ce>
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	9203      	str	r2, [sp, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfb8      	it	lt
 80031b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031b6:	3402      	adds	r4, #2
 80031b8:	9305      	str	r3, [sp, #20]
 80031ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80032a0 <_vfiprintf_r+0x25c>
 80031be:	7821      	ldrb	r1, [r4, #0]
 80031c0:	2203      	movs	r2, #3
 80031c2:	4650      	mov	r0, sl
 80031c4:	f7fd f83c 	bl	8000240 <memchr>
 80031c8:	b140      	cbz	r0, 80031dc <_vfiprintf_r+0x198>
 80031ca:	2340      	movs	r3, #64	; 0x40
 80031cc:	eba0 000a 	sub.w	r0, r0, sl
 80031d0:	fa03 f000 	lsl.w	r0, r3, r0
 80031d4:	9b04      	ldr	r3, [sp, #16]
 80031d6:	4303      	orrs	r3, r0
 80031d8:	3401      	adds	r4, #1
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e0:	482c      	ldr	r0, [pc, #176]	; (8003294 <_vfiprintf_r+0x250>)
 80031e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031e6:	2206      	movs	r2, #6
 80031e8:	f7fd f82a 	bl	8000240 <memchr>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d03f      	beq.n	8003270 <_vfiprintf_r+0x22c>
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <_vfiprintf_r+0x254>)
 80031f2:	bb1b      	cbnz	r3, 800323c <_vfiprintf_r+0x1f8>
 80031f4:	9b03      	ldr	r3, [sp, #12]
 80031f6:	3307      	adds	r3, #7
 80031f8:	f023 0307 	bic.w	r3, r3, #7
 80031fc:	3308      	adds	r3, #8
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003202:	443b      	add	r3, r7
 8003204:	9309      	str	r3, [sp, #36]	; 0x24
 8003206:	e767      	b.n	80030d8 <_vfiprintf_r+0x94>
 8003208:	fb0c 3202 	mla	r2, ip, r2, r3
 800320c:	460c      	mov	r4, r1
 800320e:	2001      	movs	r0, #1
 8003210:	e7a5      	b.n	800315e <_vfiprintf_r+0x11a>
 8003212:	2300      	movs	r3, #0
 8003214:	3401      	adds	r4, #1
 8003216:	9305      	str	r3, [sp, #20]
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 0c0a 	mov.w	ip, #10
 800321e:	4620      	mov	r0, r4
 8003220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003224:	3a30      	subs	r2, #48	; 0x30
 8003226:	2a09      	cmp	r2, #9
 8003228:	d903      	bls.n	8003232 <_vfiprintf_r+0x1ee>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0c5      	beq.n	80031ba <_vfiprintf_r+0x176>
 800322e:	9105      	str	r1, [sp, #20]
 8003230:	e7c3      	b.n	80031ba <_vfiprintf_r+0x176>
 8003232:	fb0c 2101 	mla	r1, ip, r1, r2
 8003236:	4604      	mov	r4, r0
 8003238:	2301      	movs	r3, #1
 800323a:	e7f0      	b.n	800321e <_vfiprintf_r+0x1da>
 800323c:	ab03      	add	r3, sp, #12
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	462a      	mov	r2, r5
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <_vfiprintf_r+0x258>)
 8003244:	a904      	add	r1, sp, #16
 8003246:	4630      	mov	r0, r6
 8003248:	f3af 8000 	nop.w
 800324c:	4607      	mov	r7, r0
 800324e:	1c78      	adds	r0, r7, #1
 8003250:	d1d6      	bne.n	8003200 <_vfiprintf_r+0x1bc>
 8003252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003254:	07d9      	lsls	r1, r3, #31
 8003256:	d405      	bmi.n	8003264 <_vfiprintf_r+0x220>
 8003258:	89ab      	ldrh	r3, [r5, #12]
 800325a:	059a      	lsls	r2, r3, #22
 800325c:	d402      	bmi.n	8003264 <_vfiprintf_r+0x220>
 800325e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003260:	f7ff fe6b 	bl	8002f3a <__retarget_lock_release_recursive>
 8003264:	89ab      	ldrh	r3, [r5, #12]
 8003266:	065b      	lsls	r3, r3, #25
 8003268:	f53f af12 	bmi.w	8003090 <_vfiprintf_r+0x4c>
 800326c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800326e:	e711      	b.n	8003094 <_vfiprintf_r+0x50>
 8003270:	ab03      	add	r3, sp, #12
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	462a      	mov	r2, r5
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <_vfiprintf_r+0x258>)
 8003278:	a904      	add	r1, sp, #16
 800327a:	4630      	mov	r0, r6
 800327c:	f000 f880 	bl	8003380 <_printf_i>
 8003280:	e7e4      	b.n	800324c <_vfiprintf_r+0x208>
 8003282:	bf00      	nop
 8003284:	08003cb0 	.word	0x08003cb0
 8003288:	08003cd0 	.word	0x08003cd0
 800328c:	08003c90 	.word	0x08003c90
 8003290:	08003cf0 	.word	0x08003cf0
 8003294:	08003cfa 	.word	0x08003cfa
 8003298:	00000000 	.word	0x00000000
 800329c:	0800301f 	.word	0x0800301f
 80032a0:	08003cf6 	.word	0x08003cf6

080032a4 <_printf_common>:
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	4616      	mov	r6, r2
 80032aa:	4699      	mov	r9, r3
 80032ac:	688a      	ldr	r2, [r1, #8]
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bfb8      	it	lt
 80032b8:	4613      	movlt	r3, r2
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032c0:	4607      	mov	r7, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b10a      	cbz	r2, 80032ca <_printf_common+0x26>
 80032c6:	3301      	adds	r3, #1
 80032c8:	6033      	str	r3, [r6, #0]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0699      	lsls	r1, r3, #26
 80032ce:	bf42      	ittt	mi
 80032d0:	6833      	ldrmi	r3, [r6, #0]
 80032d2:	3302      	addmi	r3, #2
 80032d4:	6033      	strmi	r3, [r6, #0]
 80032d6:	6825      	ldr	r5, [r4, #0]
 80032d8:	f015 0506 	ands.w	r5, r5, #6
 80032dc:	d106      	bne.n	80032ec <_printf_common+0x48>
 80032de:	f104 0a19 	add.w	sl, r4, #25
 80032e2:	68e3      	ldr	r3, [r4, #12]
 80032e4:	6832      	ldr	r2, [r6, #0]
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	42ab      	cmp	r3, r5
 80032ea:	dc26      	bgt.n	800333a <_printf_common+0x96>
 80032ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032f0:	1e13      	subs	r3, r2, #0
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	bf18      	it	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	0692      	lsls	r2, r2, #26
 80032fa:	d42b      	bmi.n	8003354 <_printf_common+0xb0>
 80032fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003300:	4649      	mov	r1, r9
 8003302:	4638      	mov	r0, r7
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d01e      	beq.n	8003348 <_printf_common+0xa4>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	68e5      	ldr	r5, [r4, #12]
 800330e:	6832      	ldr	r2, [r6, #0]
 8003310:	f003 0306 	and.w	r3, r3, #6
 8003314:	2b04      	cmp	r3, #4
 8003316:	bf08      	it	eq
 8003318:	1aad      	subeq	r5, r5, r2
 800331a:	68a3      	ldr	r3, [r4, #8]
 800331c:	6922      	ldr	r2, [r4, #16]
 800331e:	bf0c      	ite	eq
 8003320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003324:	2500      	movne	r5, #0
 8003326:	4293      	cmp	r3, r2
 8003328:	bfc4      	itt	gt
 800332a:	1a9b      	subgt	r3, r3, r2
 800332c:	18ed      	addgt	r5, r5, r3
 800332e:	2600      	movs	r6, #0
 8003330:	341a      	adds	r4, #26
 8003332:	42b5      	cmp	r5, r6
 8003334:	d11a      	bne.n	800336c <_printf_common+0xc8>
 8003336:	2000      	movs	r0, #0
 8003338:	e008      	b.n	800334c <_printf_common+0xa8>
 800333a:	2301      	movs	r3, #1
 800333c:	4652      	mov	r2, sl
 800333e:	4649      	mov	r1, r9
 8003340:	4638      	mov	r0, r7
 8003342:	47c0      	blx	r8
 8003344:	3001      	adds	r0, #1
 8003346:	d103      	bne.n	8003350 <_printf_common+0xac>
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	3501      	adds	r5, #1
 8003352:	e7c6      	b.n	80032e2 <_printf_common+0x3e>
 8003354:	18e1      	adds	r1, r4, r3
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	2030      	movs	r0, #48	; 0x30
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800335e:	4422      	add	r2, r4
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003368:	3302      	adds	r3, #2
 800336a:	e7c7      	b.n	80032fc <_printf_common+0x58>
 800336c:	2301      	movs	r3, #1
 800336e:	4622      	mov	r2, r4
 8003370:	4649      	mov	r1, r9
 8003372:	4638      	mov	r0, r7
 8003374:	47c0      	blx	r8
 8003376:	3001      	adds	r0, #1
 8003378:	d0e6      	beq.n	8003348 <_printf_common+0xa4>
 800337a:	3601      	adds	r6, #1
 800337c:	e7d9      	b.n	8003332 <_printf_common+0x8e>
	...

08003380 <_printf_i>:
 8003380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	460c      	mov	r4, r1
 8003386:	4691      	mov	r9, r2
 8003388:	7e27      	ldrb	r7, [r4, #24]
 800338a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800338c:	2f78      	cmp	r7, #120	; 0x78
 800338e:	4680      	mov	r8, r0
 8003390:	469a      	mov	sl, r3
 8003392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003396:	d807      	bhi.n	80033a8 <_printf_i+0x28>
 8003398:	2f62      	cmp	r7, #98	; 0x62
 800339a:	d80a      	bhi.n	80033b2 <_printf_i+0x32>
 800339c:	2f00      	cmp	r7, #0
 800339e:	f000 80d8 	beq.w	8003552 <_printf_i+0x1d2>
 80033a2:	2f58      	cmp	r7, #88	; 0x58
 80033a4:	f000 80a3 	beq.w	80034ee <_printf_i+0x16e>
 80033a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033b0:	e03a      	b.n	8003428 <_printf_i+0xa8>
 80033b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033b6:	2b15      	cmp	r3, #21
 80033b8:	d8f6      	bhi.n	80033a8 <_printf_i+0x28>
 80033ba:	a001      	add	r0, pc, #4	; (adr r0, 80033c0 <_printf_i+0x40>)
 80033bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033c0:	08003419 	.word	0x08003419
 80033c4:	0800342d 	.word	0x0800342d
 80033c8:	080033a9 	.word	0x080033a9
 80033cc:	080033a9 	.word	0x080033a9
 80033d0:	080033a9 	.word	0x080033a9
 80033d4:	080033a9 	.word	0x080033a9
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033a9 	.word	0x080033a9
 80033e0:	080033a9 	.word	0x080033a9
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	08003539 	.word	0x08003539
 80033f0:	0800345d 	.word	0x0800345d
 80033f4:	0800351b 	.word	0x0800351b
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	0800355b 	.word	0x0800355b
 8003404:	080033a9 	.word	0x080033a9
 8003408:	0800345d 	.word	0x0800345d
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	08003523 	.word	0x08003523
 8003418:	680b      	ldr	r3, [r1, #0]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	600a      	str	r2, [r1, #0]
 8003420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e0a3      	b.n	8003574 <_printf_i+0x1f4>
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	6808      	ldr	r0, [r1, #0]
 8003430:	062e      	lsls	r6, r5, #24
 8003432:	f100 0304 	add.w	r3, r0, #4
 8003436:	d50a      	bpl.n	800344e <_printf_i+0xce>
 8003438:	6805      	ldr	r5, [r0, #0]
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	2d00      	cmp	r5, #0
 800343e:	da03      	bge.n	8003448 <_printf_i+0xc8>
 8003440:	232d      	movs	r3, #45	; 0x2d
 8003442:	426d      	negs	r5, r5
 8003444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003448:	485e      	ldr	r0, [pc, #376]	; (80035c4 <_printf_i+0x244>)
 800344a:	230a      	movs	r3, #10
 800344c:	e019      	b.n	8003482 <_printf_i+0x102>
 800344e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003452:	6805      	ldr	r5, [r0, #0]
 8003454:	600b      	str	r3, [r1, #0]
 8003456:	bf18      	it	ne
 8003458:	b22d      	sxthne	r5, r5
 800345a:	e7ef      	b.n	800343c <_printf_i+0xbc>
 800345c:	680b      	ldr	r3, [r1, #0]
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	1d18      	adds	r0, r3, #4
 8003462:	6008      	str	r0, [r1, #0]
 8003464:	0628      	lsls	r0, r5, #24
 8003466:	d501      	bpl.n	800346c <_printf_i+0xec>
 8003468:	681d      	ldr	r5, [r3, #0]
 800346a:	e002      	b.n	8003472 <_printf_i+0xf2>
 800346c:	0669      	lsls	r1, r5, #25
 800346e:	d5fb      	bpl.n	8003468 <_printf_i+0xe8>
 8003470:	881d      	ldrh	r5, [r3, #0]
 8003472:	4854      	ldr	r0, [pc, #336]	; (80035c4 <_printf_i+0x244>)
 8003474:	2f6f      	cmp	r7, #111	; 0x6f
 8003476:	bf0c      	ite	eq
 8003478:	2308      	moveq	r3, #8
 800347a:	230a      	movne	r3, #10
 800347c:	2100      	movs	r1, #0
 800347e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003482:	6866      	ldr	r6, [r4, #4]
 8003484:	60a6      	str	r6, [r4, #8]
 8003486:	2e00      	cmp	r6, #0
 8003488:	bfa2      	ittt	ge
 800348a:	6821      	ldrge	r1, [r4, #0]
 800348c:	f021 0104 	bicge.w	r1, r1, #4
 8003490:	6021      	strge	r1, [r4, #0]
 8003492:	b90d      	cbnz	r5, 8003498 <_printf_i+0x118>
 8003494:	2e00      	cmp	r6, #0
 8003496:	d04d      	beq.n	8003534 <_printf_i+0x1b4>
 8003498:	4616      	mov	r6, r2
 800349a:	fbb5 f1f3 	udiv	r1, r5, r3
 800349e:	fb03 5711 	mls	r7, r3, r1, r5
 80034a2:	5dc7      	ldrb	r7, [r0, r7]
 80034a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034a8:	462f      	mov	r7, r5
 80034aa:	42bb      	cmp	r3, r7
 80034ac:	460d      	mov	r5, r1
 80034ae:	d9f4      	bls.n	800349a <_printf_i+0x11a>
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d10b      	bne.n	80034cc <_printf_i+0x14c>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	07df      	lsls	r7, r3, #31
 80034b8:	d508      	bpl.n	80034cc <_printf_i+0x14c>
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	6861      	ldr	r1, [r4, #4]
 80034be:	4299      	cmp	r1, r3
 80034c0:	bfde      	ittt	le
 80034c2:	2330      	movle	r3, #48	; 0x30
 80034c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034cc:	1b92      	subs	r2, r2, r6
 80034ce:	6122      	str	r2, [r4, #16]
 80034d0:	f8cd a000 	str.w	sl, [sp]
 80034d4:	464b      	mov	r3, r9
 80034d6:	aa03      	add	r2, sp, #12
 80034d8:	4621      	mov	r1, r4
 80034da:	4640      	mov	r0, r8
 80034dc:	f7ff fee2 	bl	80032a4 <_printf_common>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d14c      	bne.n	800357e <_printf_i+0x1fe>
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	b004      	add	sp, #16
 80034ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ee:	4835      	ldr	r0, [pc, #212]	; (80035c4 <_printf_i+0x244>)
 80034f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	680e      	ldr	r6, [r1, #0]
 80034f8:	061f      	lsls	r7, r3, #24
 80034fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80034fe:	600e      	str	r6, [r1, #0]
 8003500:	d514      	bpl.n	800352c <_printf_i+0x1ac>
 8003502:	07d9      	lsls	r1, r3, #31
 8003504:	bf44      	itt	mi
 8003506:	f043 0320 	orrmi.w	r3, r3, #32
 800350a:	6023      	strmi	r3, [r4, #0]
 800350c:	b91d      	cbnz	r5, 8003516 <_printf_i+0x196>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	f023 0320 	bic.w	r3, r3, #32
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	2310      	movs	r3, #16
 8003518:	e7b0      	b.n	800347c <_printf_i+0xfc>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f043 0320 	orr.w	r3, r3, #32
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	2378      	movs	r3, #120	; 0x78
 8003524:	4828      	ldr	r0, [pc, #160]	; (80035c8 <_printf_i+0x248>)
 8003526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800352a:	e7e3      	b.n	80034f4 <_printf_i+0x174>
 800352c:	065e      	lsls	r6, r3, #25
 800352e:	bf48      	it	mi
 8003530:	b2ad      	uxthmi	r5, r5
 8003532:	e7e6      	b.n	8003502 <_printf_i+0x182>
 8003534:	4616      	mov	r6, r2
 8003536:	e7bb      	b.n	80034b0 <_printf_i+0x130>
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	6826      	ldr	r6, [r4, #0]
 800353c:	6960      	ldr	r0, [r4, #20]
 800353e:	1d1d      	adds	r5, r3, #4
 8003540:	600d      	str	r5, [r1, #0]
 8003542:	0635      	lsls	r5, r6, #24
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	d501      	bpl.n	800354c <_printf_i+0x1cc>
 8003548:	6018      	str	r0, [r3, #0]
 800354a:	e002      	b.n	8003552 <_printf_i+0x1d2>
 800354c:	0671      	lsls	r1, r6, #25
 800354e:	d5fb      	bpl.n	8003548 <_printf_i+0x1c8>
 8003550:	8018      	strh	r0, [r3, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	6123      	str	r3, [r4, #16]
 8003556:	4616      	mov	r6, r2
 8003558:	e7ba      	b.n	80034d0 <_printf_i+0x150>
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	1d1a      	adds	r2, r3, #4
 800355e:	600a      	str	r2, [r1, #0]
 8003560:	681e      	ldr	r6, [r3, #0]
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	2100      	movs	r1, #0
 8003566:	4630      	mov	r0, r6
 8003568:	f7fc fe6a 	bl	8000240 <memchr>
 800356c:	b108      	cbz	r0, 8003572 <_printf_i+0x1f2>
 800356e:	1b80      	subs	r0, r0, r6
 8003570:	6060      	str	r0, [r4, #4]
 8003572:	6863      	ldr	r3, [r4, #4]
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	2300      	movs	r3, #0
 8003578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800357c:	e7a8      	b.n	80034d0 <_printf_i+0x150>
 800357e:	6923      	ldr	r3, [r4, #16]
 8003580:	4632      	mov	r2, r6
 8003582:	4649      	mov	r1, r9
 8003584:	4640      	mov	r0, r8
 8003586:	47d0      	blx	sl
 8003588:	3001      	adds	r0, #1
 800358a:	d0ab      	beq.n	80034e4 <_printf_i+0x164>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d413      	bmi.n	80035ba <_printf_i+0x23a>
 8003592:	68e0      	ldr	r0, [r4, #12]
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	4298      	cmp	r0, r3
 8003598:	bfb8      	it	lt
 800359a:	4618      	movlt	r0, r3
 800359c:	e7a4      	b.n	80034e8 <_printf_i+0x168>
 800359e:	2301      	movs	r3, #1
 80035a0:	4632      	mov	r2, r6
 80035a2:	4649      	mov	r1, r9
 80035a4:	4640      	mov	r0, r8
 80035a6:	47d0      	blx	sl
 80035a8:	3001      	adds	r0, #1
 80035aa:	d09b      	beq.n	80034e4 <_printf_i+0x164>
 80035ac:	3501      	adds	r5, #1
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	9903      	ldr	r1, [sp, #12]
 80035b2:	1a5b      	subs	r3, r3, r1
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	dcf2      	bgt.n	800359e <_printf_i+0x21e>
 80035b8:	e7eb      	b.n	8003592 <_printf_i+0x212>
 80035ba:	2500      	movs	r5, #0
 80035bc:	f104 0619 	add.w	r6, r4, #25
 80035c0:	e7f5      	b.n	80035ae <_printf_i+0x22e>
 80035c2:	bf00      	nop
 80035c4:	08003d01 	.word	0x08003d01
 80035c8:	08003d12 	.word	0x08003d12

080035cc <_sbrk_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4d06      	ldr	r5, [pc, #24]	; (80035e8 <_sbrk_r+0x1c>)
 80035d0:	2300      	movs	r3, #0
 80035d2:	4604      	mov	r4, r0
 80035d4:	4608      	mov	r0, r1
 80035d6:	602b      	str	r3, [r5, #0]
 80035d8:	f000 fb1e 	bl	8003c18 <_sbrk>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d102      	bne.n	80035e6 <_sbrk_r+0x1a>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <_sbrk_r+0x1a>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	20000144 	.word	0x20000144

080035ec <__sread>:
 80035ec:	b510      	push	{r4, lr}
 80035ee:	460c      	mov	r4, r1
 80035f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f4:	f000 fab4 	bl	8003b60 <_read_r>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	bfab      	itete	ge
 80035fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003600:	181b      	addge	r3, r3, r0
 8003602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003606:	bfac      	ite	ge
 8003608:	6563      	strge	r3, [r4, #84]	; 0x54
 800360a:	81a3      	strhlt	r3, [r4, #12]
 800360c:	bd10      	pop	{r4, pc}

0800360e <__swrite>:
 800360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003612:	461f      	mov	r7, r3
 8003614:	898b      	ldrh	r3, [r1, #12]
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	4605      	mov	r5, r0
 800361a:	460c      	mov	r4, r1
 800361c:	4616      	mov	r6, r2
 800361e:	d505      	bpl.n	800362c <__swrite+0x1e>
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	2302      	movs	r3, #2
 8003626:	2200      	movs	r2, #0
 8003628:	f000 f9c8 	bl	80039bc <_lseek_r>
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	4632      	mov	r2, r6
 800363a:	463b      	mov	r3, r7
 800363c:	4628      	mov	r0, r5
 800363e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	f000 b869 	b.w	8003718 <_write_r>

08003646 <__sseek>:
 8003646:	b510      	push	{r4, lr}
 8003648:	460c      	mov	r4, r1
 800364a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800364e:	f000 f9b5 	bl	80039bc <_lseek_r>
 8003652:	1c43      	adds	r3, r0, #1
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	bf15      	itete	ne
 8003658:	6560      	strne	r0, [r4, #84]	; 0x54
 800365a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800365e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003662:	81a3      	strheq	r3, [r4, #12]
 8003664:	bf18      	it	ne
 8003666:	81a3      	strhne	r3, [r4, #12]
 8003668:	bd10      	pop	{r4, pc}

0800366a <__sclose>:
 800366a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366e:	f000 b8d3 	b.w	8003818 <_close_r>
	...

08003674 <__swbuf_r>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	460e      	mov	r6, r1
 8003678:	4614      	mov	r4, r2
 800367a:	4605      	mov	r5, r0
 800367c:	b118      	cbz	r0, 8003686 <__swbuf_r+0x12>
 800367e:	6983      	ldr	r3, [r0, #24]
 8003680:	b90b      	cbnz	r3, 8003686 <__swbuf_r+0x12>
 8003682:	f7ff fbbb 	bl	8002dfc <__sinit>
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <__swbuf_r+0x98>)
 8003688:	429c      	cmp	r4, r3
 800368a:	d12b      	bne.n	80036e4 <__swbuf_r+0x70>
 800368c:	686c      	ldr	r4, [r5, #4]
 800368e:	69a3      	ldr	r3, [r4, #24]
 8003690:	60a3      	str	r3, [r4, #8]
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	071a      	lsls	r2, r3, #28
 8003696:	d52f      	bpl.n	80036f8 <__swbuf_r+0x84>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	b36b      	cbz	r3, 80036f8 <__swbuf_r+0x84>
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	1ac0      	subs	r0, r0, r3
 80036a2:	6963      	ldr	r3, [r4, #20]
 80036a4:	b2f6      	uxtb	r6, r6
 80036a6:	4283      	cmp	r3, r0
 80036a8:	4637      	mov	r7, r6
 80036aa:	dc04      	bgt.n	80036b6 <__swbuf_r+0x42>
 80036ac:	4621      	mov	r1, r4
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 f948 	bl	8003944 <_fflush_r>
 80036b4:	bb30      	cbnz	r0, 8003704 <__swbuf_r+0x90>
 80036b6:	68a3      	ldr	r3, [r4, #8]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60a3      	str	r3, [r4, #8]
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	6022      	str	r2, [r4, #0]
 80036c2:	701e      	strb	r6, [r3, #0]
 80036c4:	6963      	ldr	r3, [r4, #20]
 80036c6:	3001      	adds	r0, #1
 80036c8:	4283      	cmp	r3, r0
 80036ca:	d004      	beq.n	80036d6 <__swbuf_r+0x62>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	07db      	lsls	r3, r3, #31
 80036d0:	d506      	bpl.n	80036e0 <__swbuf_r+0x6c>
 80036d2:	2e0a      	cmp	r6, #10
 80036d4:	d104      	bne.n	80036e0 <__swbuf_r+0x6c>
 80036d6:	4621      	mov	r1, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f933 	bl	8003944 <_fflush_r>
 80036de:	b988      	cbnz	r0, 8003704 <__swbuf_r+0x90>
 80036e0:	4638      	mov	r0, r7
 80036e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <__swbuf_r+0x9c>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d101      	bne.n	80036ee <__swbuf_r+0x7a>
 80036ea:	68ac      	ldr	r4, [r5, #8]
 80036ec:	e7cf      	b.n	800368e <__swbuf_r+0x1a>
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <__swbuf_r+0xa0>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	bf08      	it	eq
 80036f4:	68ec      	ldreq	r4, [r5, #12]
 80036f6:	e7ca      	b.n	800368e <__swbuf_r+0x1a>
 80036f8:	4621      	mov	r1, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f81e 	bl	800373c <__swsetup_r>
 8003700:	2800      	cmp	r0, #0
 8003702:	d0cb      	beq.n	800369c <__swbuf_r+0x28>
 8003704:	f04f 37ff 	mov.w	r7, #4294967295
 8003708:	e7ea      	b.n	80036e0 <__swbuf_r+0x6c>
 800370a:	bf00      	nop
 800370c:	08003cb0 	.word	0x08003cb0
 8003710:	08003cd0 	.word	0x08003cd0
 8003714:	08003c90 	.word	0x08003c90

08003718 <_write_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	; (8003738 <_write_r+0x20>)
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fc ffa0 	bl	800066c <_write>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_write_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_write_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000144 	.word	0x20000144

0800373c <__swsetup_r>:
 800373c:	4b32      	ldr	r3, [pc, #200]	; (8003808 <__swsetup_r+0xcc>)
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	4606      	mov	r6, r0
 8003744:	460c      	mov	r4, r1
 8003746:	b125      	cbz	r5, 8003752 <__swsetup_r+0x16>
 8003748:	69ab      	ldr	r3, [r5, #24]
 800374a:	b913      	cbnz	r3, 8003752 <__swsetup_r+0x16>
 800374c:	4628      	mov	r0, r5
 800374e:	f7ff fb55 	bl	8002dfc <__sinit>
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <__swsetup_r+0xd0>)
 8003754:	429c      	cmp	r4, r3
 8003756:	d10f      	bne.n	8003778 <__swsetup_r+0x3c>
 8003758:	686c      	ldr	r4, [r5, #4]
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003760:	0719      	lsls	r1, r3, #28
 8003762:	d42c      	bmi.n	80037be <__swsetup_r+0x82>
 8003764:	06dd      	lsls	r5, r3, #27
 8003766:	d411      	bmi.n	800378c <__swsetup_r+0x50>
 8003768:	2309      	movs	r3, #9
 800376a:	6033      	str	r3, [r6, #0]
 800376c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	e03e      	b.n	80037f6 <__swsetup_r+0xba>
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <__swsetup_r+0xd4>)
 800377a:	429c      	cmp	r4, r3
 800377c:	d101      	bne.n	8003782 <__swsetup_r+0x46>
 800377e:	68ac      	ldr	r4, [r5, #8]
 8003780:	e7eb      	b.n	800375a <__swsetup_r+0x1e>
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <__swsetup_r+0xd8>)
 8003784:	429c      	cmp	r4, r3
 8003786:	bf08      	it	eq
 8003788:	68ec      	ldreq	r4, [r5, #12]
 800378a:	e7e6      	b.n	800375a <__swsetup_r+0x1e>
 800378c:	0758      	lsls	r0, r3, #29
 800378e:	d512      	bpl.n	80037b6 <__swsetup_r+0x7a>
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	b141      	cbz	r1, 80037a6 <__swsetup_r+0x6a>
 8003794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <__swsetup_r+0x66>
 800379c:	4630      	mov	r0, r6
 800379e:	f000 f98f 	bl	8003ac0 <_free_r>
 80037a2:	2300      	movs	r3, #0
 80037a4:	6363      	str	r3, [r4, #52]	; 0x34
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	b94b      	cbnz	r3, 80037d6 <__swsetup_r+0x9a>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d003      	beq.n	80037d6 <__swsetup_r+0x9a>
 80037ce:	4621      	mov	r1, r4
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f929 	bl	8003a28 <__smakebuf_r>
 80037d6:	89a0      	ldrh	r0, [r4, #12]
 80037d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037dc:	f010 0301 	ands.w	r3, r0, #1
 80037e0:	d00a      	beq.n	80037f8 <__swsetup_r+0xbc>
 80037e2:	2300      	movs	r3, #0
 80037e4:	60a3      	str	r3, [r4, #8]
 80037e6:	6963      	ldr	r3, [r4, #20]
 80037e8:	425b      	negs	r3, r3
 80037ea:	61a3      	str	r3, [r4, #24]
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	b943      	cbnz	r3, 8003802 <__swsetup_r+0xc6>
 80037f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037f4:	d1ba      	bne.n	800376c <__swsetup_r+0x30>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	0781      	lsls	r1, r0, #30
 80037fa:	bf58      	it	pl
 80037fc:	6963      	ldrpl	r3, [r4, #20]
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	e7f4      	b.n	80037ec <__swsetup_r+0xb0>
 8003802:	2000      	movs	r0, #0
 8003804:	e7f7      	b.n	80037f6 <__swsetup_r+0xba>
 8003806:	bf00      	nop
 8003808:	2000000c 	.word	0x2000000c
 800380c:	08003cb0 	.word	0x08003cb0
 8003810:	08003cd0 	.word	0x08003cd0
 8003814:	08003c90 	.word	0x08003c90

08003818 <_close_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4d06      	ldr	r5, [pc, #24]	; (8003834 <_close_r+0x1c>)
 800381c:	2300      	movs	r3, #0
 800381e:	4604      	mov	r4, r0
 8003820:	4608      	mov	r0, r1
 8003822:	602b      	str	r3, [r5, #0]
 8003824:	f000 f9d0 	bl	8003bc8 <_close>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d102      	bne.n	8003832 <_close_r+0x1a>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	b103      	cbz	r3, 8003832 <_close_r+0x1a>
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	20000144 	.word	0x20000144

08003838 <__sflush_r>:
 8003838:	898a      	ldrh	r2, [r1, #12]
 800383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	4605      	mov	r5, r0
 8003840:	0710      	lsls	r0, r2, #28
 8003842:	460c      	mov	r4, r1
 8003844:	d458      	bmi.n	80038f8 <__sflush_r+0xc0>
 8003846:	684b      	ldr	r3, [r1, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	dc05      	bgt.n	8003858 <__sflush_r+0x20>
 800384c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	dc02      	bgt.n	8003858 <__sflush_r+0x20>
 8003852:	2000      	movs	r0, #0
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800385a:	2e00      	cmp	r6, #0
 800385c:	d0f9      	beq.n	8003852 <__sflush_r+0x1a>
 800385e:	2300      	movs	r3, #0
 8003860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003864:	682f      	ldr	r7, [r5, #0]
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	d032      	beq.n	80038d0 <__sflush_r+0x98>
 800386a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	075a      	lsls	r2, r3, #29
 8003870:	d505      	bpl.n	800387e <__sflush_r+0x46>
 8003872:	6863      	ldr	r3, [r4, #4]
 8003874:	1ac0      	subs	r0, r0, r3
 8003876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003878:	b10b      	cbz	r3, 800387e <__sflush_r+0x46>
 800387a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800387c:	1ac0      	subs	r0, r0, r3
 800387e:	2300      	movs	r3, #0
 8003880:	4602      	mov	r2, r0
 8003882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003884:	6a21      	ldr	r1, [r4, #32]
 8003886:	4628      	mov	r0, r5
 8003888:	47b0      	blx	r6
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	d106      	bne.n	800389e <__sflush_r+0x66>
 8003890:	6829      	ldr	r1, [r5, #0]
 8003892:	291d      	cmp	r1, #29
 8003894:	d82c      	bhi.n	80038f0 <__sflush_r+0xb8>
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <__sflush_r+0x108>)
 8003898:	40ca      	lsrs	r2, r1
 800389a:	07d6      	lsls	r6, r2, #31
 800389c:	d528      	bpl.n	80038f0 <__sflush_r+0xb8>
 800389e:	2200      	movs	r2, #0
 80038a0:	6062      	str	r2, [r4, #4]
 80038a2:	04d9      	lsls	r1, r3, #19
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	6022      	str	r2, [r4, #0]
 80038a8:	d504      	bpl.n	80038b4 <__sflush_r+0x7c>
 80038aa:	1c42      	adds	r2, r0, #1
 80038ac:	d101      	bne.n	80038b2 <__sflush_r+0x7a>
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	b903      	cbnz	r3, 80038b4 <__sflush_r+0x7c>
 80038b2:	6560      	str	r0, [r4, #84]	; 0x54
 80038b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038b6:	602f      	str	r7, [r5, #0]
 80038b8:	2900      	cmp	r1, #0
 80038ba:	d0ca      	beq.n	8003852 <__sflush_r+0x1a>
 80038bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038c0:	4299      	cmp	r1, r3
 80038c2:	d002      	beq.n	80038ca <__sflush_r+0x92>
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 f8fb 	bl	8003ac0 <_free_r>
 80038ca:	2000      	movs	r0, #0
 80038cc:	6360      	str	r0, [r4, #52]	; 0x34
 80038ce:	e7c1      	b.n	8003854 <__sflush_r+0x1c>
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	2301      	movs	r3, #1
 80038d4:	4628      	mov	r0, r5
 80038d6:	47b0      	blx	r6
 80038d8:	1c41      	adds	r1, r0, #1
 80038da:	d1c7      	bne.n	800386c <__sflush_r+0x34>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0c4      	beq.n	800386c <__sflush_r+0x34>
 80038e2:	2b1d      	cmp	r3, #29
 80038e4:	d001      	beq.n	80038ea <__sflush_r+0xb2>
 80038e6:	2b16      	cmp	r3, #22
 80038e8:	d101      	bne.n	80038ee <__sflush_r+0xb6>
 80038ea:	602f      	str	r7, [r5, #0]
 80038ec:	e7b1      	b.n	8003852 <__sflush_r+0x1a>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	e7ad      	b.n	8003854 <__sflush_r+0x1c>
 80038f8:	690f      	ldr	r7, [r1, #16]
 80038fa:	2f00      	cmp	r7, #0
 80038fc:	d0a9      	beq.n	8003852 <__sflush_r+0x1a>
 80038fe:	0793      	lsls	r3, r2, #30
 8003900:	680e      	ldr	r6, [r1, #0]
 8003902:	bf08      	it	eq
 8003904:	694b      	ldreq	r3, [r1, #20]
 8003906:	600f      	str	r7, [r1, #0]
 8003908:	bf18      	it	ne
 800390a:	2300      	movne	r3, #0
 800390c:	eba6 0807 	sub.w	r8, r6, r7
 8003910:	608b      	str	r3, [r1, #8]
 8003912:	f1b8 0f00 	cmp.w	r8, #0
 8003916:	dd9c      	ble.n	8003852 <__sflush_r+0x1a>
 8003918:	6a21      	ldr	r1, [r4, #32]
 800391a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800391c:	4643      	mov	r3, r8
 800391e:	463a      	mov	r2, r7
 8003920:	4628      	mov	r0, r5
 8003922:	47b0      	blx	r6
 8003924:	2800      	cmp	r0, #0
 8003926:	dc06      	bgt.n	8003936 <__sflush_r+0xfe>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	e78e      	b.n	8003854 <__sflush_r+0x1c>
 8003936:	4407      	add	r7, r0
 8003938:	eba8 0800 	sub.w	r8, r8, r0
 800393c:	e7e9      	b.n	8003912 <__sflush_r+0xda>
 800393e:	bf00      	nop
 8003940:	20400001 	.word	0x20400001

08003944 <_fflush_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
 800394c:	b913      	cbnz	r3, 8003954 <_fflush_r+0x10>
 800394e:	2500      	movs	r5, #0
 8003950:	4628      	mov	r0, r5
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	b118      	cbz	r0, 800395e <_fflush_r+0x1a>
 8003956:	6983      	ldr	r3, [r0, #24]
 8003958:	b90b      	cbnz	r3, 800395e <_fflush_r+0x1a>
 800395a:	f7ff fa4f 	bl	8002dfc <__sinit>
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <_fflush_r+0x6c>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d11b      	bne.n	800399c <_fflush_r+0x58>
 8003964:	686c      	ldr	r4, [r5, #4]
 8003966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ef      	beq.n	800394e <_fflush_r+0xa>
 800396e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003970:	07d0      	lsls	r0, r2, #31
 8003972:	d404      	bmi.n	800397e <_fflush_r+0x3a>
 8003974:	0599      	lsls	r1, r3, #22
 8003976:	d402      	bmi.n	800397e <_fflush_r+0x3a>
 8003978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397a:	f7ff fadd 	bl	8002f38 <__retarget_lock_acquire_recursive>
 800397e:	4628      	mov	r0, r5
 8003980:	4621      	mov	r1, r4
 8003982:	f7ff ff59 	bl	8003838 <__sflush_r>
 8003986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003988:	07da      	lsls	r2, r3, #31
 800398a:	4605      	mov	r5, r0
 800398c:	d4e0      	bmi.n	8003950 <_fflush_r+0xc>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	059b      	lsls	r3, r3, #22
 8003992:	d4dd      	bmi.n	8003950 <_fflush_r+0xc>
 8003994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003996:	f7ff fad0 	bl	8002f3a <__retarget_lock_release_recursive>
 800399a:	e7d9      	b.n	8003950 <_fflush_r+0xc>
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <_fflush_r+0x70>)
 800399e:	429c      	cmp	r4, r3
 80039a0:	d101      	bne.n	80039a6 <_fflush_r+0x62>
 80039a2:	68ac      	ldr	r4, [r5, #8]
 80039a4:	e7df      	b.n	8003966 <_fflush_r+0x22>
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <_fflush_r+0x74>)
 80039a8:	429c      	cmp	r4, r3
 80039aa:	bf08      	it	eq
 80039ac:	68ec      	ldreq	r4, [r5, #12]
 80039ae:	e7da      	b.n	8003966 <_fflush_r+0x22>
 80039b0:	08003cb0 	.word	0x08003cb0
 80039b4:	08003cd0 	.word	0x08003cd0
 80039b8:	08003c90 	.word	0x08003c90

080039bc <_lseek_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4d07      	ldr	r5, [pc, #28]	; (80039dc <_lseek_r+0x20>)
 80039c0:	4604      	mov	r4, r0
 80039c2:	4608      	mov	r0, r1
 80039c4:	4611      	mov	r1, r2
 80039c6:	2200      	movs	r2, #0
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f000 f914 	bl	8003bf8 <_lseek>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_lseek_r+0x1e>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_lseek_r+0x1e>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000144 	.word	0x20000144

080039e0 <__swhatbuf_r>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	460e      	mov	r6, r1
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	2900      	cmp	r1, #0
 80039ea:	b096      	sub	sp, #88	; 0x58
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	da07      	bge.n	8003a02 <__swhatbuf_r+0x22>
 80039f2:	2300      	movs	r3, #0
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	89b3      	ldrh	r3, [r6, #12]
 80039f8:	061a      	lsls	r2, r3, #24
 80039fa:	d410      	bmi.n	8003a1e <__swhatbuf_r+0x3e>
 80039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a00:	e00e      	b.n	8003a20 <__swhatbuf_r+0x40>
 8003a02:	466a      	mov	r2, sp
 8003a04:	f000 f8be 	bl	8003b84 <_fstat_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	dbf2      	blt.n	80039f2 <__swhatbuf_r+0x12>
 8003a0c:	9a01      	ldr	r2, [sp, #4]
 8003a0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a16:	425a      	negs	r2, r3
 8003a18:	415a      	adcs	r2, r3
 8003a1a:	602a      	str	r2, [r5, #0]
 8003a1c:	e7ee      	b.n	80039fc <__swhatbuf_r+0x1c>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	2000      	movs	r0, #0
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	b016      	add	sp, #88	; 0x58
 8003a26:	bd70      	pop	{r4, r5, r6, pc}

08003a28 <__smakebuf_r>:
 8003a28:	898b      	ldrh	r3, [r1, #12]
 8003a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a2c:	079d      	lsls	r5, r3, #30
 8003a2e:	4606      	mov	r6, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	d507      	bpl.n	8003a44 <__smakebuf_r+0x1c>
 8003a34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	6123      	str	r3, [r4, #16]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	6163      	str	r3, [r4, #20]
 8003a40:	b002      	add	sp, #8
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	ab01      	add	r3, sp, #4
 8003a46:	466a      	mov	r2, sp
 8003a48:	f7ff ffca 	bl	80039e0 <__swhatbuf_r>
 8003a4c:	9900      	ldr	r1, [sp, #0]
 8003a4e:	4605      	mov	r5, r0
 8003a50:	4630      	mov	r0, r6
 8003a52:	f7ff fa73 	bl	8002f3c <_malloc_r>
 8003a56:	b948      	cbnz	r0, 8003a6c <__smakebuf_r+0x44>
 8003a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5c:	059a      	lsls	r2, r3, #22
 8003a5e:	d4ef      	bmi.n	8003a40 <__smakebuf_r+0x18>
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	e7e3      	b.n	8003a34 <__smakebuf_r+0xc>
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <__smakebuf_r+0x7c>)
 8003a6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	6020      	str	r0, [r4, #0]
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	9b00      	ldr	r3, [sp, #0]
 8003a7c:	6163      	str	r3, [r4, #20]
 8003a7e:	9b01      	ldr	r3, [sp, #4]
 8003a80:	6120      	str	r0, [r4, #16]
 8003a82:	b15b      	cbz	r3, 8003a9c <__smakebuf_r+0x74>
 8003a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f000 f88d 	bl	8003ba8 <_isatty_r>
 8003a8e:	b128      	cbz	r0, 8003a9c <__smakebuf_r+0x74>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	81a3      	strh	r3, [r4, #12]
 8003a9c:	89a0      	ldrh	r0, [r4, #12]
 8003a9e:	4305      	orrs	r5, r0
 8003aa0:	81a5      	strh	r5, [r4, #12]
 8003aa2:	e7cd      	b.n	8003a40 <__smakebuf_r+0x18>
 8003aa4:	08002d95 	.word	0x08002d95

08003aa8 <__malloc_lock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_lock+0x8>)
 8003aaa:	f7ff ba45 	b.w	8002f38 <__retarget_lock_acquire_recursive>
 8003aae:	bf00      	nop
 8003ab0:	2000013c 	.word	0x2000013c

08003ab4 <__malloc_unlock>:
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <__malloc_unlock+0x8>)
 8003ab6:	f7ff ba40 	b.w	8002f3a <__retarget_lock_release_recursive>
 8003aba:	bf00      	nop
 8003abc:	2000013c 	.word	0x2000013c

08003ac0 <_free_r>:
 8003ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ac2:	2900      	cmp	r1, #0
 8003ac4:	d048      	beq.n	8003b58 <_free_r+0x98>
 8003ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aca:	9001      	str	r0, [sp, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f1a1 0404 	sub.w	r4, r1, #4
 8003ad2:	bfb8      	it	lt
 8003ad4:	18e4      	addlt	r4, r4, r3
 8003ad6:	f7ff ffe7 	bl	8003aa8 <__malloc_lock>
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <_free_r+0x9c>)
 8003adc:	9801      	ldr	r0, [sp, #4]
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	b933      	cbnz	r3, 8003af2 <_free_r+0x32>
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	6014      	str	r4, [r2, #0]
 8003ae8:	b003      	add	sp, #12
 8003aea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aee:	f7ff bfe1 	b.w	8003ab4 <__malloc_unlock>
 8003af2:	42a3      	cmp	r3, r4
 8003af4:	d90b      	bls.n	8003b0e <_free_r+0x4e>
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	1862      	adds	r2, r4, r1
 8003afa:	4293      	cmp	r3, r2
 8003afc:	bf04      	itt	eq
 8003afe:	681a      	ldreq	r2, [r3, #0]
 8003b00:	685b      	ldreq	r3, [r3, #4]
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	bf04      	itt	eq
 8003b06:	1852      	addeq	r2, r2, r1
 8003b08:	6022      	streq	r2, [r4, #0]
 8003b0a:	602c      	str	r4, [r5, #0]
 8003b0c:	e7ec      	b.n	8003ae8 <_free_r+0x28>
 8003b0e:	461a      	mov	r2, r3
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b10b      	cbz	r3, 8003b18 <_free_r+0x58>
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d9fa      	bls.n	8003b0e <_free_r+0x4e>
 8003b18:	6811      	ldr	r1, [r2, #0]
 8003b1a:	1855      	adds	r5, r2, r1
 8003b1c:	42a5      	cmp	r5, r4
 8003b1e:	d10b      	bne.n	8003b38 <_free_r+0x78>
 8003b20:	6824      	ldr	r4, [r4, #0]
 8003b22:	4421      	add	r1, r4
 8003b24:	1854      	adds	r4, r2, r1
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	d1dd      	bne.n	8003ae8 <_free_r+0x28>
 8003b2c:	681c      	ldr	r4, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	6053      	str	r3, [r2, #4]
 8003b32:	4421      	add	r1, r4
 8003b34:	6011      	str	r1, [r2, #0]
 8003b36:	e7d7      	b.n	8003ae8 <_free_r+0x28>
 8003b38:	d902      	bls.n	8003b40 <_free_r+0x80>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	6003      	str	r3, [r0, #0]
 8003b3e:	e7d3      	b.n	8003ae8 <_free_r+0x28>
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	1961      	adds	r1, r4, r5
 8003b44:	428b      	cmp	r3, r1
 8003b46:	bf04      	itt	eq
 8003b48:	6819      	ldreq	r1, [r3, #0]
 8003b4a:	685b      	ldreq	r3, [r3, #4]
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	bf04      	itt	eq
 8003b50:	1949      	addeq	r1, r1, r5
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	6054      	str	r4, [r2, #4]
 8003b56:	e7c7      	b.n	8003ae8 <_free_r+0x28>
 8003b58:	b003      	add	sp, #12
 8003b5a:	bd30      	pop	{r4, r5, pc}
 8003b5c:	2000008c 	.word	0x2000008c

08003b60 <_read_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4d07      	ldr	r5, [pc, #28]	; (8003b80 <_read_r+0x20>)
 8003b64:	4604      	mov	r4, r0
 8003b66:	4608      	mov	r0, r1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	602a      	str	r2, [r5, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 f84a 	bl	8003c08 <_read>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d102      	bne.n	8003b7e <_read_r+0x1e>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	b103      	cbz	r3, 8003b7e <_read_r+0x1e>
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	20000144 	.word	0x20000144

08003b84 <_fstat_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d07      	ldr	r5, [pc, #28]	; (8003ba4 <_fstat_r+0x20>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	f000 f821 	bl	8003bd8 <_fstat>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d102      	bne.n	8003ba0 <_fstat_r+0x1c>
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	b103      	cbz	r3, 8003ba0 <_fstat_r+0x1c>
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000144 	.word	0x20000144

08003ba8 <_isatty_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d06      	ldr	r5, [pc, #24]	; (8003bc4 <_isatty_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f000 f818 	bl	8003be8 <_isatty>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_isatty_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_isatty_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20000144 	.word	0x20000144

08003bc8 <_close>:
 8003bc8:	4b02      	ldr	r3, [pc, #8]	; (8003bd4 <_close+0xc>)
 8003bca:	2258      	movs	r2, #88	; 0x58
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd2:	4770      	bx	lr
 8003bd4:	20000144 	.word	0x20000144

08003bd8 <_fstat>:
 8003bd8:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <_fstat+0xc>)
 8003bda:	2258      	movs	r2, #88	; 0x58
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	4770      	bx	lr
 8003be4:	20000144 	.word	0x20000144

08003be8 <_isatty>:
 8003be8:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <_isatty+0xc>)
 8003bea:	2258      	movs	r2, #88	; 0x58
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000144 	.word	0x20000144

08003bf8 <_lseek>:
 8003bf8:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <_lseek+0xc>)
 8003bfa:	2258      	movs	r2, #88	; 0x58
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	4770      	bx	lr
 8003c04:	20000144 	.word	0x20000144

08003c08 <_read>:
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <_read+0xc>)
 8003c0a:	2258      	movs	r2, #88	; 0x58
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c12:	4770      	bx	lr
 8003c14:	20000144 	.word	0x20000144

08003c18 <_sbrk>:
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <_sbrk+0x14>)
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	b909      	cbnz	r1, 8003c24 <_sbrk+0xc>
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <_sbrk+0x18>)
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	4402      	add	r2, r0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	4770      	bx	lr
 8003c2c:	20000094 	.word	0x20000094
 8003c30:	20000148 	.word	0x20000148

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
