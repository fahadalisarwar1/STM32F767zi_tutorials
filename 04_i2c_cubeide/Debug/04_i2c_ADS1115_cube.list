
04_i2c_ADS1115_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f0  080039f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f8  080039f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08003a0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08003a0c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a491  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac1  00000000  00000000  0002a4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b0e  00000000  00000000  0002cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae02  00000000  00000000  00052a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8fcd  00000000  00000000  0005d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002128  00000000  00000000  001468b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080039c8 	.word	0x080039c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080039c8 	.word	0x080039c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fa8e 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f87f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f92d 	bl	800079c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f8eb 	bl	800071c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0; i< 4; i++){
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	e061      	b.n	8000610 <main+0xe0>
	  			config[0] = 0x01;  // this means we are writing to the config register.
 800054c:	4b34      	ldr	r3, [pc, #208]	; (8000620 <main+0xf0>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d81b      	bhi.n	8000590 <main+0x60>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <main+0x30>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	08000571 	.word	0x08000571
 8000564:	08000579 	.word	0x08000579
 8000568:	08000581 	.word	0x08000581
 800056c:	08000589 	.word	0x08000589

	  			switch(i){
	  				case(0):
	  					config[1] = 0xC5; // [OS = 1] [MUX = 100] [PGA = 010] [MODE = 1]    channel 0 = 11000101 = 0xC5
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0xf0>)
 8000572:	22c5      	movs	r2, #197	; 0xc5
 8000574:	705a      	strb	r2, [r3, #1]
	  				break;
 8000576:	e00b      	b.n	8000590 <main+0x60>
	  				case(1):
	  					config[1] = 0xD5; // [OS = 1] [MUX = 101] [PGA = 010] [MODE = 1]    channel 1
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0xf0>)
 800057a:	22d5      	movs	r2, #213	; 0xd5
 800057c:	705a      	strb	r2, [r3, #1]
	  				break;
 800057e:	e007      	b.n	8000590 <main+0x60>
	  				case(2):
	  					config[1] = 0xE5; // [OS = 1] [MUX = 110] [PGA = 010] [MODE = 1]    channel 2
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <main+0xf0>)
 8000582:	22e5      	movs	r2, #229	; 0xe5
 8000584:	705a      	strb	r2, [r3, #1]
	  				break;
 8000586:	e003      	b.n	8000590 <main+0x60>
	  				case(3):
	  					config[1] = 0xF5;  // [OS = 1] [MUX = 111] [PGA = 010] [MODE = 1]    channel 3
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xf0>)
 800058a:	22f5      	movs	r2, #245	; 0xf5
 800058c:	705a      	strb	r2, [r3, #1]
	  				break;
 800058e:	bf00      	nop
	  			}

	  			config[2] = 0x83; // [DR = 100] [COMP_MODE = 0] [COMP_POLL = 0] [COMP_LAT = 0] [COMP_QUE = 11]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0xf0>)
 8000592:	2283      	movs	r2, #131	; 0x83
 8000594:	709a      	strb	r2, [r3, #2]

	  			// comparator is used to set the ALERT ready pin which we dont really need.


	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, config, 3, 100); //
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2303      	movs	r3, #3
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <main+0xf0>)
 800059e:	2190      	movs	r1, #144	; 0x90
 80005a0:	4820      	ldr	r0, [pc, #128]	; (8000624 <main+0xf4>)
 80005a2:	f000 fe57 	bl	8001254 <HAL_I2C_Master_Transmit>
	  			// the address shift is done because it is mentioned in the HAL_I2C specs, i dont know exactly why ?
	  			// but the HAL_I2C_Master_Transmit specifications say that it should be left shifted by 1 bit.



	  			conv_data[0] = 0x00; // steps for reading conversion register now.
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <main+0xf8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]


	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , conv_data, 1 ,100);
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <main+0xf8>)
 80005b4:	2190      	movs	r1, #144	; 0x90
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0xf4>)
 80005b8:	f000 fe4c 	bl	8001254 <HAL_I2C_Master_Transmit>
	  			HAL_Delay(20);
 80005bc:	2014      	movs	r0, #20
 80005be:	f000 faa7 	bl	8000b10 <HAL_Delay>

	  			HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, read_data, 2, 100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <main+0xfc>)
 80005ca:	2190      	movs	r1, #144	; 0x90
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <main+0xf4>)
 80005ce:	f000 ff35 	bl	800143c <HAL_I2C_Master_Receive>
	  			reading = (read_data[0] << 8 | read_data[1] );
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xfc>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <main+0xfc>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x100>)
 80005e8:	801a      	strh	r2, [r3, #0]
	  			if(reading < 0) {
	  				reading = 0;
	  			}
	  			voltage[i] = reading * voltageConv;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x100>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000634 <main+0x104>
 80005fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <main+0x108>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i< 4; i++){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b03      	cmp	r3, #3
 8000614:	dd9a      	ble.n	800054c <main+0x1c>

	  		}
	  HAL_Delay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f000 fa79 	bl	8000b10 <HAL_Delay>
	  for(int i=0; i< 4; i++){
 800061e:	e792      	b.n	8000546 <main+0x16>
 8000620:	20000090 	.word	0x20000090
 8000624:	20000028 	.word	0x20000028
 8000628:	20000074 	.word	0x20000074
 800062c:	2000008c 	.word	0x2000008c
 8000630:	20000088 	.word	0x20000088
 8000634:	3883126f 	.word	0x3883126f
 8000638:	20000078 	.word	0x20000078

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f9b4 	bl	80039b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <SystemClock_Config+0xd8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <SystemClock_Config+0xd8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xdc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <SystemClock_Config+0xdc>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SystemClock_Config+0xdc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f887 	bl	80027d0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c8:	f000 f88c 	bl	80007e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f002 f830 	bl	8002730 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f885 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2107      	movs	r1, #7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb17 	bl	8002d2c <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000704:	f000 f86e 	bl	80007e4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000708:	f002 fbfc 	bl	8002f04 <HAL_RCC_EnableCSS>
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	f000 fcec 	bl	8001134 <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f83f 	bl	80007e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C1_Init+0x74>)
 800076a:	f001 ff49 	bl	8002600 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f836 	bl	80007e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077c:	f001 ff8b 	bl	8002696 <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f82d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028
 8000794:	40005400 	.word	0x40005400
 8000798:	6000030d 	.word	0x6000030d

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x44>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_MspInit+0x50>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <HAL_MspInit+0x50>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x50>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x50>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <HAL_MspInit+0x50>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x50>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2005      	movs	r0, #5
 800082c:	f000 fa6f 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fa88 	bl	8000d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ae      	sub	sp, #184	; 0xb8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2290      	movs	r2, #144	; 0x90
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f003 f8a7 	bl	80039b8 <memset>
  if(hi2c->Instance==I2C1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a35      	ldr	r2, [pc, #212]	; (8000944 <HAL_I2C_MspInit+0x100>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d162      	bne.n	800093a <HAL_I2C_MspInit+0xf6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000874:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000878:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fc4c 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800088e:	f7ff ffa9 	bl	80007e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_I2C_MspInit+0x104>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a2c      	ldr	r2, [pc, #176]	; (8000948 <HAL_I2C_MspInit+0x104>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <HAL_I2C_MspInit+0x104>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c4:	2304      	movs	r3, #4
 80008c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008ce:	4619      	mov	r1, r3
 80008d0:	481e      	ldr	r0, [pc, #120]	; (800094c <HAL_I2C_MspInit+0x108>)
 80008d2:	f000 fa83 	bl	8000ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	2312      	movs	r3, #18
 80008e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f0:	2304      	movs	r3, #4
 80008f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <HAL_I2C_MspInit+0x108>)
 80008fe:	f000 fa6d 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_I2C_MspInit+0x104>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_I2C_MspInit+0x104>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_I2C_MspInit+0x104>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	201f      	movs	r0, #31
 8000920:	f000 f9f5 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000924:	201f      	movs	r0, #31
 8000926:	f000 fa0e 	bl	8000d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2020      	movs	r0, #32
 8000930:	f000 f9ed 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000934:	2020      	movs	r0, #32
 8000936:	f000 fa06 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	37b8      	adds	r7, #184	; 0xb8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40005400 	.word	0x40005400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000954:	f002 fbc8 	bl	80030e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x8>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f896 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <I2C1_EV_IRQHandler+0x10>)
 80009be:	f000 fe33 	bl	8001628 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000028 	.word	0x20000028

080009cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <I2C1_ER_IRQHandler+0x10>)
 80009d2:	f000 fe43 	bl	800165c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000028 	.word	0x20000028

080009e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 ff9d 	bl	8003970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fd7b 	bl	8000530 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	20000098 	.word	0x20000098

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>

08000a56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f94c 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a60:	200f      	movs	r0, #15
 8000a62:	f000 f805 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a66:	f7ff fec3 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f967 	bl	8000d62 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f92f 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000094 	.word	0x20000094

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000094 	.word	0x20000094

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	05fa0000 	.word	0x05fa0000

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d004      	beq.n	8000d98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e00c      	b.n	8000db2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dcc:	b2db      	uxtb	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e175      	b.n	80010e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8164 	bne.w	80010e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x56>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80be 	beq.w	80010e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a65      	ldr	r2, [pc, #404]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b63      	ldr	r3, [pc, #396]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f7e:	4a61      	ldr	r2, [pc, #388]	; (8001104 <HAL_GPIO_Init+0x328>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a58      	ldr	r2, [pc, #352]	; (8001108 <HAL_GPIO_Init+0x32c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d037      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a57      	ldr	r2, [pc, #348]	; (800110c <HAL_GPIO_Init+0x330>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x334>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a55      	ldr	r2, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x338>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a54      	ldr	r2, [pc, #336]	; (8001118 <HAL_GPIO_Init+0x33c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_GPIO_Init+0x340>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x22a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_GPIO_Init+0x344>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x348>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x34c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x350>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e012      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e010      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e00e      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001002:	2306      	movs	r3, #6
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x240>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x328>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_GPIO_Init+0x354>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105e:	4a34      	ldr	r2, [pc, #208]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x354>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f ae86 	bls.w	8000dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40021400 	.word	0x40021400
 8001120:	40021800 	.word	0x40021800
 8001124:	40021c00 	.word	0x40021c00
 8001128:	40022000 	.word	0x40022000
 800112c:	40022400 	.word	0x40022400
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07f      	b.n	8001246 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fb72 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e006      	b.n	80011bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d104      	bne.n	80011ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6859      	ldr	r1, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_I2C_Init+0x11c>)
 80011da:	430b      	orrs	r3, r1
 80011dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69d9      	ldr	r1, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	02008000 	.word	0x02008000

08001254 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	817b      	strh	r3, [r7, #10]
 8001264:	4613      	mov	r3, r2
 8001266:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b20      	cmp	r3, #32
 8001272:	f040 80da 	bne.w	800142a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_I2C_Master_Transmit+0x30>
 8001280:	2302      	movs	r3, #2
 8001282:	e0d3      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800128c:	f7ff fc34 	bl	8000af8 <HAL_GetTick>
 8001290:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2319      	movs	r3, #25
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fefb 	bl	800209a <I2C_WaitOnFlagUntilTimeout>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0be      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2221      	movs	r2, #33	; 0x21
 80012b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2210      	movs	r2, #16
 80012ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	893a      	ldrh	r2, [r7, #8]
 80012ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2bff      	cmp	r3, #255	; 0xff
 80012de:	d90e      	bls.n	80012fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	8979      	ldrh	r1, [r7, #10]
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_I2C_Master_Transmit+0x1e0>)
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f001 f8f2 	bl	80024e0 <I2C_TransferConfig>
 80012fc:	e06c      	b.n	80013d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130c:	b2da      	uxtb	r2, r3
 800130e:	8979      	ldrh	r1, [r7, #10]
 8001310:	4b48      	ldr	r3, [pc, #288]	; (8001434 <HAL_I2C_Master_Transmit+0x1e0>)
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f001 f8e1 	bl	80024e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800131e:	e05b      	b.n	80013d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	6a39      	ldr	r1, [r7, #32]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 fef8 	bl	800211a <I2C_WaitOnTXISFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e07b      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001368:	b29b      	uxth	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d034      	beq.n	80013d8 <HAL_I2C_Master_Transmit+0x184>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001372:	2b00      	cmp	r3, #0
 8001374:	d130      	bne.n	80013d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 fe8a 	bl	800209a <I2C_WaitOnFlagUntilTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e04d      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d90e      	bls.n	80013b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	8979      	ldrh	r1, [r7, #10]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f001 f895 	bl	80024e0 <I2C_TransferConfig>
 80013b6:	e00f      	b.n	80013d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	8979      	ldrh	r1, [r7, #10]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f001 f884 	bl	80024e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d19e      	bne.n	8001320 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	6a39      	ldr	r1, [r7, #32]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fed7 	bl	800219a <I2C_WaitOnSTOPFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01a      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2220      	movs	r2, #32
 80013fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_I2C_Master_Transmit+0x1e4>)
 800140a:	400b      	ands	r3, r1
 800140c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2220      	movs	r2, #32
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800142a:	2302      	movs	r3, #2
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	80002000 	.word	0x80002000
 8001438:	fe00e800 	.word	0xfe00e800

0800143c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	460b      	mov	r3, r1
 800144a:	817b      	strh	r3, [r7, #10]
 800144c:	4613      	mov	r3, r2
 800144e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b20      	cmp	r3, #32
 800145a:	f040 80db 	bne.w	8001614 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_I2C_Master_Receive+0x30>
 8001468:	2302      	movs	r3, #2
 800146a:	e0d4      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001474:	f7ff fb40 	bl	8000af8 <HAL_GetTick>
 8001478:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2319      	movs	r3, #25
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fe07 	bl	800209a <I2C_WaitOnFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0bf      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2222      	movs	r2, #34	; 0x22
 800149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2210      	movs	r2, #16
 80014a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	893a      	ldrh	r2, [r7, #8]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d90e      	bls.n	80014e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	8979      	ldrh	r1, [r7, #10]
 80014d6:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_I2C_Master_Receive+0x1e4>)
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fffe 	bl	80024e0 <I2C_TransferConfig>
 80014e4:	e06d      	b.n	80015c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	8979      	ldrh	r1, [r7, #10]
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_I2C_Master_Receive+0x1e4>)
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 ffed 	bl	80024e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001506:	e05c      	b.n	80015c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	6a39      	ldr	r1, [r7, #32]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 fe81 	bl	8002214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e07c      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d034      	beq.n	80015c2 <HAL_I2C_Master_Receive+0x186>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	2b00      	cmp	r3, #0
 800155e:	d130      	bne.n	80015c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 fd95 	bl	800209a <I2C_WaitOnFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e04d      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157e:	b29b      	uxth	r3, r3
 8001580:	2bff      	cmp	r3, #255	; 0xff
 8001582:	d90e      	bls.n	80015a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158e:	b2da      	uxtb	r2, r3
 8001590:	8979      	ldrh	r1, [r7, #10]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 ffa0 	bl	80024e0 <I2C_TransferConfig>
 80015a0:	e00f      	b.n	80015c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	8979      	ldrh	r1, [r7, #10]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 ff8f 	bl	80024e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d19d      	bne.n	8001508 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	6a39      	ldr	r1, [r7, #32]
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 fde2 	bl	800219a <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e01a      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2220      	movs	r2, #32
 80015e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_I2C_Master_Receive+0x1e8>)
 80015f4:	400b      	ands	r3, r1
 80015f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
  }
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	80002400 	.word	0x80002400
 8001624:	fe00e800 	.word	0xfe00e800

08001628 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
  }
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d010      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	09db      	lsrs	r3, r3, #7
 8001684:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	0a9b      	lsrs	r3, r3, #10
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	09db      	lsrs	r3, r3, #7
 80016b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f043 0208 	orr.w	r2, r3, #8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	09db      	lsrs	r3, r3, #7
 80016e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 030b 	and.w	r3, r3, #11
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fb89 	bl	8001e28 <I2C_ITError>
  }
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <I2C_Slave_ISR_IT+0x24>
 80017be:	2302      	movs	r3, #2
 80017c0:	e0ec      	b.n	800199c <I2C_Slave_ISR_IT+0x1fe>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f9bf 	bl	8001b68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d04d      	beq.n	8001892 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d047      	beq.n	8001892 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d128      	bne.n	800185e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b28      	cmp	r3, #40	; 0x28
 8001816:	d108      	bne.n	800182a <I2C_Slave_ISR_IT+0x8c>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800181e:	d104      	bne.n	800182a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001820:	6939      	ldr	r1, [r7, #16]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 faaa 	bl	8001d7c <I2C_ITListenCplt>
 8001828:	e032      	b.n	8001890 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b29      	cmp	r3, #41	; 0x29
 8001834:	d10e      	bne.n	8001854 <I2C_Slave_ISR_IT+0xb6>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800183c:	d00a      	beq.n	8001854 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2210      	movs	r2, #16
 8001844:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fbe5 	bl	8002016 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f92d 	bl	8001aac <I2C_ITSlaveSeqCplt>
 8001852:	e01d      	b.n	8001890 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800185c:	e096      	b.n	800198c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2210      	movs	r2, #16
 8001864:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0204 	orr.w	r2, r3, #4
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <I2C_Slave_ISR_IT+0xe4>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187e:	f040 8085 	bne.w	800198c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4619      	mov	r1, r3
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 facd 	bl	8001e28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800188e:	e07d      	b.n	800198c <I2C_Slave_ISR_IT+0x1ee>
 8001890:	e07c      	b.n	800198c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d030      	beq.n	8001900 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02a      	beq.n	8001900 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d018      	beq.n	80018e6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d14f      	bne.n	8001990 <I2C_Slave_ISR_IT+0x1f2>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f6:	d04b      	beq.n	8001990 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f8d7 	bl	8001aac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018fe:	e047      	b.n	8001990 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00a      	beq.n	8001922 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001918:	6939      	ldr	r1, [r7, #16]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f842 	bl	80019a4 <I2C_ITAddrCplt>
 8001920:	e037      	b.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d031      	beq.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001936:	2b00      	cmp	r3, #0
 8001938:	d02b      	beq.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d018      	beq.n	8001976 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
 8001974:	e00d      	b.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d002      	beq.n	8001984 <I2C_Slave_ISR_IT+0x1e6>
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f891 	bl	8001aac <I2C_ITSlaveSeqCplt>
 800198a:	e002      	b.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800198c:	bf00      	nop
 800198e:	e000      	b.n	8001992 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001990:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019ba:	2b28      	cmp	r3, #40	; 0x28
 80019bc:	d16a      	bne.n	8001a94 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019dc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019f8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d138      	bne.n	8001a74 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	09db      	lsrs	r3, r3, #7
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	89bb      	ldrh	r3, [r7, #12]
 8001a0a:	4053      	eors	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f003 0306 	and.w	r3, r3, #6
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11c      	bne.n	8001a50 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d13b      	bne.n	8001aa4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2208      	movs	r2, #8
 8001a38:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a42:	89ba      	ldrh	r2, [r7, #12]
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fe7c 	bl	8001746 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a4e:	e029      	b.n	8001aa4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fd73 	bl	8002544 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a66:	89ba      	ldrh	r2, [r7, #12]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fe6a 	bl	8001746 <HAL_I2C_AddrCallback>
}
 8001a72:	e017      	b.n	8001aa4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fd63 	bl	8002544 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a86:	89ba      	ldrh	r2, [r7, #12]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fe5a 	bl	8001746 <HAL_I2C_AddrCallback>
}
 8001a92:	e007      	b.n	8001aa4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2208      	movs	r2, #8
 8001a9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	0b9b      	lsrs	r3, r3, #14
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e00d      	b.n	8001afe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0bdb      	lsrs	r3, r3, #15
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b29      	cmp	r3, #41	; 0x29
 8001b08:	d112      	bne.n	8001b30 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2228      	movs	r2, #40	; 0x28
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2221      	movs	r2, #33	; 0x21
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fd12 	bl	8002544 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fdf8 	bl	800171e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b2e:	e017      	b.n	8001b60 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b2a      	cmp	r3, #42	; 0x2a
 8001b3a:	d111      	bne.n	8001b60 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2222      	movs	r2, #34	; 0x22
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fcf9 	bl	8002544 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fde9 	bl	8001732 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b21      	cmp	r3, #33	; 0x21
 8001b92:	d002      	beq.n	8001b9a <I2C_ITSlaveCplt+0x32>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b29      	cmp	r3, #41	; 0x29
 8001b98:	d108      	bne.n	8001bac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b9a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fcd0 	bl	8002544 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2221      	movs	r2, #33	; 0x21
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8001baa:	e00d      	b.n	8001bc8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b22      	cmp	r3, #34	; 0x22
 8001bb0:	d002      	beq.n	8001bb8 <I2C_ITSlaveCplt+0x50>
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8001bb6:	d107      	bne.n	8001bc8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001bb8:	f248 0102 	movw	r1, #32770	; 0x8002
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fcc1 	bl	8002544 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2222      	movs	r2, #34	; 0x22
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <I2C_ITSlaveCplt+0x20c>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa14 	bl	8002016 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	0b9b      	lsrs	r3, r3, #14
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d013      	beq.n	8001c22 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c20:	e018      	b.n	8001c54 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	0bdb      	lsrs	r3, r3, #15
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8a7 	bl	8001e28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b28      	cmp	r3, #40	; 0x28
 8001ce4:	d141      	bne.n	8001d6a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f847 	bl	8001d7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cee:	e03c      	b.n	8001d6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cf8:	d014      	beq.n	8001d24 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fed6 	bl	8001aac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <I2C_ITSlaveCplt+0x210>)
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fd20 	bl	8001762 <HAL_I2C_ListenCpltCallback>
}
 8001d22:	e022      	b.n	8001d6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b22      	cmp	r3, #34	; 0x22
 8001d2e:	d10e      	bne.n	8001d4e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fcf3 	bl	8001732 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d4c:	e00d      	b.n	8001d6a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fcda 	bl	800171e <HAL_I2C_SlaveTxCpltCallback>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	fe00e800 	.word	0xfe00e800
 8001d78:	ffff0000 	.word	0xffff0000

08001d7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <I2C_ITListenCplt+0xa8>)
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d022      	beq.n	8001dfa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0204 	orr.w	r2, r3, #4
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dfa:	f248 0103 	movw	r1, #32771	; 0x8003
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fba0 	bl	8002544 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fca4 	bl	8001762 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	ffff0000 	.word	0xffff0000

08001e28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <I2C_ITError+0x194>)
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b28      	cmp	r3, #40	; 0x28
 8001e5e:	d005      	beq.n	8001e6c <I2C_ITError+0x44>
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b29      	cmp	r3, #41	; 0x29
 8001e64:	d002      	beq.n	8001e6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b2a      	cmp	r3, #42	; 0x2a
 8001e6a:	d10b      	bne.n	8001e84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb68 	bl	8002544 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2228      	movs	r2, #40	; 0x28
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <I2C_ITError+0x198>)
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
 8001e82:	e011      	b.n	8001ea8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e84:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb5b 	bl	8002544 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b60      	cmp	r3, #96	; 0x60
 8001e98:	d003      	beq.n	8001ea2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d039      	beq.n	8001f2a <I2C_ITError+0x102>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b11      	cmp	r3, #17
 8001eba:	d002      	beq.n	8001ec2 <I2C_ITError+0x9a>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b21      	cmp	r3, #33	; 0x21
 8001ec0:	d133      	bne.n	8001f2a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed0:	d107      	bne.n	8001ee2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ee0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe ff69 	bl	8000dbe <HAL_DMA_GetState>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d017      	beq.n	8001f22 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <I2C_ITError+0x19c>)
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe ff37 	bl	8000d7a <HAL_DMA_Abort_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04d      	beq.n	8001fae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f20:	e045      	b.n	8001fae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f850 	bl	8001fc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f28:	e041      	b.n	8001fae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d039      	beq.n	8001fa6 <I2C_ITError+0x17e>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b12      	cmp	r3, #18
 8001f36:	d002      	beq.n	8001f3e <I2C_ITError+0x116>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b22      	cmp	r3, #34	; 0x22
 8001f3c:	d133      	bne.n	8001fa6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4c:	d107      	bne.n	8001f5e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe ff2b 	bl	8000dbe <HAL_DMA_GetState>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d017      	beq.n	8001f9e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <I2C_ITError+0x19c>)
 8001f74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fef9 	bl	8000d7a <HAL_DMA_Abort_IT>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d011      	beq.n	8001fb2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f9c:	e009      	b.n	8001fb2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f812 	bl	8001fc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fa4:	e005      	b.n	8001fb2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f80e 	bl	8001fc8 <I2C_TreatErrorCallback>
  }
}
 8001fac:	e002      	b.n	8001fb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fb2:	bf00      	nop
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	ffff0000 	.word	0xffff0000
 8001fc0:	0800179f 	.word	0x0800179f
 8001fc4:	0800205f 	.word	0x0800205f

08001fc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b60      	cmp	r3, #96	; 0x60
 8001fda:	d10e      	bne.n	8001ffa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fbc9 	bl	800178a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ff8:	e009      	b.n	800200e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fbb4 	bl	8001776 <HAL_I2C_ErrorCallback>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d103      	bne.n	8002034 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d007      	beq.n	8002052 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	619a      	str	r2, [r3, #24]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	2200      	movs	r2, #0
 800207a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	2200      	movs	r2, #0
 800208a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff ff9b 	bl	8001fc8 <I2C_TreatErrorCallback>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020aa:	e022      	b.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d01e      	beq.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b4:	f7fe fd20 	bl	8000af8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d302      	bcc.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x30>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d113      	bne.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	429a      	cmp	r2, r3
 800210e:	d0cd      	beq.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002126:	e02c      	b.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8eb 	bl	8002308 <I2C_IsErrorOccurred>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e02a      	b.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d01e      	beq.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7fe fcd8 	bl	8000af8 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d113      	bne.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d1cb      	bne.n	8002128 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a6:	e028      	b.n	80021fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8ab 	bl	8002308 <I2C_IsErrorOccurred>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e026      	b.n	800220a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7fe fc9c 	bl	8000af8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d302      	bcc.n	80021d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e007      	b.n	800220a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b20      	cmp	r3, #32
 8002206:	d1cf      	bne.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002220:	e064      	b.n	80022ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f86e 	bl	8002308 <I2C_IsErrorOccurred>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e062      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b20      	cmp	r3, #32
 8002242:	d138      	bne.n	80022b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d105      	bne.n	800225e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e04e      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	d107      	bne.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2204      	movs	r2, #4
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
 800227a:	e002      	b.n	8002282 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002296:	400b      	ands	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e022      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7fe fc1f 	bl	8000af8 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d193      	bne.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fe00e800 	.word	0xfe00e800

08002308 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d075      	beq.n	8002420 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800233c:	e056      	b.n	80023ec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d052      	beq.n	80023ec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe fbd7 	bl	8000af8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_IsErrorOccurred+0x54>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d147      	bne.n	80023ec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800236e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237e:	d12e      	bne.n	80023de <I2C_IsErrorOccurred+0xd6>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002386:	d02a      	beq.n	80023de <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b20      	cmp	r3, #32
 800238c:	d027      	beq.n	80023de <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800239e:	f7fe fbab 	bl	8000af8 <HAL_GetTick>
 80023a2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a4:	e01b      	b.n	80023de <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023a6:	f7fe fba7 	bl	8000af8 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b19      	cmp	r3, #25
 80023b2:	d914      	bls.n	80023de <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d1dc      	bne.n	80023a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d003      	beq.n	8002402 <I2C_IsErrorOccurred+0xfa>
 80023fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d09d      	beq.n	800233e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2220      	movs	r2, #32
 8002410:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002442:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002464:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800248e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01c      	beq.n	80024d0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff fdbd 	bl	8002016 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <I2C_IsErrorOccurred+0x1d4>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3728      	adds	r7, #40	; 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fe00e800 	.word	0xfe00e800

080024e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	817b      	strh	r3, [r7, #10]
 80024ee:	4613      	mov	r3, r2
 80024f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024f8:	7a7b      	ldrb	r3, [r7, #9]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002500:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	4313      	orrs	r3, r2
 800250a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800250e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	0d5b      	lsrs	r3, r3, #21
 800251a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <I2C_TransferConfig+0x60>)
 8002520:	430b      	orrs	r3, r1
 8002522:	43db      	mvns	r3, r3
 8002524:	ea02 0103 	and.w	r1, r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	03ff63ff 	.word	0x03ff63ff

08002544 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00f      	beq.n	800257e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002564:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002572:	2b28      	cmp	r3, #40	; 0x28
 8002574:	d003      	beq.n	800257e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800257c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00f      	beq.n	80025a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800258e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800259c:	2b28      	cmp	r3, #40	; 0x28
 800259e:	d003      	beq.n	80025a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80025a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da03      	bge.n	80025b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d103      	bne.n	80025c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d103      	bne.n	80025d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f043 0320 	orr.w	r3, r3, #32
 80025d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d103      	bne.n	80025e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	d138      	bne.n	8002688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002620:	2302      	movs	r3, #2
 8002622:	e032      	b.n	800268a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	e000      	b.n	800268a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d139      	bne.n	8002720 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e033      	b.n	8002722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2224      	movs	r2, #36	; 0x24
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275e:	f7fe f9cb 	bl	8000af8 <HAL_GetTick>
 8002762:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002764:	e009      	b.n	800277a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002766:	f7fe f9c7 	bl	8000af8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002774:	d901      	bls.n	800277a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e022      	b.n	80027c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002786:	d1ee      	bne.n	8002766 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800278e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002792:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002794:	f7fe f9b0 	bl	8000af8 <HAL_GetTick>
 8002798:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800279a:	e009      	b.n	80027b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800279c:	f7fe f9ac 	bl	8000af8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027aa:	d901      	bls.n	80027b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e007      	b.n	80027c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027bc:	d1ee      	bne.n	800279c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e29b      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002800:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d112      	bne.n	8002832 <HAL_RCC_OscConfig+0x62>
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b8d      	ldr	r3, [pc, #564]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d06c      	beq.n	8002900 <HAL_RCC_OscConfig+0x130>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d168      	bne.n	8002900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e275      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x7a>
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a83      	ldr	r2, [pc, #524]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e02e      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x9c>
 8002852:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7e      	ldr	r2, [pc, #504]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7b      	ldr	r2, [pc, #492]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xc0>
 8002876:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a75      	ldr	r2, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a72      	ldr	r2, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xd8>
 8002890:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b6c      	ldr	r3, [pc, #432]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6b      	ldr	r2, [pc, #428]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe f922 	bl	8000af8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe f91e 	bl	8000af8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e229      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe8>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe f90e 	bl	8000af8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe f90a 	bl	8000af8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e215      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x110>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d069      	beq.n	80029e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x190>
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x17a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1e9      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	493d      	ldr	r1, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e040      	b.n	80029e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d023      	beq.n	80029b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f8c0 	bl	8000af8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe f8bc 	bl	8000af8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1c7      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4929      	ldr	r1, [pc, #164]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
 80029ae:	e018      	b.n	80029e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe f89c 	bl	8000af8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe f898 	bl	8000af8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1a3      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d038      	beq.n	8002a60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d019      	beq.n	8002a2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe f879 	bl	8000af8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe f875 	bl	8000af8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e180      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x23a>
 8002a28:	e01a      	b.n	8002a60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_RCC_OscConfig+0x280>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe f85f 	bl	8000af8 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7fe f85b 	bl	8000af8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d903      	bls.n	8002a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e166      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
 8002a50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ee      	bne.n	8002a3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a4 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a88      	ldr	r2, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a96:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <HAL_RCC_OscConfig+0x4d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aa2:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <HAL_RCC_OscConfig+0x4d4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x4d4>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe f823 	bl	8000af8 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe f81f 	bl	8000af8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e12a      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x4d4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x31a>
 8002adc:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a6f      	ldr	r2, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e02d      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x33c>
 8002af2:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a67      	ldr	r2, [pc, #412]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e01c      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x35e>
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
 8002b2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a5b      	ldr	r2, [pc, #364]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fd ffd3 	bl	8000af8 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fd ffcf 	bl	8000af8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0d8      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCC_OscConfig+0x386>
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7fd ffbd 	bl	8000af8 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fd ffb9 	bl	8000af8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0c2      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80ae 	beq.w	8002d1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d06d      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d14b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fd ff8a 	bl	8000af8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fd ff86 	bl	8000af8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e091      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	071b      	lsls	r3, r3, #28
 8002c32:	491b      	ldr	r1, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd ff58 	bl	8000af8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fd ff54 	bl	8000af8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e05f      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x47c>
 8002c6a:	e057      	b.n	8002d1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fd ff3e 	bl	8000af8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fd ff3a 	bl	8000af8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e045      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4b0>
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x54c>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x558>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d030      	beq.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d129      	bne.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d122      	bne.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d119      	bne.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d10f      	bne.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0d0      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 020f 	bic.w	r2, r3, #15
 8002d5a:	4965      	ldr	r1, [pc, #404]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d040      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d115      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e073      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06b      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4936      	ldr	r1, [pc, #216]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fd fe6a 	bl	8000af8 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fd fe66 	bl	8000af8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e053      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d210      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	4922      	ldr	r1, [pc, #136]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f831 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1d0>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fdc6 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	080039e0 	.word	0x080039e0
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_EnableCSS+0x1c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_RCC_EnableCSS+0x1c>)
 8002f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80bd 	bhi.w	80030c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0b7      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f5a:	60bb      	str	r3, [r7, #8]
      break;
 8002f5c:	e0b7      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f60:	60bb      	str	r3, [r7, #8]
      break;
 8002f62:	e0b4      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04d      	beq.n	8003016 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	461a      	mov	r2, r3
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	ea02 0800 	and.w	r8, r2, r0
 8002f92:	ea03 0901 	and.w	r9, r3, r1
 8002f96:	4640      	mov	r0, r8
 8002f98:	4649      	mov	r1, r9
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	014b      	lsls	r3, r1, #5
 8002fa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fa8:	0142      	lsls	r2, r0, #5
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	ebb0 0008 	subs.w	r0, r0, r8
 8002fb2:	eb61 0109 	sbc.w	r1, r1, r9
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	018b      	lsls	r3, r1, #6
 8002fc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fc4:	0182      	lsls	r2, r0, #6
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fcc:	f04f 0000 	mov.w	r0, #0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	00d9      	lsls	r1, r3, #3
 8002fd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fda:	00d0      	lsls	r0, r2, #3
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	eb12 0208 	adds.w	r2, r2, r8
 8002fe4:	eb43 0309 	adc.w	r3, r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0259      	lsls	r1, r3, #9
 8002ff2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ff6:	0250      	lsls	r0, r2, #9
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	f7fd f916 	bl	8000238 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e04a      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	461a      	mov	r2, r3
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	ea02 0400 	and.w	r4, r2, r0
 800302e:	ea03 0501 	and.w	r5, r3, r1
 8003032:	4620      	mov	r0, r4
 8003034:	4629      	mov	r1, r5
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	014b      	lsls	r3, r1, #5
 8003040:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003044:	0142      	lsls	r2, r0, #5
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	1b00      	subs	r0, r0, r4
 800304c:	eb61 0105 	sbc.w	r1, r1, r5
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	018b      	lsls	r3, r1, #6
 800305a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800305e:	0182      	lsls	r2, r0, #6
 8003060:	1a12      	subs	r2, r2, r0
 8003062:	eb63 0301 	sbc.w	r3, r3, r1
 8003066:	f04f 0000 	mov.w	r0, #0
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	00d9      	lsls	r1, r3, #3
 8003070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003074:	00d0      	lsls	r0, r2, #3
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	1912      	adds	r2, r2, r4
 800307c:	eb45 0303 	adc.w	r3, r5, r3
 8003080:	f04f 0000 	mov.w	r0, #0
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	0299      	lsls	r1, r3, #10
 800308a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800308e:	0290      	lsls	r0, r2, #10
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f7fd f8ca 	bl	8000238 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	3301      	adds	r3, #1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	60bb      	str	r3, [r7, #8]
      break;
 80030c6:	e002      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ca:	60bb      	str	r3, [r7, #8]
      break;
 80030cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ce:	68bb      	ldr	r3, [r7, #8]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_NMI_IRQHandler+0x20>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d104      	bne.n	8003102 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80030f8:	f000 f80a 	bl	8003110 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_NMI_IRQHandler+0x24>)
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	701a      	strb	r2, [r3, #0]
  }
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	4002380e 	.word	0x4002380e

08003110 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003148:	4b69      	ldr	r3, [pc, #420]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a68      	ldr	r2, [pc, #416]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	4964      	ldr	r1, [pc, #400]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d017      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	4959      	ldr	r1, [pc, #356]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	494a      	ldr	r1, [pc, #296]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808b 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a39      	ldr	r2, [pc, #228]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fd fc66 	bl	8000af8 <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fd fc62 	bl	8000af8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e38f      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d035      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d02e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d114      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fd fc2a 	bl	8000af8 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fd fc26 	bl	8000af8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e351      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ee      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d6:	d111      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	4901      	ldr	r1, [pc, #4]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	e00b      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	0ffffcff 	.word	0x0ffffcff
 80032fc:	4bb3      	ldr	r3, [pc, #716]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4ab2      	ldr	r2, [pc, #712]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	4bb0      	ldr	r3, [pc, #704]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	49ad      	ldr	r1, [pc, #692]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003326:	4ba9      	ldr	r3, [pc, #676]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800332c:	4aa7      	ldr	r2, [pc, #668]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003336:	4ba5      	ldr	r3, [pc, #660]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	49a2      	ldr	r1, [pc, #648]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003354:	4b9d      	ldr	r3, [pc, #628]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003362:	499a      	ldr	r1, [pc, #616]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003376:	4b95      	ldr	r3, [pc, #596]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003384:	4991      	ldr	r1, [pc, #580]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003398:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a6:	4989      	ldr	r1, [pc, #548]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ba:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4980      	ldr	r1, [pc, #512]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033dc:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4978      	ldr	r1, [pc, #480]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f023 020c 	bic.w	r2, r3, #12
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	496f      	ldr	r1, [pc, #444]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	4967      	ldr	r1, [pc, #412]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003442:	4b62      	ldr	r3, [pc, #392]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	495e      	ldr	r1, [pc, #376]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	4956      	ldr	r1, [pc, #344]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003486:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a8:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	4945      	ldr	r1, [pc, #276]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	493c      	ldr	r1, [pc, #240]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ec:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	4934      	ldr	r1, [pc, #208]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351c:	492b      	ldr	r1, [pc, #172]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352c:	d101      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	491b      	ldr	r1, [pc, #108]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003580:	4912      	ldr	r1, [pc, #72]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	4909      	ldr	r1, [pc, #36]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	4986      	ldr	r1, [pc, #536]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035e4:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f4:	497d      	ldr	r1, [pc, #500]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d006      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80d6 	beq.w	80037bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003610:	4b76      	ldr	r3, [pc, #472]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a75      	ldr	r2, [pc, #468]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800361a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd fa6c 	bl	8000af8 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003624:	f7fd fa68 	bl	8000af8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e195      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003636:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d021      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366a:	0e1b      	lsrs	r3, r3, #24
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	019a      	lsls	r2, r3, #6
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	071b      	lsls	r3, r3, #28
 800368a:	4958      	ldr	r1, [pc, #352]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d129      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036be:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036cc:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	493e      	ldr	r1, [pc, #248]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036fa:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003700:	f023 021f 	bic.w	r2, r3, #31
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	3b01      	subs	r3, #1
 800370a:	4938      	ldr	r1, [pc, #224]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01d      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0e1b      	lsrs	r3, r3, #24
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4926      	ldr	r1, [pc, #152]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	491a      	ldr	r1, [pc, #104]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003796:	f7fd f9af 	bl	8000af8 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800379e:	f7fd f9ab 	bl	8000af8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0d8      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037b0:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 80ce 	bne.w	8003960 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd f992 	bl	8000af8 <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037d6:	e00b      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d8:	f7fd f98e 	bl	8000af8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d904      	bls.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0bb      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037f0:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fc:	d0ec      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d12a      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	0f1b      	lsrs	r3, r3, #28
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	019a      	lsls	r2, r3, #6
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	4944      	ldr	r1, [pc, #272]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003862:	4b42      	ldr	r3, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	493d      	ldr	r1, [pc, #244]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003890:	d11d      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	0e1b      	lsrs	r3, r3, #24
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	0f1b      	lsrs	r3, r3, #28
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	019a      	lsls	r2, r3, #6
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	4929      	ldr	r1, [pc, #164]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d028      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4917      	ldr	r1, [pc, #92]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4911      	ldr	r1, [pc, #68]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0e      	ldr	r2, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd f8de 	bl	8000af8 <HAL_GetTick>
 800393c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003940:	f7fd f8da 	bl	8000af8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e007      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d1ef      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <__libc_init_array>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4d0d      	ldr	r5, [pc, #52]	; (80039a8 <__libc_init_array+0x38>)
 8003974:	4c0d      	ldr	r4, [pc, #52]	; (80039ac <__libc_init_array+0x3c>)
 8003976:	1b64      	subs	r4, r4, r5
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	2600      	movs	r6, #0
 800397c:	42a6      	cmp	r6, r4
 800397e:	d109      	bne.n	8003994 <__libc_init_array+0x24>
 8003980:	4d0b      	ldr	r5, [pc, #44]	; (80039b0 <__libc_init_array+0x40>)
 8003982:	4c0c      	ldr	r4, [pc, #48]	; (80039b4 <__libc_init_array+0x44>)
 8003984:	f000 f820 	bl	80039c8 <_init>
 8003988:	1b64      	subs	r4, r4, r5
 800398a:	10a4      	asrs	r4, r4, #2
 800398c:	2600      	movs	r6, #0
 800398e:	42a6      	cmp	r6, r4
 8003990:	d105      	bne.n	800399e <__libc_init_array+0x2e>
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	f855 3b04 	ldr.w	r3, [r5], #4
 8003998:	4798      	blx	r3
 800399a:	3601      	adds	r6, #1
 800399c:	e7ee      	b.n	800397c <__libc_init_array+0xc>
 800399e:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a2:	4798      	blx	r3
 80039a4:	3601      	adds	r6, #1
 80039a6:	e7f2      	b.n	800398e <__libc_init_array+0x1e>
 80039a8:	080039f8 	.word	0x080039f8
 80039ac:	080039f8 	.word	0x080039f8
 80039b0:	080039f8 	.word	0x080039f8
 80039b4:	080039fc 	.word	0x080039fc

080039b8 <memset>:
 80039b8:	4402      	add	r2, r0
 80039ba:	4603      	mov	r3, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	d100      	bne.n	80039c2 <memset+0xa>
 80039c0:	4770      	bx	lr
 80039c2:	f803 1b01 	strb.w	r1, [r3], #1
 80039c6:	e7f9      	b.n	80039bc <memset+0x4>

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
